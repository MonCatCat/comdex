// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/asset/v1beta1/extendedLiquidity.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExtendedPairLiquidity struct {
	PairId         uint64 `protobuf:"varint,1,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"id"`
	CurrentBatchId uint64 `protobuf:"varint,2,opt,name=current_batch_id,json=currentBatchId,proto3" json:"current_batch_id,omitempty" yaml:"current_batch_id"`
	EscrowAddress  string `protobuf:"bytes,3,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty" yaml:"escrow_address"`
	LastOrderId    uint64 `protobuf:"varint,4,opt,name=last_order_id,json=lastOrderId,proto3" json:"last_order_id,omitempty" yaml:"last_order_id"`
	LastPrice      string `protobuf:"bytes,5,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty" yaml:"last_price"`
	QuoteCoinDenom string `protobuf:"bytes,6,opt,name=quote_coin_denom,json=quoteCoinDenom,proto3" json:"quote_coin_denom,omitempty" yaml:"quote_coin_denom"`
}

func (m *ExtendedPairLiquidity) Reset()         { *m = ExtendedPairLiquidity{} }
func (m *ExtendedPairLiquidity) String() string { return proto.CompactTextString(m) }
func (*ExtendedPairLiquidity) ProtoMessage()    {}
func (*ExtendedPairLiquidity) Descriptor() ([]byte, []int) {
	return fileDescriptor_10d2beab653cb07f, []int{0}
}
func (m *ExtendedPairLiquidity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedPairLiquidity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtendedPairLiquidity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExtendedPairLiquidity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedPairLiquidity.Merge(m, src)
}
func (m *ExtendedPairLiquidity) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedPairLiquidity) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedPairLiquidity.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedPairLiquidity proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ExtendedPairLiquidity)(nil), "comdex.asset.v1beta1.ExtendedPairLiquidity")
}

func init() {
	proto.RegisterFile("comdex/asset/v1beta1/extendedLiquidity.proto", fileDescriptor_10d2beab653cb07f)
}

var fileDescriptor_10d2beab653cb07f = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xbf, 0x8e, 0xd3, 0x30,
	0x18, 0x4f, 0xb8, 0xa3, 0xa8, 0x46, 0xad, 0x20, 0x6a, 0x45, 0x00, 0xc9, 0x39, 0x79, 0x40, 0x37,
	0x40, 0xa2, 0x13, 0x4c, 0x88, 0x01, 0x02, 0x37, 0x54, 0x42, 0xe2, 0xc8, 0xc8, 0x12, 0x39, 0xb6,
	0xaf, 0xb5, 0xd4, 0xc4, 0xa9, 0xe3, 0x40, 0x3b, 0xf3, 0x02, 0x3c, 0x06, 0x8f, 0xd2, 0xb1, 0x23,
	0x53, 0x04, 0xe9, 0x1b, 0xe4, 0x09, 0x90, 0xed, 0x80, 0xda, 0x6e, 0xfe, 0xfd, 0xcd, 0xf7, 0xe9,
	0x0b, 0x78, 0x4e, 0x44, 0x4e, 0xd9, 0x3a, 0xc2, 0x55, 0xc5, 0x54, 0xf4, 0xf5, 0x2a, 0x63, 0x0a,
	0x5f, 0x45, 0x6c, 0xad, 0x58, 0x41, 0x19, 0xfd, 0xc8, 0x57, 0x35, 0xa7, 0x5c, 0x6d, 0xc2, 0x52,
	0x0a, 0x25, 0xbc, 0x89, 0x75, 0x87, 0xc6, 0x1d, 0xf6, 0xee, 0x27, 0x93, 0xb9, 0x98, 0x0b, 0x63,
	0x88, 0xf4, 0xcb, 0x7a, 0xd1, 0xf7, 0x33, 0x30, 0xbd, 0xee, 0x7b, 0x6e, 0x30, 0x97, 0xff, 0xbb,
	0xbc, 0x67, 0xe0, 0x5e, 0x89, 0xb9, 0x4c, 0x39, 0xf5, 0xdd, 0x0b, 0xf7, 0xf2, 0x3c, 0x1e, 0x75,
	0x4d, 0x30, 0xdc, 0xe0, 0x7c, 0xf9, 0x1a, 0x71, 0x8a, 0x92, 0x81, 0x56, 0x67, 0xd4, 0xbb, 0x06,
	0x0f, 0x48, 0x2d, 0x25, 0x2b, 0x54, 0x9a, 0x61, 0x45, 0x16, 0x3a, 0x70, 0xc7, 0x04, 0x9e, 0x76,
	0x4d, 0xf0, 0xc8, 0x06, 0x4e, 0x1d, 0x28, 0x19, 0xf7, 0x54, 0xac, 0x99, 0x19, 0xf5, 0xde, 0x82,
	0x31, 0xab, 0x88, 0x14, 0xdf, 0x52, 0x4c, 0xa9, 0x64, 0x55, 0xe5, 0x9f, 0x5d, 0xb8, 0x97, 0xc3,
	0xf8, 0x71, 0xd7, 0x04, 0x53, 0x5b, 0x72, 0xac, 0xa3, 0x64, 0x64, 0x89, 0x77, 0x16, 0x7b, 0x6f,
	0xc0, 0x68, 0x89, 0x2b, 0x95, 0x0a, 0x49, 0x99, 0x19, 0xfb, 0xdc, 0x4c, 0xe1, 0x77, 0x4d, 0x30,
	0xb1, 0x05, 0x47, 0x32, 0x4a, 0xee, 0x6b, 0xfc, 0x49, 0xc3, 0x19, 0xf5, 0x5e, 0x01, 0x60, 0xe4,
	0x52, 0x72, 0xc2, 0xfc, 0xbb, 0xe6, 0xdb, 0xd3, 0xae, 0x09, 0x1e, 0x1e, 0x44, 0x8d, 0x86, 0x92,
	0xa1, 0x06, 0x37, 0xfa, 0xad, 0x97, 0x5f, 0xd5, 0x42, 0xb1, 0x94, 0x08, 0x5e, 0xa4, 0x94, 0x15,
	0x22, 0xf7, 0x07, 0x26, 0x7b, 0xb0, 0xfc, 0xa9, 0x03, 0x25, 0x63, 0x43, 0xbd, 0x17, 0xbc, 0xf8,
	0xa0, 0x89, 0xf8, 0xf3, 0xf6, 0x0f, 0x74, 0x7e, 0xb6, 0xd0, 0xd9, 0xb6, 0xd0, 0xdd, 0xb5, 0xd0,
	0xfd, 0xdd, 0x42, 0xf7, 0xc7, 0x1e, 0x3a, 0xbb, 0x3d, 0x74, 0x7e, 0xed, 0xa1, 0xf3, 0x25, 0x9a,
	0x73, 0xb5, 0xa8, 0xb3, 0x90, 0x88, 0x3c, 0xb2, 0xe7, 0x7d, 0x21, 0x6e, 0x6f, 0x39, 0xe1, 0x78,
	0xd9, 0xe3, 0xe8, 0xdf, 0xef, 0xa1, 0x36, 0x25, 0xab, 0xb2, 0x81, 0xb9, 0xef, 0xcb, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xe7, 0xcb, 0x5a, 0x83, 0x3b, 0x02, 0x00, 0x00,
}

func (m *ExtendedPairLiquidity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedPairLiquidity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedPairLiquidity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteCoinDenom) > 0 {
		i -= len(m.QuoteCoinDenom)
		copy(dAtA[i:], m.QuoteCoinDenom)
		i = encodeVarintExtendedLiquidity(dAtA, i, uint64(len(m.QuoteCoinDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastPrice) > 0 {
		i -= len(m.LastPrice)
		copy(dAtA[i:], m.LastPrice)
		i = encodeVarintExtendedLiquidity(dAtA, i, uint64(len(m.LastPrice)))
		i--
		dAtA[i] = 0x2a
	}
	if m.LastOrderId != 0 {
		i = encodeVarintExtendedLiquidity(dAtA, i, uint64(m.LastOrderId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintExtendedLiquidity(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CurrentBatchId != 0 {
		i = encodeVarintExtendedLiquidity(dAtA, i, uint64(m.CurrentBatchId))
		i--
		dAtA[i] = 0x10
	}
	if m.PairId != 0 {
		i = encodeVarintExtendedLiquidity(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExtendedLiquidity(dAtA []byte, offset int, v uint64) int {
	offset -= sovExtendedLiquidity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExtendedPairLiquidity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairId != 0 {
		n += 1 + sovExtendedLiquidity(uint64(m.PairId))
	}
	if m.CurrentBatchId != 0 {
		n += 1 + sovExtendedLiquidity(uint64(m.CurrentBatchId))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovExtendedLiquidity(uint64(l))
	}
	if m.LastOrderId != 0 {
		n += 1 + sovExtendedLiquidity(uint64(m.LastOrderId))
	}
	l = len(m.LastPrice)
	if l > 0 {
		n += 1 + l + sovExtendedLiquidity(uint64(l))
	}
	l = len(m.QuoteCoinDenom)
	if l > 0 {
		n += 1 + l + sovExtendedLiquidity(uint64(l))
	}
	return n
}

func sovExtendedLiquidity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExtendedLiquidity(x uint64) (n int) {
	return sovExtendedLiquidity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExtendedPairLiquidity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExtendedLiquidity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedPairLiquidity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedPairLiquidity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBatchId", wireType)
			}
			m.CurrentBatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentBatchId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOrderId", wireType)
			}
			m.LastOrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExtendedLiquidity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExtendedLiquidity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExtendedLiquidity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExtendedLiquidity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExtendedLiquidity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExtendedLiquidity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExtendedLiquidity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExtendedLiquidity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExtendedLiquidity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExtendedLiquidity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExtendedLiquidity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExtendedLiquidity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExtendedLiquidity = fmt.Errorf("proto: unexpected end of group")
)
