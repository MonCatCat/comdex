// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidationsV2/v1beta1/liquidate.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidationWhiteListing struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	//AuctionTriggerer
	//External Apps                  -------------> If external triggerer , then some params will be used from Comdex base app // If internal app triggerrer then params to be used from base app
	//Comdex Apps
	//bool param
	//true - comdex apps
	//false external apps
	Initiator bool `protobuf:"varint,6,opt,name=initiator,proto3" json:"initiator,omitempty" yaml:"initiator"`
	//Sets of Params for Dutch Auction
	IsDutchActivated  bool               `protobuf:"varint,7,opt,name=is_dutch_activated,json=isDutchActivated,proto3" json:"is_dutch_activated,omitempty" yaml:"is_dutch_activated"`
	DutchAuctionParam *DutchAuctionParam `protobuf:"bytes,8,opt,name=dutch_auction_param,json=dutchAuctionParam,proto3" json:"dutch_auction_param,omitempty" yaml:"dutch_auction_param"`
	//Sets of Params for English Auction
	IsEnglishActivated  bool                                   `protobuf:"varint,9,opt,name=is_english_activated,json=isEnglishActivated,proto3" json:"is_english_activated,omitempty" yaml:"is_english_activated"`
	EnglishAuctionParam *EnglishAuctionParam                   `protobuf:"bytes,10,opt,name=english_auction_param,json=englishAuctionParam,proto3" json:"english_auction_param,omitempty" yaml:"english_auction_param"`
	KeeeperIncentive    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=keeeper_incentive,json=keeeperIncentive,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"keeeper_incentive" yaml:"keeper_incentive"`
}

func (m *LiquidationWhiteListing) Reset()         { *m = LiquidationWhiteListing{} }
func (m *LiquidationWhiteListing) String() string { return proto.CompactTextString(m) }
func (*LiquidationWhiteListing) ProtoMessage()    {}
func (*LiquidationWhiteListing) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{0}
}
func (m *LiquidationWhiteListing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationWhiteListing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationWhiteListing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationWhiteListing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationWhiteListing.Merge(m, src)
}
func (m *LiquidationWhiteListing) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationWhiteListing) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationWhiteListing.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationWhiteListing proto.InternalMessageInfo

type AppReserveFunds struct {
	AppId         uint64                                  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId       uint64                                  `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	TokenQuantity github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=token_quantity,json=tokenQuantity,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"token_quantity" yaml:"token_quantity"`
}

func (m *AppReserveFunds) Reset()         { *m = AppReserveFunds{} }
func (m *AppReserveFunds) String() string { return proto.CompactTextString(m) }
func (*AppReserveFunds) ProtoMessage()    {}
func (*AppReserveFunds) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{1}
}
func (m *AppReserveFunds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppReserveFunds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppReserveFunds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppReserveFunds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppReserveFunds.Merge(m, src)
}
func (m *AppReserveFunds) XXX_Size() int {
	return m.Size()
}
func (m *AppReserveFunds) XXX_DiscardUnknown() {
	xxx_messageInfo_AppReserveFunds.DiscardUnknown(m)
}

var xxx_messageInfo_AppReserveFunds proto.InternalMessageInfo

type AppReserveFundsTxData struct {
	AppId       uint64        `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetTxData []AssetTxData `protobuf:"bytes,2,rep,name=asset_tx_data,json=assetTxData,proto3" json:"asset_tx_data" yaml:"asset_tx_data"`
}

func (m *AppReserveFundsTxData) Reset()         { *m = AppReserveFundsTxData{} }
func (m *AppReserveFundsTxData) String() string { return proto.CompactTextString(m) }
func (*AppReserveFundsTxData) ProtoMessage()    {}
func (*AppReserveFundsTxData) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{2}
}
func (m *AppReserveFundsTxData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppReserveFundsTxData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppReserveFundsTxData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppReserveFundsTxData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppReserveFundsTxData.Merge(m, src)
}
func (m *AppReserveFundsTxData) XXX_Size() int {
	return m.Size()
}
func (m *AppReserveFundsTxData) XXX_DiscardUnknown() {
	xxx_messageInfo_AppReserveFundsTxData.DiscardUnknown(m)
}

var xxx_messageInfo_AppReserveFundsTxData proto.InternalMessageInfo

type AssetTxData struct {
	AssetId       uint64                                  `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	TxType        string                                  `protobuf:"bytes,2,opt,name=tx_type,json=txType,proto3" json:"tx_type,omitempty" yaml:"tx_type"`
	TokenQuantity github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=token_quantity,json=tokenQuantity,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"token_quantity" yaml:"token_quantity"`
}

func (m *AssetTxData) Reset()         { *m = AssetTxData{} }
func (m *AssetTxData) String() string { return proto.CompactTextString(m) }
func (*AssetTxData) ProtoMessage()    {}
func (*AssetTxData) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{3}
}
func (m *AssetTxData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetTxData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetTxData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetTxData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetTxData.Merge(m, src)
}
func (m *AssetTxData) XXX_Size() int {
	return m.Size()
}
func (m *AssetTxData) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetTxData.DiscardUnknown(m)
}

var xxx_messageInfo_AssetTxData proto.InternalMessageInfo

type DutchAuctionParam struct {
	Premium         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=premium,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"premium" yaml:"premium"`
	Discount        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=discount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"discount" yaml:"discount"`
	DecrementFactor github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=decrement_factor,json=decrementFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"decrement_factor" yaml:"decrement_factor"`
}

func (m *DutchAuctionParam) Reset()         { *m = DutchAuctionParam{} }
func (m *DutchAuctionParam) String() string { return proto.CompactTextString(m) }
func (*DutchAuctionParam) ProtoMessage()    {}
func (*DutchAuctionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{4}
}
func (m *DutchAuctionParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DutchAuctionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DutchAuctionParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DutchAuctionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DutchAuctionParam.Merge(m, src)
}
func (m *DutchAuctionParam) XXX_Size() int {
	return m.Size()
}
func (m *DutchAuctionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DutchAuctionParam.DiscardUnknown(m)
}

var xxx_messageInfo_DutchAuctionParam proto.InternalMessageInfo

type EnglishAuctionParam struct {
	DecrementFactor github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=decrement_factor,json=decrementFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"decrement_factor" yaml:"decrement_factor"`
}

func (m *EnglishAuctionParam) Reset()         { *m = EnglishAuctionParam{} }
func (m *EnglishAuctionParam) String() string { return proto.CompactTextString(m) }
func (*EnglishAuctionParam) ProtoMessage()    {}
func (*EnglishAuctionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{5}
}
func (m *EnglishAuctionParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnglishAuctionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnglishAuctionParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnglishAuctionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnglishAuctionParam.Merge(m, src)
}
func (m *EnglishAuctionParam) XXX_Size() int {
	return m.Size()
}
func (m *EnglishAuctionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_EnglishAuctionParam.DiscardUnknown(m)
}

var xxx_messageInfo_EnglishAuctionParam proto.InternalMessageInfo

type LiquidationOffsetHolder struct {
	CurrentOffset uint64 `protobuf:"varint,2,opt,name=current_offset,json=currentOffset,proto3" json:"current_offset,omitempty"`
}

func (m *LiquidationOffsetHolder) Reset()         { *m = LiquidationOffsetHolder{} }
func (m *LiquidationOffsetHolder) String() string { return proto.CompactTextString(m) }
func (*LiquidationOffsetHolder) ProtoMessage()    {}
func (*LiquidationOffsetHolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{6}
}
func (m *LiquidationOffsetHolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationOffsetHolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationOffsetHolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationOffsetHolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationOffsetHolder.Merge(m, src)
}
func (m *LiquidationOffsetHolder) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationOffsetHolder) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationOffsetHolder.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationOffsetHolder proto.InternalMessageInfo

type LockedVault struct {
	LockedVaultId                uint64                                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AppId                        uint64                                  `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"id"`
	OriginalVaultId              uint64                                  `protobuf:"varint,3,opt,name=original_vault_id,json=originalVaultId,proto3" json:"original_vault_id,omitempty" yaml:"id"`
	ExtendedPairId               uint64                                  `protobuf:"varint,4,opt,name=extended_pair_vault_id,json=extendedPairVaultId,proto3" json:"extended_pair_vault_id,omitempty" yaml:"extended_pair_vault_id"`
	Owner                        string                                  `protobuf:"bytes,5,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	CollateralToken              github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=collateral_token,json=collateralToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"collateral_token" yaml:"collateral_token"`
	DebtToken                    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,7,opt,name=debt_token,json=debtToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"debt_token" yaml:"debt_token"`
	CurrentCollaterlisationRatio github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,8,opt,name=current_collateralisation_ratio,json=currentCollateralisationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_collateralisation_ratio" yaml:"current_collateralisation_ratio"`
	CollateralToBeAuctioned      github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,9,opt,name=collateral_to_be_auctioned,json=collateralToBeAuctioned,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"collateral_to_be_auctioned" yaml:"CollateralToBeAuctioned"`
	TargetDebt                   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,10,opt,name=target_debt,json=targetDebt,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"target_debt" yaml:"target_debt"`
	LiquidationTimestamp         time.Time                               `protobuf:"bytes,11,opt,name=liquidation_timestamp,json=liquidationTimestamp,proto3,stdtime" json:"liquidation_timestamp" yaml:"liquidation_timestamp"`
	// true for internal liquidator through bot , false if abci initiated liquidation
	IsInternalKeeper      bool   `protobuf:"varint,12,opt,name=is_internal_keeper,json=isInternalKeeper,proto3" json:"is_internal_keeper,omitempty" yaml:"is_intenal_keeper"`
	InternalKeeperAddress string `protobuf:"bytes,13,opt,name=internal_keeper_address,json=internalKeeperAddress,proto3" json:"internal_keeper_address,omitempty" yaml:"internal_keeper_address"`
	//To return funds to the external app back
	ExternalKeeperAddress string                                 `protobuf:"bytes,15,opt,name=external_keeper_address,json=externalKeeperAddress,proto3" json:"external_keeper_address,omitempty" yaml:"external_keeper_address"`
	FeeToBeCollected      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,16,opt,name=fee_to_be_collected,json=feeToBeCollected,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"fee_to_be_collected" yaml:"fee_to_be_collected"`
	BonusToBeGiven        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,17,opt,name=bonus_to_be_given,json=bonusToBeGiven,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonus_to_be_given" yaml:"bonus_to_be_given"`
	InitiatorType         string                                 `protobuf:"bytes,18,opt,name=initiator_type,json=initiatorType,proto3" json:"initiator_type,omitempty" yaml:"initiator_type"`
	AuctionType           bool                                   `protobuf:"varint,19,opt,name=auction_type,json=auctionType,proto3" json:"auction_type,omitempty" yaml:"auction_type"`
	IsDebtCmst            bool                                   `protobuf:"varint,20,opt,name=is_debt_cmst,json=isDebtCmst,proto3" json:"is_debt_cmst,omitempty" yaml:"is_debt_cmst"`
	// uint64 pair_id = 21 [
	//   (gogoproto.customname) = "PairId",
	//   (gogoproto.moretags) = "yaml:\"pair_id\""];
	CollateralAssetId uint64 `protobuf:"varint,21,opt,name=collateral_asset_id,json=collateralAssetId,proto3" json:"collateral_asset_id,omitempty" yaml:"collateral_asset_id"`
	DebtAssetId       uint64 `protobuf:"varint,22,opt,name=debt_asset_id,json=debtAssetId,proto3" json:"debt_asset_id,omitempty" yaml:"debt_asset_id"`
}

func (m *LockedVault) Reset()         { *m = LockedVault{} }
func (m *LockedVault) String() string { return proto.CompactTextString(m) }
func (*LockedVault) ProtoMessage()    {}
func (*LockedVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_631048b9d11253bf, []int{7}
}
func (m *LockedVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedVault.Merge(m, src)
}
func (m *LockedVault) XXX_Size() int {
	return m.Size()
}
func (m *LockedVault) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedVault.DiscardUnknown(m)
}

var xxx_messageInfo_LockedVault proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LiquidationWhiteListing)(nil), "comdex.liquidationsV2.v1beta1.LiquidationWhiteListing")
	proto.RegisterType((*AppReserveFunds)(nil), "comdex.liquidationsV2.v1beta1.AppReserveFunds")
	proto.RegisterType((*AppReserveFundsTxData)(nil), "comdex.liquidationsV2.v1beta1.AppReserveFundsTxData")
	proto.RegisterType((*AssetTxData)(nil), "comdex.liquidationsV2.v1beta1.AssetTxData")
	proto.RegisterType((*DutchAuctionParam)(nil), "comdex.liquidationsV2.v1beta1.DutchAuctionParam")
	proto.RegisterType((*EnglishAuctionParam)(nil), "comdex.liquidationsV2.v1beta1.EnglishAuctionParam")
	proto.RegisterType((*LiquidationOffsetHolder)(nil), "comdex.liquidationsV2.v1beta1.LiquidationOffsetHolder")
	proto.RegisterType((*LockedVault)(nil), "comdex.liquidationsV2.v1beta1.LockedVault")
}

func init() {
	proto.RegisterFile("comdex/liquidationsV2/v1beta1/liquidate.proto", fileDescriptor_631048b9d11253bf)
}

var fileDescriptor_631048b9d11253bf = []byte{
	// 1600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4b, 0x6f, 0x1b, 0x47,
	0x12, 0xd6, 0x48, 0xd6, 0x83, 0x4d, 0x51, 0x22, 0x5b, 0xa2, 0x45, 0x6b, 0x6d, 0x8e, 0x76, 0x00,
	0x7b, 0x05, 0x1b, 0x22, 0x2d, 0x19, 0x8b, 0x7d, 0x02, 0x6b, 0x51, 0x92, 0x6d, 0xee, 0x0a, 0x6b,
	0x7b, 0x20, 0x78, 0x01, 0x63, 0x77, 0x27, 0xcd, 0x99, 0x26, 0xd5, 0x10, 0x39, 0x43, 0xcf, 0x34,
	0x15, 0x0a, 0x01, 0x02, 0x24, 0x97, 0x20, 0x0f, 0x20, 0xce, 0x21, 0xe7, 0x5c, 0x93, 0x7f, 0x91,
	0x43, 0x80, 0x18, 0x39, 0xf9, 0x18, 0xe4, 0x30, 0x49, 0xc6, 0xff, 0x80, 0xc7, 0x9c, 0x82, 0x7e,
	0xcc, 0x8b, 0xa4, 0xe5, 0xd0, 0x40, 0x80, 0x5c, 0x4c, 0x4f, 0xd7, 0xf7, 0x7d, 0x55, 0x5d, 0xdd,
	0x5d, 0x5d, 0x2d, 0xb0, 0x65, 0x3a, 0x1d, 0x0b, 0xf7, 0xab, 0x6d, 0xf2, 0xa4, 0x47, 0x2c, 0x44,
	0x89, 0x63, 0x7b, 0x8f, 0x76, 0xaa, 0xa7, 0xdb, 0x0d, 0x4c, 0xd1, 0x76, 0x34, 0x8c, 0x2b, 0x5d,
	0xd7, 0xa1, 0x0e, 0xbc, 0x22, 0xe0, 0x95, 0x34, 0xbc, 0x22, 0xe1, 0xeb, 0xab, 0x2d, 0xa7, 0xe5,
	0x70, 0x64, 0x95, 0xfd, 0x4f, 0x90, 0xd6, 0xd5, 0x96, 0xe3, 0xb4, 0xda, 0xb8, 0xca, 0xbf, 0x1a,
	0xbd, 0x66, 0x95, 0x92, 0x0e, 0xf6, 0x28, 0xea, 0x74, 0x25, 0xa0, 0x6c, 0x3a, 0x5e, 0xc7, 0xf1,
	0xaa, 0x0d, 0xe4, 0xe1, 0xc8, 0xb5, 0xe9, 0x10, 0x5b, 0xd8, 0xb5, 0xf7, 0xe7, 0xc0, 0xda, 0x61,
	0xec, 0xf1, 0x3f, 0xc7, 0x84, 0xe2, 0x43, 0xe2, 0x51, 0x62, 0xb7, 0xe0, 0x36, 0x98, 0x43, 0xdd,
	0xae, 0x41, 0xac, 0x92, 0xb2, 0xa1, 0x6c, 0x5e, 0xa8, 0xad, 0x07, 0xbe, 0x3a, 0xbb, 0xdb, 0xed,
	0xd6, 0xad, 0x81, 0xaf, 0xe6, 0xce, 0x50, 0xa7, 0xfd, 0x57, 0x4d, 0x00, 0x34, 0x7d, 0x16, 0xb1,
	0x71, 0xf8, 0x0f, 0x90, 0x21, 0x36, 0xa1, 0x04, 0x51, 0xc7, 0x2d, 0xcd, 0x6d, 0x28, 0x9b, 0x0b,
	0xb5, 0xdf, 0x07, 0xbe, 0x9a, 0xa9, 0x87, 0x83, 0x03, 0x5f, 0xcd, 0x0b, 0x66, 0x84, 0xd3, 0xf4,
	0x98, 0x03, 0x0d, 0x00, 0x89, 0x67, 0x58, 0x3d, 0x6a, 0x1e, 0x1b, 0xc8, 0xa4, 0xe4, 0x14, 0x51,
	0x6c, 0x95, 0xe6, 0xb9, 0xd2, 0x76, 0xe0, 0xab, 0xf9, 0xba, 0xb7, 0xcf, 0x8c, 0xbb, 0xa1, 0x6d,
	0xe0, 0xab, 0x97, 0xa4, 0xe0, 0x08, 0x4f, 0xd3, 0xf3, 0x64, 0x08, 0x0e, 0x3f, 0x55, 0xc0, 0x8a,
	0x84, 0xf5, 0x4c, 0x36, 0x65, 0xa3, 0x8b, 0x5c, 0xd4, 0x29, 0x2d, 0x6c, 0x28, 0x9b, 0xd9, 0x9d,
	0x9b, 0x95, 0x73, 0x57, 0xa1, 0x22, 0xc4, 0x04, 0xf1, 0x01, 0xe3, 0xd5, 0x6e, 0x05, 0xbe, 0x5a,
	0x18, 0x19, 0x1e, 0xf8, 0xea, 0xba, 0x88, 0x6a, 0x8c, 0x2f, 0x4d, 0x2f, 0x58, 0xc3, 0x04, 0xd8,
	0x02, 0xab, 0xc4, 0x33, 0xb0, 0xdd, 0x6a, 0x13, 0x2f, 0x39, 0xf5, 0x0c, 0x9f, 0xfa, 0x1f, 0x03,
	0x5f, 0x85, 0x75, 0xef, 0x40, 0x98, 0x93, 0x93, 0xff, 0x5d, 0x34, 0xf9, 0x11, 0xae, 0xa6, 0x43,
	0x32, 0x42, 0x81, 0x9f, 0x29, 0xa0, 0x18, 0x41, 0x53, 0x29, 0x00, 0x3c, 0x05, 0x3b, 0xaf, 0x48,
	0x41, 0x28, 0x98, 0x4c, 0xc2, 0x9f, 0x02, 0x5f, 0x5d, 0x19, 0x63, 0x18, 0xf8, 0xea, 0x65, 0x11,
	0xdf, 0x58, 0x8f, 0x9a, 0xbe, 0x82, 0x47, 0x49, 0xf0, 0x14, 0x14, 0x4e, 0x30, 0xc6, 0x5d, 0xec,
	0x1a, 0xc4, 0x36, 0xb1, 0x4d, 0xc9, 0x29, 0x2e, 0x65, 0x37, 0x94, 0xcd, 0x4c, 0xad, 0xfe, 0xcc,
	0x57, 0xa7, 0xbe, 0xf3, 0xd5, 0x6b, 0x2d, 0x42, 0x8f, 0x7b, 0x0d, 0x16, 0x6a, 0x55, 0xee, 0x70,
	0xf1, 0xb3, 0xe5, 0x59, 0x27, 0x55, 0x7a, 0xd6, 0xc5, 0x5e, 0x65, 0x1f, 0x9b, 0x03, 0x5f, 0x5d,
	0x13, 0xfe, 0x4f, 0x86, 0xf4, 0x34, 0x3d, 0x2f, 0x7d, 0xd4, 0xa3, 0xa1, 0x8f, 0xa6, 0xc1, 0xf2,
	0x6e, 0xb7, 0xab, 0x63, 0x0f, 0xbb, 0xa7, 0xf8, 0x4e, 0xcf, 0xb6, 0xbc, 0xd7, 0x39, 0x03, 0x7f,
	0x01, 0x0b, 0xc8, 0xf3, 0x30, 0x65, 0xa4, 0x69, 0x4e, 0x2a, 0x07, 0xbe, 0x3a, 0xbf, 0xcb, 0xc6,
	0x38, 0x6d, 0x59, 0xd2, 0x24, 0x48, 0xd3, 0xe7, 0x91, 0xb0, 0xc1, 0x0f, 0x14, 0xb0, 0x44, 0x9d,
	0x13, 0x6c, 0x1b, 0x4f, 0x7a, 0xc8, 0xa6, 0x84, 0x9e, 0x95, 0x66, 0xf8, 0xa2, 0x5c, 0xaa, 0x88,
	0xe9, 0x55, 0xd8, 0x39, 0x8e, 0x96, 0x62, 0xcf, 0x21, 0x76, 0xed, 0x1e, 0x4b, 0xc9, 0xc0, 0x57,
	0x8b, 0x42, 0x35, 0x4d, 0xd7, 0x7e, 0xf2, 0xd5, 0x3f, 0xfc, 0x82, 0x5c, 0x31, 0x25, 0x3d, 0xc7,
	0xb9, 0x0f, 0x43, 0xea, 0xd7, 0x0a, 0x28, 0x0e, 0xa5, 0xe3, 0xa8, 0xbf, 0x8f, 0x28, 0x7a, 0x9d,
	0xa4, 0xbc, 0x05, 0x72, 0x62, 0xbe, 0xb4, 0x6f, 0x58, 0x88, 0xa2, 0xd2, 0xf4, 0xc6, 0xcc, 0x66,
	0x76, 0xe7, 0xfa, 0x2b, 0x36, 0x1b, 0x4f, 0x9a, 0xf0, 0x5a, 0xbb, 0xc1, 0x26, 0x1a, 0xf8, 0x6a,
	0x36, 0x31, 0x38, 0xf0, 0xd5, 0xd5, 0x64, 0x36, 0xa5, 0xba, 0xa6, 0x67, 0x51, 0x0c, 0xd2, 0xde,
	0x9d, 0x06, 0x49, 0x52, 0x6a, 0x85, 0x94, 0xc9, 0x56, 0xe8, 0x06, 0x98, 0xa7, 0x7d, 0x83, 0x25,
	0x8d, 0xaf, 0x6d, 0xa6, 0x06, 0x07, 0xbe, 0xba, 0x24, 0x53, 0x2f, 0x0c, 0x9a, 0x3e, 0x47, 0xfb,
	0x47, 0x67, 0x5d, 0xfc, 0xdb, 0x5a, 0xce, 0xaf, 0xa6, 0xc1, 0x68, 0x9d, 0x82, 0x8f, 0xc1, 0x7c,
	0xd7, 0xc5, 0x1d, 0xd2, 0xeb, 0xf0, 0x4c, 0x64, 0x6a, 0xb7, 0x27, 0x3e, 0x61, 0x72, 0xf6, 0x52,
	0x46, 0xd3, 0x43, 0x41, 0xf8, 0x3f, 0xb0, 0x60, 0x11, 0xcf, 0x74, 0x7a, 0x36, 0x95, 0xc9, 0xda,
	0x9d, 0x58, 0x5c, 0xae, 0x44, 0xa8, 0xa3, 0xe9, 0x91, 0x24, 0xa4, 0x20, 0x6f, 0x61, 0xd3, 0xc5,
	0x1d, 0x6c, 0x53, 0xa3, 0x89, 0x4c, 0x76, 0xe5, 0xcc, 0x4c, 0x5c, 0x25, 0xea, 0x36, 0x8d, 0xab,
	0xc4, 0xb0, 0x9e, 0xa6, 0x2f, 0x47, 0x43, 0x77, 0xc4, 0xc8, 0x87, 0x0a, 0x18, 0x57, 0xe9, 0xc6,
	0x46, 0xa3, 0xfc, 0xea, 0xd1, 0xdc, 0x4e, 0xdd, 0xde, 0xf7, 0x9b, 0x4d, 0x0f, 0xd3, 0x7b, 0x4e,
	0xdb, 0xc2, 0x2e, 0xbc, 0x0a, 0x96, 0xcc, 0x9e, 0xeb, 0x32, 0xba, 0xc3, 0xc7, 0x45, 0x31, 0xd2,
	0x73, 0x72, 0x54, 0x80, 0xb5, 0x6f, 0x0a, 0x20, 0x7b, 0xe8, 0x98, 0x27, 0xd8, 0x7a, 0x84, 0x7a,
	0x6d, 0x0a, 0x2b, 0x60, 0x3a, 0x75, 0x2a, 0x72, 0x09, 0x23, 0x3f, 0x1b, 0x19, 0x79, 0xe1, 0x58,
	0x9a, 0x3e, 0x4d, 0x2c, 0xb8, 0x15, 0xd5, 0x02, 0x51, 0xeb, 0x2e, 0x26, 0x6b, 0x41, 0x02, 0x2b,
	0xeb, 0xc0, 0x21, 0x28, 0x38, 0x2e, 0x69, 0x11, 0x1b, 0xb5, 0x8d, 0x53, 0xa6, 0xc9, 0x98, 0x33,
	0x9c, 0xb9, 0x11, 0xf8, 0xea, 0xf2, 0x7d, 0x69, 0x1c, 0xeb, 0x6f, 0xd9, 0x49, 0x5b, 0xe1, 0x31,
	0xb8, 0x88, 0xfb, 0x14, 0xdb, 0x16, 0xb6, 0x8c, 0x2e, 0x22, 0x6e, 0x2c, 0x79, 0x81, 0x4b, 0xb2,
	0xcb, 0x79, 0xe9, 0x40, 0x22, 0x1e, 0x20, 0xe2, 0x72, 0xc5, 0x2b, 0xf2, 0x4a, 0x1a, 0xcb, 0x64,
	0x77, 0x52, 0x82, 0x10, 0x7a, 0xaa, 0x82, 0x59, 0xe7, 0x4d, 0x1b, 0xbb, 0xa5, 0x59, 0xbe, 0xa6,
	0x97, 0xd8, 0x2c, 0xef, 0xb3, 0x81, 0x81, 0xaf, 0x2e, 0x0a, 0x3d, 0x6e, 0xd7, 0x74, 0x81, 0x83,
	0x4f, 0x15, 0x90, 0x37, 0x9d, 0x76, 0x1b, 0x51, 0xec, 0xa2, 0xb6, 0xc1, 0xcf, 0x22, 0xef, 0x88,
	0xce, 0x3d, 0xfd, 0xff, 0x94, 0xa7, 0x5f, 0xee, 0x80, 0x61, 0x81, 0x89, 0xce, 0xff, 0x72, 0xcc,
	0x3e, 0x62, 0x64, 0xf8, 0x36, 0x00, 0x16, 0x6e, 0x50, 0x19, 0xcb, 0xfc, 0xab, 0x62, 0xd9, 0x97,
	0xb1, 0x14, 0xc2, 0xdd, 0x18, 0x52, 0x27, 0x8a, 0x22, 0xc3, 0x78, 0xc2, 0xff, 0x97, 0x0a, 0x50,
	0xc3, 0x2d, 0x19, 0xc7, 0x46, 0x3c, 0xbe, 0x77, 0x0d, 0x97, 0xfd, 0xf0, 0x36, 0x2c, 0x53, 0xeb,
	0x4f, 0x56, 0x27, 0x02, 0x5f, 0xbd, 0xbc, 0x27, 0x84, 0xf7, 0xa4, 0x6e, 0x28, 0xab, 0xb3, 0x7f,
	0x07, 0xbe, 0x7a, 0x4d, 0x26, 0xf4, 0x7c, 0xf7, 0x9a, 0x7e, 0xc5, 0x4c, 0xeb, 0xa0, 0x94, 0x10,
	0xfc, 0x42, 0x01, 0xeb, 0xa9, 0x45, 0x31, 0x1a, 0x38, 0xec, 0x69, 0x64, 0xb3, 0x76, 0x6e, 0x4e,
	0x1f, 0xca, 0x9c, 0x96, 0x45, 0x38, 0x7b, 0x89, 0x15, 0xaa, 0xe1, 0xdd, 0x50, 0x67, 0xa2, 0x04,
	0xaf, 0x99, 0xe3, 0x45, 0xe0, 0x3b, 0x0a, 0xc8, 0x52, 0xe4, 0xb6, 0x30, 0x35, 0xd8, 0x1a, 0xc8,
	0xf6, 0xee, 0x9c, 0xe0, 0x0e, 0x64, 0x70, 0x50, 0x5e, 0x3d, 0x31, 0x77, 0xa2, 0x80, 0x80, 0x20,
	0xee, 0xe3, 0x06, 0x85, 0x9f, 0x28, 0xa0, 0x98, 0xb8, 0xda, 0x8d, 0xe8, 0x79, 0xc2, 0xfb, 0xb9,
	0xec, 0xce, 0x7a, 0x45, 0x3c, 0x60, 0x2a, 0xe1, 0x03, 0xa6, 0x72, 0x14, 0x22, 0xc4, 0x4d, 0x14,
	0xf8, 0xea, 0x6a, 0xa2, 0xc2, 0x45, 0xd6, 0xb8, 0xb3, 0x1c, 0x2b, 0xaf, 0x3d, 0xfd, 0x5e, 0x55,
	0xf4, 0xd5, 0xf6, 0x18, 0x26, 0xfc, 0x3f, 0x7f, 0x62, 0x10, 0x9b, 0x62, 0x97, 0x55, 0x21, 0xd1,
	0x19, 0x96, 0x16, 0x79, 0x9f, 0x7d, 0x53, 0x3c, 0x31, 0xea, 0xd2, 0xf8, 0x2f, 0x6e, 0x1b, 0xf8,
	0x6a, 0x29, 0xea, 0xb2, 0x19, 0x2f, 0xa6, 0xf1, 0x17, 0x46, 0x1a, 0x0d, 0x3d, 0xb0, 0x36, 0x24,
	0x6e, 0x20, 0xcb, 0x72, 0xb1, 0xe7, 0x95, 0x72, 0x7c, 0x77, 0xff, 0x2d, 0xf0, 0xd5, 0x62, 0x9a,
	0xb4, 0x2b, 0x00, 0xf1, 0xce, 0x78, 0x89, 0x82, 0xa6, 0x17, 0xc9, 0x38, 0x22, 0x73, 0xca, 0xca,
	0xd6, 0x38, 0xa7, 0xcb, 0xb1, 0xd3, 0x83, 0xfe, 0xb9, 0x4e, 0x5f, 0xa2, 0xa0, 0xe9, 0x45, 0x3c,
	0x8e, 0x08, 0x3f, 0x56, 0xc0, 0x4a, 0x13, 0x63, 0x79, 0x0c, 0xd8, 0x3e, 0xc4, 0x26, 0x7b, 0xb3,
	0xe4, 0xb9, 0xc7, 0x37, 0x26, 0xbb, 0xf7, 0x58, 0xe6, 0xef, 0x60, 0xcc, 0xf6, 0xf0, 0x5e, 0xa8,
	0x14, 0x3f, 0xa3, 0xc6, 0xb8, 0xd1, 0xf4, 0x7c, 0x73, 0x08, 0x0f, 0xdf, 0x53, 0x40, 0xa1, 0xe1,
	0xd8, 0x3d, 0x4f, 0x82, 0x5b, 0xe4, 0x14, 0xdb, 0xa5, 0x02, 0x8f, 0xe7, 0xbf, 0x13, 0xc7, 0xb3,
	0x54, 0x63, 0x52, 0xcc, 0xc3, 0x5d, 0xa6, 0x13, 0xef, 0x83, 0x11, 0x17, 0x9a, 0xbe, 0xd4, 0x48,
	0x61, 0xe1, 0x43, 0xb0, 0x14, 0xbd, 0x6a, 0x45, 0xbf, 0x08, 0x79, 0x14, 0xd7, 0xd9, 0x9d, 0x1a,
	0x3d, 0x87, 0x59, 0x9b, 0x18, 0x37, 0x7b, 0x69, 0x82, 0xa6, 0xe7, 0x48, 0x12, 0x07, 0xeb, 0x60,
	0x31, 0x7c, 0x3e, 0x71, 0xc1, 0x15, 0xbe, 0x65, 0xaf, 0xf1, 0x96, 0x58, 0x8c, 0x4b, 0xb9, 0x15,
	0xd9, 0xbe, 0x26, 0xc0, 0xac, 0x23, 0x8e, 0x31, 0xf0, 0x2e, 0x58, 0x64, 0xcf, 0x65, 0x56, 0xd2,
	0xcd, 0x8e, 0x47, 0x4b, 0xab, 0x5c, 0xea, 0x6a, 0xe0, 0xab, 0xa0, 0xee, 0xb1, 0x93, 0xbb, 0xd7,
	0xf1, 0x68, 0xac, 0x94, 0xc4, 0x6a, 0x3a, 0x20, 0x11, 0x04, 0xfe, 0x1b, 0xac, 0x24, 0xea, 0x61,
	0xd4, 0x55, 0x17, 0x45, 0xff, 0x10, 0xaf, 0xdf, 0x18, 0x90, 0xa6, 0x17, 0xe2, 0x51, 0xd9, 0x7b,
	0xc3, 0xbf, 0x83, 0x1c, 0xf7, 0x14, 0x29, 0x5d, 0xe4, 0x4a, 0xa5, 0xb8, 0xd1, 0x4f, 0x99, 0x35,
	0x3d, 0xcb, 0xbe, 0x25, 0xbb, 0xf6, 0xf8, 0xd9, 0x8f, 0xe5, 0xa9, 0xcf, 0x83, 0xf2, 0xd4, 0xb3,
	0xa0, 0xac, 0x3c, 0x0f, 0xca, 0xca, 0x0f, 0x41, 0x59, 0x79, 0xfa, 0xa2, 0x3c, 0xf5, 0xfc, 0x45,
	0x79, 0xea, 0xdb, 0x17, 0xe5, 0xa9, 0xc7, 0x7f, 0x4e, 0x2d, 0x3e, 0x7b, 0x7a, 0x6c, 0x39, 0xcd,
	0x26, 0x31, 0x09, 0x6a, 0xcb, 0xef, 0xea, 0xc8, 0x5f, 0x6c, 0xf8, 0x96, 0x68, 0xcc, 0xf1, 0x12,
	0x75, 0xeb, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x51, 0xce, 0x1c, 0xd7, 0x11, 0x00, 0x00,
}

func (m *LiquidationWhiteListing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationWhiteListing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationWhiteListing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.KeeeperIncentive.Size()
		i -= size
		if _, err := m.KeeeperIncentive.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.EnglishAuctionParam != nil {
		{
			size, err := m.EnglishAuctionParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.IsEnglishActivated {
		i--
		if m.IsEnglishActivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.DutchAuctionParam != nil {
		{
			size, err := m.DutchAuctionParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.IsDutchActivated {
		i--
		if m.IsDutchActivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Initiator {
		i--
		if m.Initiator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.AppId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppReserveFunds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppReserveFunds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppReserveFunds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenQuantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppReserveFundsTxData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppReserveFundsTxData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppReserveFundsTxData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetTxData) > 0 {
		for iNdEx := len(m.AssetTxData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetTxData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.AppId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssetTxData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetTxData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetTxData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenQuantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TxType) > 0 {
		i -= len(m.TxType)
		copy(dAtA[i:], m.TxType)
		i = encodeVarintLiquidate(dAtA, i, uint64(len(m.TxType)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssetId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DutchAuctionParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DutchAuctionParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DutchAuctionParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DecrementFactor.Size()
		i -= size
		if _, err := m.DecrementFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Discount.Size()
		i -= size
		if _, err := m.Discount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Premium.Size()
		i -= size
		if _, err := m.Premium.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EnglishAuctionParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnglishAuctionParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnglishAuctionParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DecrementFactor.Size()
		i -= size
		if _, err := m.DecrementFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidationOffsetHolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationOffsetHolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationOffsetHolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentOffset != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.CurrentOffset))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *LockedVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DebtAssetId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.DebtAssetId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CollateralAssetId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.CollateralAssetId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.IsDebtCmst {
		i--
		if m.IsDebtCmst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AuctionType {
		i--
		if m.AuctionType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.InitiatorType) > 0 {
		i -= len(m.InitiatorType)
		copy(dAtA[i:], m.InitiatorType)
		i = encodeVarintLiquidate(dAtA, i, uint64(len(m.InitiatorType)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	{
		size := m.BonusToBeGiven.Size()
		i -= size
		if _, err := m.BonusToBeGiven.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.FeeToBeCollected.Size()
		i -= size
		if _, err := m.FeeToBeCollected.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if len(m.ExternalKeeperAddress) > 0 {
		i -= len(m.ExternalKeeperAddress)
		copy(dAtA[i:], m.ExternalKeeperAddress)
		i = encodeVarintLiquidate(dAtA, i, uint64(len(m.ExternalKeeperAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.InternalKeeperAddress) > 0 {
		i -= len(m.InternalKeeperAddress)
		copy(dAtA[i:], m.InternalKeeperAddress)
		i = encodeVarintLiquidate(dAtA, i, uint64(len(m.InternalKeeperAddress)))
		i--
		dAtA[i] = 0x6a
	}
	if m.IsInternalKeeper {
		i--
		if m.IsInternalKeeper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LiquidationTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LiquidationTimestamp):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintLiquidate(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.TargetDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.CollateralToBeAuctioned.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.CurrentCollaterlisationRatio.Size()
		i -= size
		if _, err := m.CurrentCollaterlisationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.DebtToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.CollateralToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidate(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLiquidate(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExtendedPairId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.ExtendedPairId))
		i--
		dAtA[i] = 0x20
	}
	if m.OriginalVaultId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.OriginalVaultId))
		i--
		dAtA[i] = 0x18
	}
	if m.AppId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x10
	}
	if m.LockedVaultId != 0 {
		i = encodeVarintLiquidate(dAtA, i, uint64(m.LockedVaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidate(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidationWhiteListing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLiquidate(uint64(m.AppId))
	}
	if m.Initiator {
		n += 2
	}
	if m.IsDutchActivated {
		n += 2
	}
	if m.DutchAuctionParam != nil {
		l = m.DutchAuctionParam.Size()
		n += 1 + l + sovLiquidate(uint64(l))
	}
	if m.IsEnglishActivated {
		n += 2
	}
	if m.EnglishAuctionParam != nil {
		l = m.EnglishAuctionParam.Size()
		n += 1 + l + sovLiquidate(uint64(l))
	}
	l = m.KeeeperIncentive.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	return n
}

func (m *AppReserveFunds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLiquidate(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovLiquidate(uint64(m.AssetId))
	}
	l = m.TokenQuantity.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	return n
}

func (m *AppReserveFundsTxData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovLiquidate(uint64(m.AppId))
	}
	if len(m.AssetTxData) > 0 {
		for _, e := range m.AssetTxData {
			l = e.Size()
			n += 1 + l + sovLiquidate(uint64(l))
		}
	}
	return n
}

func (m *AssetTxData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovLiquidate(uint64(m.AssetId))
	}
	l = len(m.TxType)
	if l > 0 {
		n += 1 + l + sovLiquidate(uint64(l))
	}
	l = m.TokenQuantity.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	return n
}

func (m *DutchAuctionParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Premium.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	l = m.Discount.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	l = m.DecrementFactor.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	return n
}

func (m *EnglishAuctionParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DecrementFactor.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	return n
}

func (m *LiquidationOffsetHolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentOffset != 0 {
		n += 1 + sovLiquidate(uint64(m.CurrentOffset))
	}
	return n
}

func (m *LockedVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockedVaultId != 0 {
		n += 1 + sovLiquidate(uint64(m.LockedVaultId))
	}
	if m.AppId != 0 {
		n += 1 + sovLiquidate(uint64(m.AppId))
	}
	if m.OriginalVaultId != 0 {
		n += 1 + sovLiquidate(uint64(m.OriginalVaultId))
	}
	if m.ExtendedPairId != 0 {
		n += 1 + sovLiquidate(uint64(m.ExtendedPairId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLiquidate(uint64(l))
	}
	l = m.CollateralToken.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	l = m.DebtToken.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	l = m.CurrentCollaterlisationRatio.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	l = m.CollateralToBeAuctioned.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	l = m.TargetDebt.Size()
	n += 1 + l + sovLiquidate(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LiquidationTimestamp)
	n += 1 + l + sovLiquidate(uint64(l))
	if m.IsInternalKeeper {
		n += 2
	}
	l = len(m.InternalKeeperAddress)
	if l > 0 {
		n += 1 + l + sovLiquidate(uint64(l))
	}
	l = len(m.ExternalKeeperAddress)
	if l > 0 {
		n += 1 + l + sovLiquidate(uint64(l))
	}
	l = m.FeeToBeCollected.Size()
	n += 2 + l + sovLiquidate(uint64(l))
	l = m.BonusToBeGiven.Size()
	n += 2 + l + sovLiquidate(uint64(l))
	l = len(m.InitiatorType)
	if l > 0 {
		n += 2 + l + sovLiquidate(uint64(l))
	}
	if m.AuctionType {
		n += 3
	}
	if m.IsDebtCmst {
		n += 3
	}
	if m.CollateralAssetId != 0 {
		n += 2 + sovLiquidate(uint64(m.CollateralAssetId))
	}
	if m.DebtAssetId != 0 {
		n += 2 + sovLiquidate(uint64(m.DebtAssetId))
	}
	return n
}

func sovLiquidate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidate(x uint64) (n int) {
	return sovLiquidate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidationWhiteListing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationWhiteListing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationWhiteListing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initiator = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDutchActivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDutchActivated = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DutchAuctionParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DutchAuctionParam == nil {
				m.DutchAuctionParam = &DutchAuctionParam{}
			}
			if err := m.DutchAuctionParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnglishActivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnglishActivated = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnglishAuctionParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EnglishAuctionParam == nil {
				m.EnglishAuctionParam = &EnglishAuctionParam{}
			}
			if err := m.EnglishAuctionParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeeeperIncentive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.KeeeperIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppReserveFunds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppReserveFunds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppReserveFunds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenQuantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppReserveFundsTxData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppReserveFundsTxData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppReserveFundsTxData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetTxData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetTxData = append(m.AssetTxData, AssetTxData{})
			if err := m.AssetTxData[len(m.AssetTxData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetTxData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetTxData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetTxData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenQuantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DutchAuctionParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DutchAuctionParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DutchAuctionParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Premium.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Discount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecrementFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DecrementFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnglishAuctionParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnglishAuctionParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnglishAuctionParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecrementFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DecrementFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationOffsetHolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationOffsetHolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationOffsetHolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOffset", wireType)
			}
			m.CurrentOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentOffset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultId", wireType)
			}
			m.LockedVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalVaultId", wireType)
			}
			m.OriginalVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPairId", wireType)
			}
			m.ExtendedPairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCollaterlisationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentCollaterlisationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralToBeAuctioned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralToBeAuctioned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LiquidationTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInternalKeeper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInternalKeeper = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalKeeperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalKeeperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalKeeperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalKeeperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeToBeCollected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeToBeCollected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusToBeGiven", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BonusToBeGiven.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitiatorType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitiatorType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuctionType = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDebtCmst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDebtCmst = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAssetId", wireType)
			}
			m.CollateralAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtAssetId", wireType)
			}
			m.DebtAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidate = fmt.Errorf("proto: unexpected end of group")
)
