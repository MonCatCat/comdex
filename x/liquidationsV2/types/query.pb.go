// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidationsV2/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryLockedVaultRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Id    uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLockedVaultRequest) Reset()         { *m = QueryLockedVaultRequest{} }
func (m *QueryLockedVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultRequest) ProtoMessage()    {}
func (*QueryLockedVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{2}
}
func (m *QueryLockedVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultRequest.Merge(m, src)
}
func (m *QueryLockedVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultRequest proto.InternalMessageInfo

func (m *QueryLockedVaultRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *QueryLockedVaultRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryLockedVaultResponse struct {
	LockedVault LockedVault `protobuf:"bytes,1,opt,name=locked_vault,json=lockedVault,proto3" json:"locked_vault" yaml:"locked_vault"`
}

func (m *QueryLockedVaultResponse) Reset()         { *m = QueryLockedVaultResponse{} }
func (m *QueryLockedVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultResponse) ProtoMessage()    {}
func (*QueryLockedVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{3}
}
func (m *QueryLockedVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultResponse.Merge(m, src)
}
func (m *QueryLockedVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultResponse proto.InternalMessageInfo

func (m *QueryLockedVaultResponse) GetLockedVault() LockedVault {
	if m != nil {
		return m.LockedVault
	}
	return LockedVault{}
}

type QueryLockedVaultsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLockedVaultsRequest) Reset()         { *m = QueryLockedVaultsRequest{} }
func (m *QueryLockedVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultsRequest) ProtoMessage()    {}
func (*QueryLockedVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{4}
}
func (m *QueryLockedVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultsRequest.Merge(m, src)
}
func (m *QueryLockedVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultsRequest proto.InternalMessageInfo

func (m *QueryLockedVaultsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLockedVaultsResponse struct {
	LockedVaults []LockedVault       `protobuf:"bytes,1,rep,name=locked_vaults,json=lockedVaults,proto3" json:"locked_vaults" yaml:"locked_vaults"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLockedVaultsResponse) Reset()         { *m = QueryLockedVaultsResponse{} }
func (m *QueryLockedVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultsResponse) ProtoMessage()    {}
func (*QueryLockedVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{5}
}
func (m *QueryLockedVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultsResponse.Merge(m, src)
}
func (m *QueryLockedVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultsResponse proto.InternalMessageInfo

func (m *QueryLockedVaultsResponse) GetLockedVaults() []LockedVault {
	if m != nil {
		return m.LockedVaults
	}
	return nil
}

func (m *QueryLockedVaultsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLiquidationWhiteListingRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *QueryLiquidationWhiteListingRequest) Reset()         { *m = QueryLiquidationWhiteListingRequest{} }
func (m *QueryLiquidationWhiteListingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationWhiteListingRequest) ProtoMessage()    {}
func (*QueryLiquidationWhiteListingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{6}
}
func (m *QueryLiquidationWhiteListingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationWhiteListingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationWhiteListingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationWhiteListingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationWhiteListingRequest.Merge(m, src)
}
func (m *QueryLiquidationWhiteListingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationWhiteListingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationWhiteListingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationWhiteListingRequest proto.InternalMessageInfo

func (m *QueryLiquidationWhiteListingRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type QueryLiquidationWhiteListingResponse struct {
	LiquidationWhiteListing LiquidationWhiteListing `protobuf:"bytes,1,opt,name=liquidation_whiteListing,json=liquidationWhiteListing,proto3" json:"liquidation_whiteListing" yaml:"liquidation_whiteListing"`
}

func (m *QueryLiquidationWhiteListingResponse) Reset()         { *m = QueryLiquidationWhiteListingResponse{} }
func (m *QueryLiquidationWhiteListingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationWhiteListingResponse) ProtoMessage()    {}
func (*QueryLiquidationWhiteListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{7}
}
func (m *QueryLiquidationWhiteListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationWhiteListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationWhiteListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationWhiteListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationWhiteListingResponse.Merge(m, src)
}
func (m *QueryLiquidationWhiteListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationWhiteListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationWhiteListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationWhiteListingResponse proto.InternalMessageInfo

func (m *QueryLiquidationWhiteListingResponse) GetLiquidationWhiteListing() LiquidationWhiteListing {
	if m != nil {
		return m.LiquidationWhiteListing
	}
	return LiquidationWhiteListing{}
}

type QueryLiquidationWhiteListingsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLiquidationWhiteListingsRequest) Reset()         { *m = QueryLiquidationWhiteListingsRequest{} }
func (m *QueryLiquidationWhiteListingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationWhiteListingsRequest) ProtoMessage()    {}
func (*QueryLiquidationWhiteListingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{8}
}
func (m *QueryLiquidationWhiteListingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationWhiteListingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationWhiteListingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationWhiteListingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationWhiteListingsRequest.Merge(m, src)
}
func (m *QueryLiquidationWhiteListingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationWhiteListingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationWhiteListingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationWhiteListingsRequest proto.InternalMessageInfo

func (m *QueryLiquidationWhiteListingsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLiquidationWhiteListingsResponse struct {
	LiquidationWhiteListings []LiquidationWhiteListing `protobuf:"bytes,1,rep,name=liquidation_whiteListings,json=liquidationWhiteListings,proto3" json:"liquidation_whiteListings" yaml:"liquidation_whiteListings"`
	Pagination               *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLiquidationWhiteListingsResponse) Reset()         { *m = QueryLiquidationWhiteListingsResponse{} }
func (m *QueryLiquidationWhiteListingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidationWhiteListingsResponse) ProtoMessage()    {}
func (*QueryLiquidationWhiteListingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{9}
}
func (m *QueryLiquidationWhiteListingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidationWhiteListingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidationWhiteListingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidationWhiteListingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidationWhiteListingsResponse.Merge(m, src)
}
func (m *QueryLiquidationWhiteListingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidationWhiteListingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidationWhiteListingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidationWhiteListingsResponse proto.InternalMessageInfo

func (m *QueryLiquidationWhiteListingsResponse) GetLiquidationWhiteListings() []LiquidationWhiteListing {
	if m != nil {
		return m.LiquidationWhiteListings
	}
	return nil
}

func (m *QueryLiquidationWhiteListingsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLockedVaultsHistoryRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLockedVaultsHistoryRequest) Reset()         { *m = QueryLockedVaultsHistoryRequest{} }
func (m *QueryLockedVaultsHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultsHistoryRequest) ProtoMessage()    {}
func (*QueryLockedVaultsHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{10}
}
func (m *QueryLockedVaultsHistoryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultsHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultsHistoryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultsHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultsHistoryRequest.Merge(m, src)
}
func (m *QueryLockedVaultsHistoryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultsHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultsHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultsHistoryRequest proto.InternalMessageInfo

func (m *QueryLockedVaultsHistoryRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLockedVaultsHistoryResponse struct {
	LockedVaultsHistory []LockedVault       `protobuf:"bytes,1,rep,name=locked_vaults_history,json=lockedVaultsHistory,proto3" json:"locked_vaults_history" yaml:"locked_vaults_history"`
	Pagination          *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLockedVaultsHistoryResponse) Reset()         { *m = QueryLockedVaultsHistoryResponse{} }
func (m *QueryLockedVaultsHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultsHistoryResponse) ProtoMessage()    {}
func (*QueryLockedVaultsHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{11}
}
func (m *QueryLockedVaultsHistoryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultsHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultsHistoryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultsHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultsHistoryResponse.Merge(m, src)
}
func (m *QueryLockedVaultsHistoryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultsHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultsHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultsHistoryResponse proto.InternalMessageInfo

func (m *QueryLockedVaultsHistoryResponse) GetLockedVaultsHistory() []LockedVault {
	if m != nil {
		return m.LockedVaultsHistory
	}
	return nil
}

func (m *QueryLockedVaultsHistoryResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAppReserveFundsTxDataRequest struct {
	AppId uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (m *QueryAppReserveFundsTxDataRequest) Reset()         { *m = QueryAppReserveFundsTxDataRequest{} }
func (m *QueryAppReserveFundsTxDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAppReserveFundsTxDataRequest) ProtoMessage()    {}
func (*QueryAppReserveFundsTxDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{12}
}
func (m *QueryAppReserveFundsTxDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAppReserveFundsTxDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAppReserveFundsTxDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAppReserveFundsTxDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAppReserveFundsTxDataRequest.Merge(m, src)
}
func (m *QueryAppReserveFundsTxDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAppReserveFundsTxDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAppReserveFundsTxDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAppReserveFundsTxDataRequest proto.InternalMessageInfo

func (m *QueryAppReserveFundsTxDataRequest) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

type QueryAppReserveFundsTxDataResponse struct {
	AppReserveFundsTxData AppReserveFundsTxData `protobuf:"bytes,1,opt,name=app_reserve_funds_tx_data,json=appReserveFundsTxData,proto3" json:"app_reserve_funds_tx_data" yaml:"app_reserve_funds_tx_data"`
}

func (m *QueryAppReserveFundsTxDataResponse) Reset()         { *m = QueryAppReserveFundsTxDataResponse{} }
func (m *QueryAppReserveFundsTxDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAppReserveFundsTxDataResponse) ProtoMessage()    {}
func (*QueryAppReserveFundsTxDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ed3babcdef7f922, []int{13}
}
func (m *QueryAppReserveFundsTxDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAppReserveFundsTxDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAppReserveFundsTxDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAppReserveFundsTxDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAppReserveFundsTxDataResponse.Merge(m, src)
}
func (m *QueryAppReserveFundsTxDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAppReserveFundsTxDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAppReserveFundsTxDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAppReserveFundsTxDataResponse proto.InternalMessageInfo

func (m *QueryAppReserveFundsTxDataResponse) GetAppReserveFundsTxData() AppReserveFundsTxData {
	if m != nil {
		return m.AppReserveFundsTxData
	}
	return AppReserveFundsTxData{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.liquidationsV2.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.liquidationsV2.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryLockedVaultRequest)(nil), "comdex.liquidationsV2.v1beta1.QueryLockedVaultRequest")
	proto.RegisterType((*QueryLockedVaultResponse)(nil), "comdex.liquidationsV2.v1beta1.QueryLockedVaultResponse")
	proto.RegisterType((*QueryLockedVaultsRequest)(nil), "comdex.liquidationsV2.v1beta1.QueryLockedVaultsRequest")
	proto.RegisterType((*QueryLockedVaultsResponse)(nil), "comdex.liquidationsV2.v1beta1.QueryLockedVaultsResponse")
	proto.RegisterType((*QueryLiquidationWhiteListingRequest)(nil), "comdex.liquidationsV2.v1beta1.QueryLiquidationWhiteListingRequest")
	proto.RegisterType((*QueryLiquidationWhiteListingResponse)(nil), "comdex.liquidationsV2.v1beta1.QueryLiquidationWhiteListingResponse")
	proto.RegisterType((*QueryLiquidationWhiteListingsRequest)(nil), "comdex.liquidationsV2.v1beta1.QueryLiquidationWhiteListingsRequest")
	proto.RegisterType((*QueryLiquidationWhiteListingsResponse)(nil), "comdex.liquidationsV2.v1beta1.QueryLiquidationWhiteListingsResponse")
	proto.RegisterType((*QueryLockedVaultsHistoryRequest)(nil), "comdex.liquidationsV2.v1beta1.QueryLockedVaultsHistoryRequest")
	proto.RegisterType((*QueryLockedVaultsHistoryResponse)(nil), "comdex.liquidationsV2.v1beta1.QueryLockedVaultsHistoryResponse")
	proto.RegisterType((*QueryAppReserveFundsTxDataRequest)(nil), "comdex.liquidationsV2.v1beta1.QueryAppReserveFundsTxDataRequest")
	proto.RegisterType((*QueryAppReserveFundsTxDataResponse)(nil), "comdex.liquidationsV2.v1beta1.QueryAppReserveFundsTxDataResponse")
}

func init() {
	proto.RegisterFile("comdex/liquidationsV2/v1beta1/query.proto", fileDescriptor_5ed3babcdef7f922)
}

var fileDescriptor_5ed3babcdef7f922 = []byte{
	// 950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x98, 0x36, 0x87, 0x49, 0x41, 0x74, 0x92, 0xa8, 0xce, 0xe2, 0xda, 0x66, 0x68, 0x9a,
	0x52, 0xc9, 0xbb, 0xb2, 0x5b, 0x4a, 0x6b, 0x2a, 0x68, 0xdc, 0x0a, 0x81, 0xd4, 0x03, 0xac, 0x50,
	0x91, 0x2a, 0x81, 0x35, 0xf6, 0x4e, 0x36, 0x03, 0x6b, 0xef, 0xc6, 0xb3, 0x36, 0xb1, 0xaa, 0x4a,
	0x08, 0x01, 0x12, 0x37, 0x24, 0x0e, 0x20, 0x24, 0xce, 0x9c, 0x38, 0x72, 0xee, 0x81, 0x4b, 0x8f,
	0x15, 0x5c, 0x38, 0x45, 0x28, 0x81, 0x4b, 0x8f, 0xfd, 0x0b, 0xd0, 0xce, 0x8c, 0xed, 0x75, 0xf7,
	0x97, 0x1d, 0xab, 0xbd, 0x45, 0x93, 0xf7, 0xbe, 0xf7, 0x7d, 0xdf, 0x7b, 0x3b, 0x6f, 0x0c, 0x5f,
	0x6f, 0xbb, 0x1d, 0x8b, 0xee, 0x1b, 0x0e, 0xdb, 0xeb, 0x33, 0x8b, 0xf8, 0xcc, 0xed, 0xf2, 0x3b,
	0x35, 0x63, 0x50, 0x6d, 0x51, 0x9f, 0x54, 0x8d, 0xbd, 0x3e, 0xed, 0x0d, 0x75, 0xaf, 0xe7, 0xfa,
	0x2e, 0x3a, 0x2b, 0x43, 0xf5, 0xe9, 0x50, 0x5d, 0x85, 0x6a, 0x6b, 0xb6, 0x6b, 0xbb, 0x22, 0xd2,
	0x08, 0xfe, 0x92, 0x49, 0x5a, 0xc1, 0x76, 0x5d, 0xdb, 0xa1, 0x06, 0xf1, 0x98, 0x41, 0xba, 0x5d,
	0xd7, 0x97, 0x79, 0xea, 0xbf, 0x17, 0xdb, 0x2e, 0xef, 0xb8, 0xdc, 0x68, 0x11, 0x4e, 0x65, 0xad,
	0x71, 0x65, 0x8f, 0xd8, 0xac, 0x2b, 0x82, 0x27, 0xb1, 0x69, 0x4c, 0x3d, 0xd2, 0x23, 0x9d, 0x11,
	0x6e, 0x25, 0x3d, 0x76, 0x74, 0x4c, 0x65, 0x38, 0x5e, 0x83, 0xe8, 0xc3, 0xa0, 0xf8, 0x07, 0x02,
	0xc3, 0xa4, 0x7b, 0x7d, 0xca, 0x7d, 0x7c, 0x17, 0xae, 0x4e, 0x9d, 0x72, 0xcf, 0xed, 0x72, 0x8a,
	0x6e, 0xc2, 0x65, 0x59, 0x2b, 0x0f, 0xca, 0xe0, 0xc2, 0x4a, 0x6d, 0x53, 0x4f, 0xf5, 0x45, 0x97,
	0xe9, 0x8d, 0x13, 0x0f, 0x0f, 0x4a, 0x4b, 0xa6, 0x4a, 0xc5, 0x37, 0xe0, 0x19, 0x81, 0x7d, 0xdb,
	0x6d, 0x7f, 0x4e, 0xad, 0x3b, 0xa4, 0xef, 0xf8, 0xaa, 0x2c, 0x5a, 0x87, 0xcb, 0xc4, 0xf3, 0x9a,
	0xcc, 0x12, 0xf8, 0x27, 0xcc, 0x93, 0xc4, 0xf3, 0xde, 0xb7, 0xd0, 0x4b, 0x30, 0xc7, 0xac, 0x7c,
	0x4e, 0x1c, 0xe5, 0x98, 0x85, 0xbf, 0x05, 0x30, 0x1f, 0x85, 0x50, 0x1c, 0x3f, 0x83, 0xa7, 0x1c,
	0x71, 0xdc, 0x1c, 0x04, 0xe7, 0x8a, 0xe9, 0xc5, 0x0c, 0xa6, 0x21, 0xa4, 0xc6, 0x2b, 0x01, 0xdd,
	0x27, 0x07, 0xa5, 0xd5, 0x21, 0xe9, 0x38, 0x75, 0x1c, 0x46, 0xc3, 0xe6, 0x8a, 0x33, 0x89, 0xc4,
	0xc3, 0x28, 0x8f, 0x91, 0x85, 0xe8, 0x13, 0x08, 0x27, 0x7d, 0x54, 0x2c, 0xce, 0xeb, 0xb2, 0xe9,
	0x7a, 0xd0, 0x74, 0x5d, 0x0e, 0xd8, 0xc4, 0x2b, 0x9b, 0xaa, 0xdc, 0xc6, 0xfa, 0x93, 0x83, 0xd2,
	0x69, 0x59, 0x7d, 0x82, 0x81, 0xcd, 0x10, 0x20, 0x7e, 0x0c, 0xe0, 0x46, 0x4c, 0x6d, 0x65, 0x42,
	0x07, 0xbe, 0x18, 0xa6, 0x1d, 0xf4, 0xeb, 0x85, 0x39, 0x5d, 0x28, 0x28, 0x17, 0xd6, 0xa2, 0x2e,
	0x70, 0x6c, 0x9e, 0x0a, 0xd9, 0xc0, 0xd1, 0xa7, 0x53, 0x5a, 0x73, 0x42, 0xeb, 0x56, 0xa6, 0x56,
	0xc9, 0x75, 0x16, 0xb1, 0xd7, 0xe1, 0x6b, 0x52, 0xeb, 0x84, 0xf6, 0xc7, 0xbb, 0xcc, 0xa7, 0xb7,
	0x19, 0xf7, 0x59, 0xd7, 0x4e, 0x1f, 0x1f, 0xfc, 0x07, 0x80, 0xe7, 0xd2, 0xd3, 0x95, 0x6b, 0x3f,
	0x03, 0x98, 0x0f, 0x39, 0xd3, 0xfc, 0x22, 0x14, 0xa4, 0x3a, 0x78, 0x25, 0xcb, 0xc1, 0xf8, 0x12,
	0x8d, 0x2d, 0xe5, 0x66, 0x49, 0xb9, 0x99, 0x50, 0x05, 0x9b, 0x67, 0x9c, 0x78, 0x04, 0xfc, 0x4d,
	0x86, 0x8a, 0xe7, 0x35, 0x78, 0xbf, 0xe6, 0xe0, 0x66, 0x06, 0x0f, 0x65, 0xe7, 0x2f, 0x00, 0x6e,
	0x24, 0x09, 0x1d, 0x4d, 0xe4, 0x71, 0xfd, 0xbc, 0xa0, 0xfc, 0x2c, 0xa7, 0xfb, 0xc9, 0xb1, 0x99,
	0x4f, 0x30, 0xf4, 0xd9, 0x4f, 0xed, 0x97, 0x00, 0x96, 0x22, 0x9f, 0xe8, 0x7b, 0x8c, 0xfb, 0x6e,
	0x6f, 0xf8, 0x9c, 0x9a, 0xf5, 0x5d, 0x0e, 0x96, 0x93, 0x29, 0xa8, 0x3e, 0x7d, 0x0d, 0xe0, 0xfa,
	0xd4, 0xe7, 0xdd, 0xdc, 0x95, 0x11, 0xc7, 0xb8, 0x35, 0xce, 0xa9, 0xbe, 0x14, 0x62, 0x6e, 0x8d,
	0x11, 0x2c, 0x36, 0x57, 0x9d, 0x28, 0x9d, 0x67, 0xde, 0x8e, 0x3a, 0x7c, 0x55, 0x58, 0xb1, 0xed,
	0x79, 0x26, 0xe5, 0xb4, 0x37, 0xa0, 0xef, 0xf6, 0xbb, 0x16, 0xff, 0x68, 0xff, 0x16, 0xf1, 0x49,
	0xc6, 0x15, 0xf2, 0x00, 0x40, 0x9c, 0x96, 0xac, 0x9c, 0xfc, 0x09, 0xc0, 0x8d, 0x20, 0xbd, 0x27,
	0x43, 0x9a, 0x3b, 0x41, 0x4c, 0xd3, 0xdf, 0x6f, 0x5a, 0xc4, 0x27, 0xaa, 0xbb, 0x97, 0x33, 0xdc,
	0x8c, 0xad, 0xf0, 0xf4, 0xbc, 0x27, 0x16, 0xc1, 0xe6, 0x3a, 0x89, 0x03, 0xa8, 0xfd, 0xb6, 0x02,
	0x4f, 0x0a, 0x05, 0xe8, 0x47, 0x00, 0x97, 0xe5, 0x62, 0x46, 0xd5, 0x0c, 0x2e, 0xd1, 0x97, 0x81,
	0x56, 0x9b, 0x27, 0x45, 0xda, 0x82, 0xcf, 0x7f, 0xf5, 0xd7, 0xbf, 0x3f, 0xe4, 0xca, 0xa8, 0x68,
	0xc4, 0xbc, 0x4d, 0x8c, 0x41, 0x4d, 0x3d, 0x60, 0xd0, 0x03, 0x00, 0x5f, 0x7e, 0x7a, 0x5a, 0xd1,
	0x95, 0x59, 0x0a, 0x46, 0xdf, 0x12, 0xda, 0x9b, 0x73, 0xe7, 0x29, 0xb6, 0x75, 0xc1, 0xf6, 0x32,
	0xaa, 0x25, 0xb1, 0x0d, 0x0f, 0xb5, 0x71, 0x4f, 0x8e, 0xcb, 0x7d, 0xe3, 0x1e, 0xb3, 0xee, 0xa3,
	0xdf, 0x01, 0x3c, 0x1d, 0xf9, 0xde, 0xd0, 0xbc, 0x54, 0xc6, 0x66, 0x5f, 0x9d, 0x3f, 0x51, 0x89,
	0xa8, 0x08, 0x11, 0x5b, 0x68, 0x73, 0x16, 0x11, 0x1c, 0x3d, 0x06, 0xb0, 0x90, 0x76, 0xa9, 0xa3,
	0xc6, 0x4c, 0x4c, 0x52, 0xd7, 0xb3, 0x76, 0x73, 0x21, 0x0c, 0x25, 0x6c, 0x5b, 0x08, 0x7b, 0x0b,
	0x5d, 0x4b, 0x14, 0x96, 0xb0, 0x0a, 0xc6, 0x9d, 0x42, 0xff, 0x01, 0x78, 0x36, 0x75, 0x83, 0xa1,
	0x45, 0x98, 0x8e, 0x9b, 0x77, 0x6b, 0x31, 0x10, 0xa5, 0xf7, 0x9a, 0xd0, 0x7b, 0x09, 0x55, 0xe7,
	0xd5, 0xcb, 0xd1, 0x9f, 0x31, 0xcf, 0xe4, 0xf1, 0x6d, 0xfb, 0xf6, 0xbc, 0xa3, 0x35, 0xbd, 0xb8,
	0xb4, 0x77, 0x8e, 0x9d, 0xaf, 0x84, 0xbd, 0x21, 0x84, 0x19, 0xa8, 0x32, 0xd3, 0x84, 0x8e, 0x76,
	0x47, 0xd0, 0x3c, 0x2d, 0xf9, 0x26, 0x46, 0x37, 0x66, 0xa1, 0x95, 0xb6, 0x01, 0xb4, 0xed, 0x05,
	0x10, 0x94, 0xb4, 0x86, 0x90, 0x76, 0x1d, 0xd5, 0x93, 0xa4, 0x25, 0x5e, 0xdf, 0xe3, 0x21, 0x6d,
	0x98, 0x0f, 0x0f, 0x8b, 0xe0, 0xd1, 0x61, 0x11, 0xfc, 0x73, 0x58, 0x04, 0xdf, 0x1f, 0x15, 0x97,
	0x1e, 0x1d, 0x15, 0x97, 0xfe, 0x3e, 0x2a, 0x2e, 0xdd, 0xbd, 0x6a, 0x33, 0x7f, 0xb7, 0xdf, 0x0a,
	0x68, 0x2a, 0xfc, 0x8a, 0xbb, 0xb3, 0xc3, 0xda, 0x8c, 0x38, 0xa3, 0x7a, 0x91, 0x5f, 0x7f, 0xfe,
	0xd0, 0xa3, 0xbc, 0xb5, 0x2c, 0x7e, 0xf2, 0x5d, 0xfa, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x10, 0xd9,
	0x33, 0x9d, 0xf9, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryLockedVault(ctx context.Context, in *QueryLockedVaultRequest, opts ...grpc.CallOption) (*QueryLockedVaultResponse, error)
	QueryLockedVaults(ctx context.Context, in *QueryLockedVaultsRequest, opts ...grpc.CallOption) (*QueryLockedVaultsResponse, error)
	QueryLiquidationWhiteListing(ctx context.Context, in *QueryLiquidationWhiteListingRequest, opts ...grpc.CallOption) (*QueryLiquidationWhiteListingResponse, error)
	QueryLiquidationWhiteListings(ctx context.Context, in *QueryLiquidationWhiteListingsRequest, opts ...grpc.CallOption) (*QueryLiquidationWhiteListingsResponse, error)
	QueryLockedVaultsHistory(ctx context.Context, in *QueryLockedVaultsHistoryRequest, opts ...grpc.CallOption) (*QueryLockedVaultsHistoryResponse, error)
	QueryAppReserveFundsTxData(ctx context.Context, in *QueryAppReserveFundsTxDataRequest, opts ...grpc.CallOption) (*QueryAppReserveFundsTxDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidationsV2.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockedVault(ctx context.Context, in *QueryLockedVaultRequest, opts ...grpc.CallOption) (*QueryLockedVaultResponse, error) {
	out := new(QueryLockedVaultResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidationsV2.v1beta1.Query/QueryLockedVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockedVaults(ctx context.Context, in *QueryLockedVaultsRequest, opts ...grpc.CallOption) (*QueryLockedVaultsResponse, error) {
	out := new(QueryLockedVaultsResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidationsV2.v1beta1.Query/QueryLockedVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLiquidationWhiteListing(ctx context.Context, in *QueryLiquidationWhiteListingRequest, opts ...grpc.CallOption) (*QueryLiquidationWhiteListingResponse, error) {
	out := new(QueryLiquidationWhiteListingResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidationsV2.v1beta1.Query/QueryLiquidationWhiteListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLiquidationWhiteListings(ctx context.Context, in *QueryLiquidationWhiteListingsRequest, opts ...grpc.CallOption) (*QueryLiquidationWhiteListingsResponse, error) {
	out := new(QueryLiquidationWhiteListingsResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidationsV2.v1beta1.Query/QueryLiquidationWhiteListings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryLockedVaultsHistory(ctx context.Context, in *QueryLockedVaultsHistoryRequest, opts ...grpc.CallOption) (*QueryLockedVaultsHistoryResponse, error) {
	out := new(QueryLockedVaultsHistoryResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidationsV2.v1beta1.Query/QueryLockedVaultsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAppReserveFundsTxData(ctx context.Context, in *QueryAppReserveFundsTxDataRequest, opts ...grpc.CallOption) (*QueryAppReserveFundsTxDataResponse, error) {
	out := new(QueryAppReserveFundsTxDataResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidationsV2.v1beta1.Query/QueryAppReserveFundsTxData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryLockedVault(context.Context, *QueryLockedVaultRequest) (*QueryLockedVaultResponse, error)
	QueryLockedVaults(context.Context, *QueryLockedVaultsRequest) (*QueryLockedVaultsResponse, error)
	QueryLiquidationWhiteListing(context.Context, *QueryLiquidationWhiteListingRequest) (*QueryLiquidationWhiteListingResponse, error)
	QueryLiquidationWhiteListings(context.Context, *QueryLiquidationWhiteListingsRequest) (*QueryLiquidationWhiteListingsResponse, error)
	QueryLockedVaultsHistory(context.Context, *QueryLockedVaultsHistoryRequest) (*QueryLockedVaultsHistoryResponse, error)
	QueryAppReserveFundsTxData(context.Context, *QueryAppReserveFundsTxDataRequest) (*QueryAppReserveFundsTxDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryLockedVault(ctx context.Context, req *QueryLockedVaultRequest) (*QueryLockedVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockedVault not implemented")
}
func (*UnimplementedQueryServer) QueryLockedVaults(ctx context.Context, req *QueryLockedVaultsRequest) (*QueryLockedVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockedVaults not implemented")
}
func (*UnimplementedQueryServer) QueryLiquidationWhiteListing(ctx context.Context, req *QueryLiquidationWhiteListingRequest) (*QueryLiquidationWhiteListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLiquidationWhiteListing not implemented")
}
func (*UnimplementedQueryServer) QueryLiquidationWhiteListings(ctx context.Context, req *QueryLiquidationWhiteListingsRequest) (*QueryLiquidationWhiteListingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLiquidationWhiteListings not implemented")
}
func (*UnimplementedQueryServer) QueryLockedVaultsHistory(ctx context.Context, req *QueryLockedVaultsHistoryRequest) (*QueryLockedVaultsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockedVaultsHistory not implemented")
}
func (*UnimplementedQueryServer) QueryAppReserveFundsTxData(ctx context.Context, req *QueryAppReserveFundsTxDataRequest) (*QueryAppReserveFundsTxDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAppReserveFundsTxData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidationsV2.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockedVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockedVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidationsV2.v1beta1.Query/QueryLockedVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockedVault(ctx, req.(*QueryLockedVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockedVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockedVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidationsV2.v1beta1.Query/QueryLockedVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockedVaults(ctx, req.(*QueryLockedVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLiquidationWhiteListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationWhiteListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLiquidationWhiteListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidationsV2.v1beta1.Query/QueryLiquidationWhiteListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLiquidationWhiteListing(ctx, req.(*QueryLiquidationWhiteListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLiquidationWhiteListings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidationWhiteListingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLiquidationWhiteListings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidationsV2.v1beta1.Query/QueryLiquidationWhiteListings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLiquidationWhiteListings(ctx, req.(*QueryLiquidationWhiteListingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryLockedVaultsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedVaultsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryLockedVaultsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidationsV2.v1beta1.Query/QueryLockedVaultsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryLockedVaultsHistory(ctx, req.(*QueryLockedVaultsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAppReserveFundsTxData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAppReserveFundsTxDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAppReserveFundsTxData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidationsV2.v1beta1.Query/QueryAppReserveFundsTxData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAppReserveFundsTxData(ctx, req.(*QueryAppReserveFundsTxDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.liquidationsV2.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryLockedVault",
			Handler:    _Query_QueryLockedVault_Handler,
		},
		{
			MethodName: "QueryLockedVaults",
			Handler:    _Query_QueryLockedVaults_Handler,
		},
		{
			MethodName: "QueryLiquidationWhiteListing",
			Handler:    _Query_QueryLiquidationWhiteListing_Handler,
		},
		{
			MethodName: "QueryLiquidationWhiteListings",
			Handler:    _Query_QueryLiquidationWhiteListings_Handler,
		},
		{
			MethodName: "QueryLockedVaultsHistory",
			Handler:    _Query_QueryLockedVaultsHistory_Handler,
		},
		{
			MethodName: "QueryAppReserveFundsTxData",
			Handler:    _Query_QueryAppReserveFundsTxData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/liquidationsV2/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LockedVault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LockedVaults) > 0 {
		for iNdEx := len(m.LockedVaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedVaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationWhiteListingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationWhiteListingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationWhiteListingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationWhiteListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationWhiteListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationWhiteListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidationWhiteListing.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationWhiteListingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationWhiteListingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationWhiteListingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidationWhiteListingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidationWhiteListingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidationWhiteListingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidationWhiteListings) > 0 {
		for iNdEx := len(m.LiquidationWhiteListings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidationWhiteListings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultsHistoryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultsHistoryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultsHistoryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultsHistoryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultsHistoryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultsHistoryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LockedVaultsHistory) > 0 {
		for iNdEx := len(m.LockedVaultsHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedVaultsHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAppReserveFundsTxDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAppReserveFundsTxDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAppReserveFundsTxDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AppId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAppReserveFundsTxDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAppReserveFundsTxDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAppReserveFundsTxDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AppReserveFundsTxData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockedVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryLockedVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LockedVault.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLockedVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedVaults) > 0 {
		for _, e := range m.LockedVaults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationWhiteListingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryLiquidationWhiteListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidationWhiteListing.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidationWhiteListingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidationWhiteListingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidationWhiteListings) > 0 {
		for _, e := range m.LiquidationWhiteListings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedVaultsHistoryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLockedVaultsHistoryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedVaultsHistory) > 0 {
		for _, e := range m.LockedVaultsHistory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAppReserveFundsTxDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovQuery(uint64(m.AppId))
	}
	return n
}

func (m *QueryAppReserveFundsTxDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AppReserveFundsTxData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedVaults = append(m.LockedVaults, LockedVault{})
			if err := m.LockedVaults[len(m.LockedVaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationWhiteListingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationWhiteListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationWhiteListing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationWhiteListing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationWhiteListingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidationWhiteListingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidationWhiteListingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationWhiteListings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidationWhiteListings = append(m.LiquidationWhiteListings, LiquidationWhiteListing{})
			if err := m.LiquidationWhiteListings[len(m.LiquidationWhiteListings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultsHistoryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultsHistoryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultsHistoryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultsHistoryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultsHistoryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultsHistoryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultsHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedVaultsHistory = append(m.LockedVaultsHistory, LockedVault{})
			if err := m.LockedVaultsHistory[len(m.LockedVaultsHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAppReserveFundsTxDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAppReserveFundsTxDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAppReserveFundsTxDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAppReserveFundsTxDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAppReserveFundsTxDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAppReserveFundsTxDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppReserveFundsTxData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppReserveFundsTxData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
