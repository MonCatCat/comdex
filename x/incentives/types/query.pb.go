// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/incentives/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PARAMS
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// ALL EPOCHES
type QueryAllEpochsInfoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllEpochsInfoRequest) Reset()         { *m = QueryAllEpochsInfoRequest{} }
func (m *QueryAllEpochsInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochsInfoRequest) ProtoMessage()    {}
func (*QueryAllEpochsInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{2}
}
func (m *QueryAllEpochsInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochsInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochsInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochsInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochsInfoRequest.Merge(m, src)
}
func (m *QueryAllEpochsInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochsInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochsInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochsInfoRequest proto.InternalMessageInfo

type QueryAllEpochsInfoResponse struct {
	Epochs     []EpochInfo         `protobuf:"bytes,1,rep,name=epochs,proto3" json:"epochs" yaml:"epochs"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllEpochsInfoResponse) Reset()         { *m = QueryAllEpochsInfoResponse{} }
func (m *QueryAllEpochsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllEpochsInfoResponse) ProtoMessage()    {}
func (*QueryAllEpochsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{3}
}
func (m *QueryAllEpochsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllEpochsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllEpochsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllEpochsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllEpochsInfoResponse.Merge(m, src)
}
func (m *QueryAllEpochsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllEpochsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllEpochsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllEpochsInfoResponse proto.InternalMessageInfo

// EPOCH BY DURATION
type QueryEpochInfoByDurationRequest struct {
	DurationSeconds uint64 `protobuf:"varint,1,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
}

func (m *QueryEpochInfoByDurationRequest) Reset()         { *m = QueryEpochInfoByDurationRequest{} }
func (m *QueryEpochInfoByDurationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEpochInfoByDurationRequest) ProtoMessage()    {}
func (*QueryEpochInfoByDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{4}
}
func (m *QueryEpochInfoByDurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochInfoByDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochInfoByDurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochInfoByDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochInfoByDurationRequest.Merge(m, src)
}
func (m *QueryEpochInfoByDurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochInfoByDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochInfoByDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochInfoByDurationRequest proto.InternalMessageInfo

type QueryEpochInfoByDurationResponse struct {
	Epoch EpochInfo `protobuf:"bytes,1,opt,name=epoch,proto3" json:"epoch" yaml:"epoch"`
}

func (m *QueryEpochInfoByDurationResponse) Reset()         { *m = QueryEpochInfoByDurationResponse{} }
func (m *QueryEpochInfoByDurationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEpochInfoByDurationResponse) ProtoMessage()    {}
func (*QueryEpochInfoByDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{5}
}
func (m *QueryEpochInfoByDurationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEpochInfoByDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEpochInfoByDurationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEpochInfoByDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEpochInfoByDurationResponse.Merge(m, src)
}
func (m *QueryEpochInfoByDurationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEpochInfoByDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEpochInfoByDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEpochInfoByDurationResponse proto.InternalMessageInfo

// ALL GAUGES
type QueryAllGaugesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllGaugesRequest) Reset()         { *m = QueryAllGaugesRequest{} }
func (m *QueryAllGaugesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGaugesRequest) ProtoMessage()    {}
func (*QueryAllGaugesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{6}
}
func (m *QueryAllGaugesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGaugesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGaugesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGaugesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGaugesRequest.Merge(m, src)
}
func (m *QueryAllGaugesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGaugesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGaugesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGaugesRequest proto.InternalMessageInfo

type QueryAllGaugesResponse struct {
	Gauges     []Gauge             `protobuf:"bytes,1,rep,name=gauges,proto3" json:"gauges" yaml:"gauges"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAllGaugesResponse) Reset()         { *m = QueryAllGaugesResponse{} }
func (m *QueryAllGaugesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGaugesResponse) ProtoMessage()    {}
func (*QueryAllGaugesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{7}
}
func (m *QueryAllGaugesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGaugesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGaugesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGaugesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGaugesResponse.Merge(m, src)
}
func (m *QueryAllGaugesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGaugesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGaugesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGaugesResponse proto.InternalMessageInfo

// GAUGE BY ID
type QueryGaugeByIdRequest struct {
	GaugeId uint64 `protobuf:"varint,1,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
}

func (m *QueryGaugeByIdRequest) Reset()         { *m = QueryGaugeByIdRequest{} }
func (m *QueryGaugeByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGaugeByIdRequest) ProtoMessage()    {}
func (*QueryGaugeByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{8}
}
func (m *QueryGaugeByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGaugeByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGaugeByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGaugeByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGaugeByIdRequest.Merge(m, src)
}
func (m *QueryGaugeByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGaugeByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGaugeByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGaugeByIdRequest proto.InternalMessageInfo

type QueryGaugeByIdResponse struct {
	Gauge Gauge `protobuf:"bytes,1,opt,name=gauge,proto3" json:"gauge" yaml:"gauge"`
}

func (m *QueryGaugeByIdResponse) Reset()         { *m = QueryGaugeByIdResponse{} }
func (m *QueryGaugeByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGaugeByIdResponse) ProtoMessage()    {}
func (*QueryGaugeByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{9}
}
func (m *QueryGaugeByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGaugeByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGaugeByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGaugeByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGaugeByIdResponse.Merge(m, src)
}
func (m *QueryGaugeByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGaugeByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGaugeByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGaugeByIdResponse proto.InternalMessageInfo

// GAUGE BY TRIIGER DURATION
type QueryGaugesByDurationRequest struct {
	DurationSeconds uint64 `protobuf:"varint,1,opt,name=duration_seconds,json=durationSeconds,proto3" json:"duration_seconds,omitempty"`
}

func (m *QueryGaugesByDurationRequest) Reset()         { *m = QueryGaugesByDurationRequest{} }
func (m *QueryGaugesByDurationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGaugesByDurationRequest) ProtoMessage()    {}
func (*QueryGaugesByDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{10}
}
func (m *QueryGaugesByDurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGaugesByDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGaugesByDurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGaugesByDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGaugesByDurationRequest.Merge(m, src)
}
func (m *QueryGaugesByDurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGaugesByDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGaugesByDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGaugesByDurationRequest proto.InternalMessageInfo

type QueryGaugeByDurationResponse struct {
	Gauges []Gauge `protobuf:"bytes,1,rep,name=gauges,proto3" json:"gauges" yaml:"gauges"`
}

func (m *QueryGaugeByDurationResponse) Reset()         { *m = QueryGaugeByDurationResponse{} }
func (m *QueryGaugeByDurationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGaugeByDurationResponse) ProtoMessage()    {}
func (*QueryGaugeByDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d027e9201286dfd5, []int{11}
}
func (m *QueryGaugeByDurationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGaugeByDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGaugeByDurationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGaugeByDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGaugeByDurationResponse.Merge(m, src)
}
func (m *QueryGaugeByDurationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGaugeByDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGaugeByDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGaugeByDurationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.incentives.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.incentives.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAllEpochsInfoRequest)(nil), "comdex.incentives.v1beta1.QueryAllEpochsInfoRequest")
	proto.RegisterType((*QueryAllEpochsInfoResponse)(nil), "comdex.incentives.v1beta1.QueryAllEpochsInfoResponse")
	proto.RegisterType((*QueryEpochInfoByDurationRequest)(nil), "comdex.incentives.v1beta1.QueryEpochInfoByDurationRequest")
	proto.RegisterType((*QueryEpochInfoByDurationResponse)(nil), "comdex.incentives.v1beta1.QueryEpochInfoByDurationResponse")
	proto.RegisterType((*QueryAllGaugesRequest)(nil), "comdex.incentives.v1beta1.QueryAllGaugesRequest")
	proto.RegisterType((*QueryAllGaugesResponse)(nil), "comdex.incentives.v1beta1.QueryAllGaugesResponse")
	proto.RegisterType((*QueryGaugeByIdRequest)(nil), "comdex.incentives.v1beta1.QueryGaugeByIdRequest")
	proto.RegisterType((*QueryGaugeByIdResponse)(nil), "comdex.incentives.v1beta1.QueryGaugeByIdResponse")
	proto.RegisterType((*QueryGaugesByDurationRequest)(nil), "comdex.incentives.v1beta1.QueryGaugesByDurationRequest")
	proto.RegisterType((*QueryGaugeByDurationResponse)(nil), "comdex.incentives.v1beta1.QueryGaugeByDurationResponse")
}

func init() {
	proto.RegisterFile("comdex/incentives/v1beta1/query.proto", fileDescriptor_d027e9201286dfd5)
}

var fileDescriptor_d027e9201286dfd5 = []byte{
	// 773 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x4e, 0x13, 0x4f,
	0x14, 0xef, 0xf2, 0x87, 0xfe, 0xc9, 0xe0, 0xe7, 0x58, 0x0c, 0x6c, 0xc8, 0xb6, 0x8c, 0x8a, 0xa0,
	0x61, 0x57, 0x0a, 0x86, 0x04, 0x8d, 0xc6, 0x06, 0x63, 0x9a, 0x90, 0x88, 0x4b, 0xc2, 0x85, 0x89,
	0x92, 0x6d, 0x3b, 0x5d, 0x36, 0x69, 0x77, 0x96, 0xee, 0x96, 0x58, 0x09, 0x37, 0x3e, 0x81, 0xd1,
	0x17, 0xf0, 0xd2, 0x18, 0x1f, 0xa4, 0xde, 0x18, 0x8c, 0x37, 0x7a, 0x43, 0xb4, 0xf8, 0x04, 0x3c,
	0x81, 0xd9, 0x99, 0xb3, 0xf6, 0xbb, 0xdb, 0xe2, 0xc7, 0x5d, 0x3b, 0x7b, 0xce, 0xf9, 0x7d, 0xcc,
	0xd9, 0x5f, 0x8b, 0xae, 0x64, 0x59, 0x31, 0x47, 0x9f, 0x69, 0x96, 0x9d, 0xa5, 0xb6, 0x67, 0xed,
	0x52, 0x57, 0xdb, 0x5d, 0xc8, 0x50, 0xcf, 0x58, 0xd0, 0x76, 0xca, 0xb4, 0x54, 0x51, 0x9d, 0x12,
	0xf3, 0x18, 0x9e, 0x14, 0x65, 0x6a, 0xbd, 0x4c, 0x85, 0x32, 0x39, 0x66, 0x32, 0x93, 0xf1, 0x2a,
	0xcd, 0xff, 0x24, 0x1a, 0xe4, 0x29, 0x93, 0x31, 0xb3, 0x40, 0x35, 0xc3, 0xb1, 0x34, 0xc3, 0xb6,
	0x99, 0x67, 0x78, 0x16, 0xb3, 0x5d, 0x78, 0x7a, 0x2d, 0xcb, 0xdc, 0x22, 0x73, 0xb5, 0x8c, 0xe1,
	0x52, 0x81, 0xf3, 0x0b, 0xd5, 0x31, 0x4c, 0xcb, 0xe6, 0xc5, 0x50, 0x3b, 0xd3, 0x9d, 0xa1, 0x63,
	0x94, 0x8c, 0x62, 0x30, 0xb3, 0x87, 0x12, 0xd3, 0x28, 0x9b, 0x34, 0x7c, 0x1c, 0x75, 0x58, 0x76,
	0x1b, 0xc6, 0x91, 0x18, 0xc2, 0x8f, 0x7c, 0x62, 0xeb, 0x1c, 0x43, 0xa7, 0x3b, 0x65, 0xea, 0x7a,
	0x64, 0x13, 0x5d, 0x68, 0x3a, 0x75, 0x1d, 0x66, 0xbb, 0x14, 0xdf, 0x45, 0x51, 0xc1, 0x65, 0x42,
	0x4a, 0x48, 0xb3, 0x63, 0xc9, 0x69, 0xb5, 0xab, 0x5f, 0xaa, 0x68, 0x4d, 0x0d, 0x57, 0x0f, 0xe3,
	0x11, 0x1d, 0xda, 0xc8, 0x73, 0x34, 0xc9, 0xe7, 0xde, 0x2b, 0x14, 0xee, 0x73, 0x16, 0x69, 0x3b,
	0xcf, 0x00, 0x14, 0x3f, 0x41, 0xa8, 0xee, 0x0a, 0x20, 0xcc, 0xa8, 0xc2, 0x42, 0xd5, 0xb7, 0x50,
	0x15, 0x57, 0x55, 0x47, 0x30, 0x29, 0xf4, 0xa6, 0xc6, 0x8f, 0x0f, 0xe3, 0xe7, 0x2b, 0x46, 0xb1,
	0xb0, 0x42, 0xea, 0x33, 0x88, 0xde, 0x30, 0x90, 0x7c, 0x92, 0x90, 0xdc, 0x09, 0x1c, 0xb4, 0x6d,
	0xa0, 0xa8, 0x30, 0x66, 0x42, 0x4a, 0xfc, 0x37, 0x3b, 0x96, 0xbc, 0xdc, 0x43, 0x1b, 0x6f, 0xf7,
	0xbb, 0x53, 0xe3, 0xbe, 0xbc, 0xe3, 0xc3, 0xf8, 0x69, 0x81, 0x2d, 0x26, 0x10, 0x1d, 0x46, 0xe1,
	0xa7, 0x4d, 0x92, 0x86, 0xb8, 0xa4, 0xab, 0xa1, 0x92, 0x04, 0xa3, 0x7e, 0x34, 0xad, 0xa1, 0x38,
	0x97, 0x54, 0x27, 0x54, 0x59, 0x2d, 0x97, 0xf8, 0xb3, 0xc0, 0xd5, 0x39, 0x74, 0x2e, 0x07, 0x47,
	0x5b, 0x2e, 0xcd, 0x32, 0x3b, 0x27, 0x6e, 0x6f, 0x58, 0x3f, 0x1b, 0x9c, 0x6f, 0x88, 0x63, 0xe2,
	0xa1, 0x44, 0xf7, 0x69, 0x60, 0xd3, 0x3a, 0x1a, 0xe1, 0xda, 0xe0, 0x7e, 0xfa, 0x73, 0x29, 0x06,
	0x2e, 0x9d, 0x6a, 0x70, 0x89, 0xe8, 0x62, 0x10, 0xd9, 0x45, 0xe3, 0xc1, 0xb5, 0x3c, 0xf0, 0x17,
	0xd8, 0xfd, 0x47, 0xfb, 0xf0, 0x41, 0x42, 0x17, 0x5b, 0x81, 0x41, 0xe4, 0x43, 0x14, 0xe5, 0xef,
	0x52, 0xb0, 0x0b, 0x89, 0x1e, 0x2a, 0x79, 0x6b, 0xeb, 0x1e, 0x88, 0x6e, 0xa2, 0xc3, 0x98, 0xbf,
	0xbe, 0x07, 0x49, 0xf0, 0x50, 0x90, 0xa9, 0xa4, 0x73, 0x81, 0x87, 0x93, 0x68, 0x94, 0x53, 0xd8,
	0xb2, 0x72, 0x70, 0xeb, 0xff, 0xf3, 0xef, 0xe9, 0x1c, 0xc9, 0x83, 0xfc, 0x86, 0x1e, 0x90, 0xbf,
	0x86, 0x46, 0x78, 0x11, 0x78, 0x1e, 0xae, 0xbe, 0xe5, 0x7e, 0x79, 0x33, 0xd1, 0xc5, 0x10, 0x92,
	0x46, 0x53, 0x75, 0x1c, 0xf7, 0xb7, 0x16, 0x94, 0x35, 0x8e, 0xea, 0xb0, 0x9c, 0x7f, 0xfa, 0xde,
	0x92, 0xd5, 0x51, 0x34, 0xc2, 0x11, 0xf1, 0x2b, 0x09, 0x45, 0x45, 0xa4, 0xe1, 0xf9, 0x1e, 0x53,
	0xdb, 0xb3, 0x54, 0x56, 0xfb, 0x2d, 0x17, 0x22, 0xc8, 0xdc, 0x8b, 0xcf, 0x3f, 0x5e, 0x0f, 0x5d,
	0xc2, 0xd3, 0x5a, 0xd8, 0x2f, 0x02, 0x7e, 0x2f, 0x41, 0x7a, 0x37, 0x45, 0x1a, 0x5e, 0x0a, 0x43,
	0xec, 0x14, 0xbf, 0xf2, 0xcd, 0x01, 0xbb, 0x06, 0xa0, 0x0b, 0x69, 0xf8, 0x55, 0x42, 0x13, 0xdd,
	0x02, 0x06, 0xaf, 0x84, 0xc1, 0x77, 0xcf, 0x38, 0xf9, 0xd6, 0x89, 0x7a, 0x41, 0xc0, 0x2a, 0x17,
	0x70, 0x07, 0xdf, 0x0e, 0x13, 0xb0, 0x15, 0xac, 0xa3, 0xb6, 0xd7, 0xba, 0xb0, 0xfb, 0xf8, 0x8d,
	0x84, 0xce, 0x34, 0xa7, 0x09, 0xbe, 0xd1, 0x87, 0xa1, 0x4d, 0x89, 0x27, 0x2f, 0x0c, 0xd0, 0x31,
	0x80, 0xfd, 0x10, 0x42, 0xef, 0x02, 0x8a, 0xc1, 0x1b, 0xbf, 0x1a, 0x4e, 0xb1, 0x35, 0x50, 0xc2,
	0x29, 0xb6, 0xc5, 0x09, 0x59, 0xe4, 0x14, 0xe7, 0xf1, 0xf5, 0x30, 0x8a, 0xda, 0x5e, 0x90, 0x55,
	0xfb, 0xf8, 0xa3, 0x84, 0x62, 0x9d, 0xde, 0x75, 0xbc, 0xdc, 0x17, 0x81, 0xf6, 0x9c, 0x91, 0x97,
	0xfb, 0x64, 0x7e, 0xa2, 0x05, 0x11, 0xc4, 0x7b, 0x2c, 0x48, 0x6a, 0xb3, 0xfa, 0x5d, 0x89, 0xbc,
	0xad, 0x29, 0x91, 0x6a, 0x4d, 0x91, 0x0e, 0x6a, 0x8a, 0xf4, 0xad, 0xa6, 0x48, 0x2f, 0x8f, 0x94,
	0xc8, 0xc1, 0x91, 0x12, 0xf9, 0x72, 0xa4, 0x44, 0x1e, 0x2f, 0x99, 0x96, 0xb7, 0x5d, 0xce, 0xf8,
	0x34, 0x01, 0x69, 0x9e, 0xe5, 0xf3, 0x56, 0xd6, 0x32, 0x0a, 0x01, 0x72, 0x13, 0xb6, 0x57, 0x71,
	0xa8, 0x9b, 0x89, 0xf2, 0xff, 0x71, 0x8b, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xca, 0x14,
	0x4f, 0xe2, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	QueryAllEpochsInfo(ctx context.Context, in *QueryAllEpochsInfoRequest, opts ...grpc.CallOption) (*QueryAllEpochsInfoResponse, error)
	QueryEpochInfoByDuration(ctx context.Context, in *QueryEpochInfoByDurationRequest, opts ...grpc.CallOption) (*QueryEpochInfoByDurationResponse, error)
	QueryAllGauges(ctx context.Context, in *QueryAllGaugesRequest, opts ...grpc.CallOption) (*QueryAllGaugesResponse, error)
	QueryGaugeByID(ctx context.Context, in *QueryGaugeByIdRequest, opts ...grpc.CallOption) (*QueryGaugeByIdResponse, error)
	QueryGaugeByDuration(ctx context.Context, in *QueryGaugesByDurationRequest, opts ...grpc.CallOption) (*QueryGaugeByDurationResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.incentives.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllEpochsInfo(ctx context.Context, in *QueryAllEpochsInfoRequest, opts ...grpc.CallOption) (*QueryAllEpochsInfoResponse, error) {
	out := new(QueryAllEpochsInfoResponse)
	err := c.cc.Invoke(ctx, "/comdex.incentives.v1beta1.Query/QueryAllEpochsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryEpochInfoByDuration(ctx context.Context, in *QueryEpochInfoByDurationRequest, opts ...grpc.CallOption) (*QueryEpochInfoByDurationResponse, error) {
	out := new(QueryEpochInfoByDurationResponse)
	err := c.cc.Invoke(ctx, "/comdex.incentives.v1beta1.Query/QueryEpochInfoByDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllGauges(ctx context.Context, in *QueryAllGaugesRequest, opts ...grpc.CallOption) (*QueryAllGaugesResponse, error) {
	out := new(QueryAllGaugesResponse)
	err := c.cc.Invoke(ctx, "/comdex.incentives.v1beta1.Query/QueryAllGauges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGaugeByID(ctx context.Context, in *QueryGaugeByIdRequest, opts ...grpc.CallOption) (*QueryGaugeByIdResponse, error) {
	out := new(QueryGaugeByIdResponse)
	err := c.cc.Invoke(ctx, "/comdex.incentives.v1beta1.Query/QueryGaugeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryGaugeByDuration(ctx context.Context, in *QueryGaugesByDurationRequest, opts ...grpc.CallOption) (*QueryGaugeByDurationResponse, error) {
	out := new(QueryGaugeByDurationResponse)
	err := c.cc.Invoke(ctx, "/comdex.incentives.v1beta1.Query/QueryGaugeByDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	QueryAllEpochsInfo(context.Context, *QueryAllEpochsInfoRequest) (*QueryAllEpochsInfoResponse, error)
	QueryEpochInfoByDuration(context.Context, *QueryEpochInfoByDurationRequest) (*QueryEpochInfoByDurationResponse, error)
	QueryAllGauges(context.Context, *QueryAllGaugesRequest) (*QueryAllGaugesResponse, error)
	QueryGaugeByID(context.Context, *QueryGaugeByIdRequest) (*QueryGaugeByIdResponse, error)
	QueryGaugeByDuration(context.Context, *QueryGaugesByDurationRequest) (*QueryGaugeByDurationResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueryAllEpochsInfo(ctx context.Context, req *QueryAllEpochsInfoRequest) (*QueryAllEpochsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllEpochsInfo not implemented")
}
func (*UnimplementedQueryServer) QueryEpochInfoByDuration(ctx context.Context, req *QueryEpochInfoByDurationRequest) (*QueryEpochInfoByDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEpochInfoByDuration not implemented")
}
func (*UnimplementedQueryServer) QueryAllGauges(ctx context.Context, req *QueryAllGaugesRequest) (*QueryAllGaugesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllGauges not implemented")
}
func (*UnimplementedQueryServer) QueryGaugeByID(ctx context.Context, req *QueryGaugeByIdRequest) (*QueryGaugeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGaugeByID not implemented")
}
func (*UnimplementedQueryServer) QueryGaugeByDuration(ctx context.Context, req *QueryGaugesByDurationRequest) (*QueryGaugeByDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGaugeByDuration not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.incentives.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllEpochsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllEpochsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.incentives.v1beta1.Query/QueryAllEpochsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllEpochsInfo(ctx, req.(*QueryAllEpochsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryEpochInfoByDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEpochInfoByDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryEpochInfoByDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.incentives.v1beta1.Query/QueryEpochInfoByDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryEpochInfoByDuration(ctx, req.(*QueryEpochInfoByDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllGauges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGaugesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllGauges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.incentives.v1beta1.Query/QueryAllGauges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllGauges(ctx, req.(*QueryAllGaugesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGaugeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGaugeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGaugeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.incentives.v1beta1.Query/QueryGaugeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGaugeByID(ctx, req.(*QueryGaugeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryGaugeByDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGaugesByDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryGaugeByDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.incentives.v1beta1.Query/QueryGaugeByDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryGaugeByDuration(ctx, req.(*QueryGaugesByDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.incentives.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueryAllEpochsInfo",
			Handler:    _Query_QueryAllEpochsInfo_Handler,
		},
		{
			MethodName: "QueryEpochInfoByDuration",
			Handler:    _Query_QueryEpochInfoByDuration_Handler,
		},
		{
			MethodName: "QueryAllGauges",
			Handler:    _Query_QueryAllGauges_Handler,
		},
		{
			MethodName: "QueryGaugeByID",
			Handler:    _Query_QueryGaugeByID_Handler,
		},
		{
			MethodName: "QueryGaugeByDuration",
			Handler:    _Query_QueryGaugeByDuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/incentives/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochsInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochsInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochsInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllEpochsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllEpochsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllEpochsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Epochs) > 0 {
		for iNdEx := len(m.Epochs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Epochs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochInfoByDurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochInfoByDurationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochInfoByDurationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationSeconds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DurationSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryEpochInfoByDurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEpochInfoByDurationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEpochInfoByDurationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGaugesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGaugesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGaugesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGaugesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGaugesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGaugesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Gauges) > 0 {
		for iNdEx := len(m.Gauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGaugeByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGaugeByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGaugeByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GaugeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGaugeByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGaugeByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGaugeByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Gauge.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGaugesByDurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGaugesByDurationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGaugesByDurationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DurationSeconds != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DurationSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGaugeByDurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGaugeByDurationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGaugeByDurationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Gauges) > 0 {
		for iNdEx := len(m.Gauges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gauges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllEpochsInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllEpochsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Epochs) > 0 {
		for _, e := range m.Epochs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEpochInfoByDurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DurationSeconds != 0 {
		n += 1 + sovQuery(uint64(m.DurationSeconds))
	}
	return n
}

func (m *QueryEpochInfoByDurationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Epoch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGaugesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGaugesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gauges) > 0 {
		for _, e := range m.Gauges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGaugeByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GaugeId != 0 {
		n += 1 + sovQuery(uint64(m.GaugeId))
	}
	return n
}

func (m *QueryGaugeByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Gauge.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGaugesByDurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DurationSeconds != 0 {
		n += 1 + sovQuery(uint64(m.DurationSeconds))
	}
	return n
}

func (m *QueryGaugeByDurationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Gauges) > 0 {
		for _, e := range m.Gauges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochsInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochsInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochsInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllEpochsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllEpochsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllEpochsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Epochs = append(m.Epochs, EpochInfo{})
			if err := m.Epochs[len(m.Epochs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochInfoByDurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochInfoByDurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochInfoByDurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationSeconds", wireType)
			}
			m.DurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEpochInfoByDurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEpochInfoByDurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEpochInfoByDurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGaugesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGaugesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGaugesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGaugesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGaugesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGaugesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gauges = append(m.Gauges, Gauge{})
			if err := m.Gauges[len(m.Gauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGaugeByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGaugeByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGaugeByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGaugeByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGaugeByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGaugeByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Gauge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGaugesByDurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGaugesByDurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGaugesByDurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationSeconds", wireType)
			}
			m.DurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DurationSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGaugeByDurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGaugeByDurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGaugeByDurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gauges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gauges = append(m.Gauges, Gauge{})
			if err := m.Gauges[len(m.Gauges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
