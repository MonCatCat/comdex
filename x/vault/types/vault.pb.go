// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/vault/v1beta1/vault.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vault struct {
	ID              uint64                                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	PairID          uint64                                    `protobuf:"varint,2,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	Owner           string                                    `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn        github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,4,opt,name=amount_in,json=amountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in" yaml:"amount_in"`
	AmountOut       github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,5,opt,name=amount_out,json=amountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out" yaml:"amount_out"`
	CreatedAt       time.Time                                 `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at" yaml:"created_at"`
	MarketCap       github_com_cosmos_cosmos_sdk_types.Dec    `protobuf:"bytes,7,opt,name=market_cap,json=marketCap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"market_cap" yaml:"market_cap"`
	RewardsReceived []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,8,rep,name=rewards_received,json=rewardsReceived,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"rewards_received" yaml:"rewards_received"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{0}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

type UserVaultIdMapping struct {
	Owner    string   `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	VaultIds []uint64 `protobuf:"varint,3,rep,packed,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty" yaml:"vault_ids"`
}

func (m *UserVaultIdMapping) Reset()         { *m = UserVaultIdMapping{} }
func (m *UserVaultIdMapping) String() string { return proto.CompactTextString(m) }
func (*UserVaultIdMapping) ProtoMessage()    {}
func (*UserVaultIdMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{1}
}
func (m *UserVaultIdMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserVaultIdMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserVaultIdMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserVaultIdMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserVaultIdMapping.Merge(m, src)
}
func (m *UserVaultIdMapping) XXX_Size() int {
	return m.Size()
}
func (m *UserVaultIdMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_UserVaultIdMapping.DiscardUnknown(m)
}

var xxx_messageInfo_UserVaultIdMapping proto.InternalMessageInfo

type VaultIds struct {
	VaultIds []uint64 `protobuf:"varint,1,rep,packed,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty" yaml:"vault_ids"`
}

func (m *VaultIds) Reset()         { *m = VaultIds{} }
func (m *VaultIds) String() string { return proto.CompactTextString(m) }
func (*VaultIds) ProtoMessage()    {}
func (*VaultIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{2}
}
func (m *VaultIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultIds.Merge(m, src)
}
func (m *VaultIds) XXX_Size() int {
	return m.Size()
}
func (m *VaultIds) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultIds.DiscardUnknown(m)
}

var xxx_messageInfo_VaultIds proto.InternalMessageInfo

type CollateralVaultIdMapping struct {
	CollateralDenom    string               `protobuf:"bytes,1,opt,name=collateral_denom,json=collateralDenom,proto3" json:"collateral_denom,omitempty" yaml:"collateral_denom"`
	CassetsVaultIdsMap map[string]*VaultIds `protobuf:"bytes,2,rep,name=cassets_vault_ids_map,json=cassetsVaultIdsMap,proto3" json:"cassets_vault_ids_map,omitempty" yaml:"cassets_vault_ids_map" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *CollateralVaultIdMapping) Reset()         { *m = CollateralVaultIdMapping{} }
func (m *CollateralVaultIdMapping) String() string { return proto.CompactTextString(m) }
func (*CollateralVaultIdMapping) ProtoMessage()    {}
func (*CollateralVaultIdMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{3}
}
func (m *CollateralVaultIdMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralVaultIdMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralVaultIdMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralVaultIdMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralVaultIdMapping.Merge(m, src)
}
func (m *CollateralVaultIdMapping) XXX_Size() int {
	return m.Size()
}
func (m *CollateralVaultIdMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralVaultIdMapping.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralVaultIdMapping proto.InternalMessageInfo

type CAssetsMintStatistics struct {
	CollateralDenom string            `protobuf:"bytes,1,opt,name=collateral_denom,json=collateralDenom,proto3" json:"collateral_denom,omitempty" yaml:"collateral_denom"`
	MintedAssets    map[string]uint64 `protobuf:"bytes,2,rep,name=minted_assets,json=mintedAssets,proto3" json:"minted_assets,omitempty" yaml:"minted_assets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *CAssetsMintStatistics) Reset()         { *m = CAssetsMintStatistics{} }
func (m *CAssetsMintStatistics) String() string { return proto.CompactTextString(m) }
func (*CAssetsMintStatistics) ProtoMessage()    {}
func (*CAssetsMintStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_217d238efc540f4d, []int{4}
}
func (m *CAssetsMintStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CAssetsMintStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CAssetsMintStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CAssetsMintStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CAssetsMintStatistics.Merge(m, src)
}
func (m *CAssetsMintStatistics) XXX_Size() int {
	return m.Size()
}
func (m *CAssetsMintStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_CAssetsMintStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_CAssetsMintStatistics proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Vault)(nil), "comdex.vault.v1beta1.Vault")
	proto.RegisterType((*UserVaultIdMapping)(nil), "comdex.vault.v1beta1.UserVaultIdMapping")
	proto.RegisterType((*VaultIds)(nil), "comdex.vault.v1beta1.VaultIds")
	proto.RegisterType((*CollateralVaultIdMapping)(nil), "comdex.vault.v1beta1.CollateralVaultIdMapping")
	proto.RegisterMapType((map[string]*VaultIds)(nil), "comdex.vault.v1beta1.CollateralVaultIdMapping.CassetsVaultIdsMapEntry")
	proto.RegisterType((*CAssetsMintStatistics)(nil), "comdex.vault.v1beta1.CAssetsMintStatistics")
	proto.RegisterMapType((map[string]uint64)(nil), "comdex.vault.v1beta1.CAssetsMintStatistics.MintedAssetsEntry")
}

func init() { proto.RegisterFile("comdex/vault/v1beta1/vault.proto", fileDescriptor_217d238efc540f4d) }

var fileDescriptor_217d238efc540f4d = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x9d, 0x1f, 0x9b, 0x4c, 0x17, 0x36, 0x6b, 0xb2, 0x5a, 0x13, 0x16, 0x3b, 0x1a, 0xa4,
	0x25, 0x97, 0xb5, 0xd5, 0x02, 0x12, 0x5a, 0x69, 0x85, 0xd6, 0x29, 0x2b, 0x05, 0x29, 0x02, 0xcc,
	0x0f, 0x21, 0x2e, 0xd6, 0xc4, 0x9e, 0x86, 0x51, 0x6d, 0x8f, 0xe5, 0x19, 0xa7, 0x44, 0xe2, 0x8f,
	0xe8, 0x1d, 0x09, 0x89, 0x1b, 0x7f, 0x4a, 0x8f, 0x3d, 0x22, 0x0e, 0x06, 0xd2, 0x03, 0xf7, 0x1c,
	0x39, 0x21, 0xcf, 0x38, 0x71, 0xda, 0xa6, 0xa8, 0x95, 0xf6, 0x94, 0x99, 0x37, 0xdf, 0xfb, 0xbe,
	0x6f, 0xde, 0xbc, 0xe7, 0x80, 0x81, 0x4f, 0xa3, 0x00, 0xff, 0x68, 0xcf, 0x51, 0x16, 0x72, 0x7b,
	0xbe, 0x3f, 0xc5, 0x1c, 0xed, 0xcb, 0x9d, 0x95, 0xa4, 0x94, 0x53, 0xad, 0x27, 0x11, 0x96, 0x8c,
	0x95, 0x88, 0x7e, 0x6f, 0x46, 0x67, 0x54, 0x00, 0xec, 0x62, 0x25, 0xb1, 0x7d, 0x73, 0x46, 0xe9,
	0x2c, 0xc4, 0xb6, 0xd8, 0x4d, 0xb3, 0x23, 0x9b, 0x93, 0x08, 0x33, 0x8e, 0xa2, 0xa4, 0x04, 0x18,
	0x3e, 0x65, 0x11, 0x65, 0xf6, 0x14, 0x31, 0xbc, 0x51, 0xf3, 0x29, 0x89, 0xe5, 0x39, 0xfc, 0xb5,
	0x09, 0x9a, 0xdf, 0x16, 0x42, 0xda, 0x7b, 0x40, 0x25, 0x81, 0xae, 0x0c, 0x94, 0x61, 0xc3, 0x79,
	0x6b, 0x99, 0x9b, 0xea, 0xf8, 0x70, 0x95, 0x9b, 0x9d, 0x05, 0x8a, 0xc2, 0xe7, 0x90, 0x04, 0xd0,
	0x55, 0x49, 0xa0, 0x7d, 0x04, 0xee, 0x25, 0x88, 0xa4, 0x1e, 0x09, 0x74, 0x55, 0x20, 0x9f, 0x2c,
	0x73, 0xb3, 0xf5, 0x05, 0x22, 0xa9, 0x40, 0xbf, 0x29, 0xd1, 0x25, 0x04, 0xba, 0xad, 0x62, 0x35,
	0x0e, 0xb4, 0xa7, 0xa0, 0x49, 0x4f, 0x62, 0x9c, 0xea, 0xf5, 0x81, 0x32, 0xec, 0x38, 0xdd, 0x55,
	0x6e, 0xde, 0x97, 0x50, 0x11, 0x86, 0xae, 0x3c, 0xd6, 0x3c, 0xd0, 0x41, 0x11, 0xcd, 0x62, 0xee,
	0x91, 0x58, 0x6f, 0x08, 0xac, 0x73, 0x96, 0x9b, 0xb5, 0x3f, 0x72, 0xf3, 0xe9, 0x8c, 0xf0, 0x1f,
	0xb2, 0xa9, 0xe5, 0xd3, 0xc8, 0x2e, 0xef, 0x24, 0x7f, 0x9e, 0xb1, 0xe0, 0xd8, 0xe6, 0x8b, 0x04,
	0x33, 0x6b, 0x1c, 0xf3, 0x55, 0x6e, 0x76, 0x25, 0xf3, 0x86, 0x08, 0xba, 0x6d, 0xb9, 0x1e, 0xc7,
	0xda, 0x14, 0x80, 0x32, 0x4e, 0x33, 0xae, 0x37, 0x85, 0xc2, 0xe8, 0xce, 0x0a, 0x0f, 0x2f, 0x29,
	0xd0, 0x8c, 0x43, 0xb7, 0xf4, 0xfd, 0x79, 0xc6, 0xb5, 0xef, 0x00, 0xf0, 0x53, 0x8c, 0x38, 0x0e,
	0x3c, 0xc4, 0xf5, 0xd6, 0x40, 0x19, 0xee, 0x1d, 0xf4, 0x2d, 0xf9, 0x50, 0xd6, 0xfa, 0xa1, 0xac,
	0xaf, 0xd7, 0x0f, 0xe5, 0xbc, 0x5b, 0xe8, 0x57, 0xac, 0x55, 0x2e, 0x3c, 0xfd, 0xd3, 0x54, 0xdc,
	0x4e, 0x19, 0x78, 0xc9, 0x0b, 0xf7, 0x11, 0x4a, 0x8f, 0x31, 0xf7, 0x7c, 0x94, 0xe8, 0xf7, 0xee,
	0xec, 0xfe, 0x10, 0xfb, 0x95, 0x4e, 0xc5, 0x04, 0xdd, 0x8e, 0xdc, 0x8c, 0x50, 0xa2, 0x9d, 0x2a,
	0xa0, 0x9b, 0xe2, 0x13, 0x94, 0x06, 0xcc, 0x4b, 0xb1, 0x8f, 0xc9, 0x1c, 0x07, 0x7a, 0x7b, 0x50,
	0x1f, 0xee, 0x1d, 0xbc, 0x6d, 0x49, 0x46, 0xab, 0x68, 0xa6, 0x75, 0x63, 0x5a, 0x23, 0x4a, 0x62,
	0xe7, 0xb3, 0xf2, 0x0e, 0x8f, 0x25, 0xf7, 0x55, 0x02, 0xf8, 0x6f, 0x6e, 0xbe, 0x7f, 0x0b, 0x83,
	0x05, 0x97, 0xfb, 0xa0, 0xcc, 0x76, 0xd7, 0xc9, 0x14, 0x68, 0xdf, 0x30, 0x9c, 0x8a, 0x36, 0x1d,
	0x07, 0x13, 0x94, 0x24, 0x24, 0x9e, 0x55, 0x3d, 0xa5, 0xfe, 0x7f, 0x4f, 0xed, 0x83, 0x8e, 0x98,
	0x24, 0x8f, 0x04, 0x4c, 0xaf, 0x0f, 0xea, 0xc3, 0x86, 0xd3, 0xab, 0xba, 0x64, 0x73, 0x04, 0xdd,
	0xf6, 0x5c, 0x0a, 0x30, 0xf8, 0x02, 0xb4, 0x4b, 0x31, 0x76, 0x39, 0x5d, 0xb9, 0x55, 0xfa, 0x3f,
	0x2a, 0xd0, 0x47, 0x34, 0x0c, 0x11, 0xc7, 0x29, 0x0a, 0xaf, 0xd8, 0x7e, 0x05, 0xba, 0xfe, 0xe6,
	0xcc, 0x0b, 0x70, 0x4c, 0x23, 0x31, 0x74, 0x1d, 0xe7, 0x9d, 0xaa, 0x7e, 0x57, 0x11, 0xd0, 0x7d,
	0x50, 0x85, 0x0e, 0x8b, 0x88, 0xf6, 0xb3, 0x02, 0x1e, 0xf9, 0x88, 0x31, 0xcc, 0x99, 0xb7, 0x71,
	0xe1, 0x45, 0x28, 0xd1, 0x55, 0xf1, 0x58, 0xaf, 0xac, 0x5d, 0x9f, 0x11, 0xeb, 0x26, 0x5f, 0xd6,
	0x48, 0x72, 0xad, 0xef, 0x3d, 0x41, 0xc9, 0xa7, 0x31, 0x4f, 0x17, 0xce, 0x60, 0x95, 0x9b, 0x4f,
	0x4a, 0x57, 0xbb, 0xe4, 0xa0, 0xab, 0xf9, 0xd7, 0x52, 0xfb, 0x18, 0x3c, 0xbe, 0x81, 0x50, 0xeb,
	0x82, 0xfa, 0x31, 0x5e, 0xc8, 0x3b, 0xbb, 0xc5, 0x52, 0xfb, 0x10, 0x34, 0xe7, 0x28, 0xcc, 0xb0,
	0x78, 0xc9, 0xbd, 0x03, 0x63, 0xb7, 0xf3, 0x35, 0x91, 0x2b, 0xc1, 0xcf, 0xd5, 0x8f, 0x15, 0xf8,
	0x8b, 0x0a, 0x1e, 0x8d, 0x5e, 0x0a, 0x9d, 0x09, 0x89, 0xf9, 0x57, 0x1c, 0x71, 0xc2, 0x38, 0xf1,
	0xd9, 0x6b, 0x2b, 0xf3, 0x4f, 0xe0, 0x8d, 0x88, 0xc4, 0x62, 0x1e, 0x85, 0x4c, 0x59, 0xdd, 0x17,
	0x37, 0x54, 0x77, 0x97, 0x17, 0x6b, 0x22, 0x08, 0xe4, 0x91, 0x2c, 0xaa, 0xbe, 0xca, 0xcd, 0x5e,
	0x39, 0x86, 0xdb, 0xec, 0xd0, 0xbd, 0x1f, 0x6d, 0x81, 0xfb, 0x9f, 0x80, 0x87, 0xd7, 0x92, 0x77,
	0x14, 0xb0, 0xb7, 0x5d, 0xc0, 0xc6, 0x56, 0x81, 0x9c, 0x2f, 0xcf, 0xfe, 0x36, 0x6a, 0xbf, 0x2d,
	0x8d, 0xda, 0xd9, 0xd2, 0x50, 0xce, 0x97, 0x86, 0xf2, 0xd7, 0xd2, 0x50, 0x4e, 0x2f, 0x8c, 0xda,
	0xf9, 0x85, 0x51, 0xfb, 0xfd, 0xc2, 0xa8, 0x7d, 0x6f, 0x5f, 0x1a, 0xcb, 0xe2, 0x4e, 0xcf, 0xe8,
	0xd1, 0x11, 0xf1, 0x09, 0x0a, 0xcb, 0xbd, 0xbd, 0xfe, 0xb3, 0x12, 0x33, 0x3a, 0x6d, 0x89, 0x4f,
	0xd8, 0x07, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x40, 0x71, 0x59, 0xdd, 0xc9, 0x06, 0x00, 0x00,
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardsReceived) > 0 {
		for iNdEx := len(m.RewardsReceived) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardsReceived[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size := m.MarketCap.Size()
		i -= size
		if _, err := m.MarketCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVault(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PairID != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.PairID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserVaultIdMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserVaultIdMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserVaultIdMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		dAtA3 := make([]byte, len(m.VaultIds)*10)
		var j2 int
		for _, num := range m.VaultIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintVault(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *VaultIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		dAtA5 := make([]byte, len(m.VaultIds)*10)
		var j4 int
		for _, num := range m.VaultIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintVault(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollateralVaultIdMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralVaultIdMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralVaultIdMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CassetsVaultIdsMap) > 0 {
		for k := range m.CassetsVaultIdsMap {
			v := m.CassetsVaultIdsMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintVault(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVault(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVault(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CollateralDenom) > 0 {
		i -= len(m.CollateralDenom)
		copy(dAtA[i:], m.CollateralDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.CollateralDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CAssetsMintStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CAssetsMintStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CAssetsMintStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MintedAssets) > 0 {
		for k := range m.MintedAssets {
			v := m.MintedAssets[k]
			baseI := i
			i = encodeVarintVault(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintVault(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintVault(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CollateralDenom) > 0 {
		i -= len(m.CollateralDenom)
		copy(dAtA[i:], m.CollateralDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.CollateralDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovVault(uint64(m.ID))
	}
	if m.PairID != 0 {
		n += 1 + sovVault(uint64(m.PairID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovVault(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovVault(uint64(l))
	l = m.MarketCap.Size()
	n += 1 + l + sovVault(uint64(l))
	if len(m.RewardsReceived) > 0 {
		for _, e := range m.RewardsReceived {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	return n
}

func (m *UserVaultIdMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if len(m.VaultIds) > 0 {
		l = 0
		for _, e := range m.VaultIds {
			l += sovVault(uint64(e))
		}
		n += 1 + sovVault(uint64(l)) + l
	}
	return n
}

func (m *VaultIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		l = 0
		for _, e := range m.VaultIds {
			l += sovVault(uint64(e))
		}
		n += 1 + sovVault(uint64(l)) + l
	}
	return n
}

func (m *CollateralVaultIdMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if len(m.CassetsVaultIdsMap) > 0 {
		for k, v := range m.CassetsVaultIdsMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovVault(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovVault(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovVault(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CAssetsMintStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if len(m.MintedAssets) > 0 {
		for k, v := range m.MintedAssets {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovVault(uint64(len(k))) + 1 + sovVault(uint64(v))
			n += mapEntrySize + 1 + sovVault(uint64(mapEntrySize))
		}
	}
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			m.PairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarketCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsReceived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsReceived = append(m.RewardsReceived, github_com_cosmos_cosmos_sdk_types.Coin{})
			if err := m.RewardsReceived[len(m.RewardsReceived)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserVaultIdMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserVaultIdMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserVaultIdMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultIds = append(m.VaultIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVault
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVault
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VaultIds) == 0 {
					m.VaultIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultIds = append(m.VaultIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultIds = append(m.VaultIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVault
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVault
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VaultIds) == 0 {
					m.VaultIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultIds = append(m.VaultIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollateralVaultIdMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralVaultIdMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralVaultIdMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CassetsVaultIdsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CassetsVaultIdsMap == nil {
				m.CassetsVaultIdsMap = make(map[string]*VaultIds)
			}
			var mapkey string
			var mapvalue *VaultIds
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVault
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVault
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthVault
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthVault
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VaultIds{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVault(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthVault
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CassetsVaultIdsMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CAssetsMintStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CAssetsMintStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CAssetsMintStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintedAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MintedAssets == nil {
				m.MintedAssets = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthVault
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthVault
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipVault(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthVault
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MintedAssets[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
