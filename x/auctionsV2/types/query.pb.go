// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auctionsV2/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryAuctionRequest struct {
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	History   bool   `protobuf:"varint,2,opt,name=history,proto3" json:"history,omitempty"`
}

func (m *QueryAuctionRequest) Reset()         { *m = QueryAuctionRequest{} }
func (m *QueryAuctionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionRequest) ProtoMessage()    {}
func (*QueryAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{2}
}
func (m *QueryAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionRequest.Merge(m, src)
}
func (m *QueryAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionRequest proto.InternalMessageInfo

func (m *QueryAuctionRequest) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *QueryAuctionRequest) GetHistory() bool {
	if m != nil {
		return m.History
	}
	return false
}

type QueryAuctionResponse struct {
	Auction Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction" yaml:"auction"`
}

func (m *QueryAuctionResponse) Reset()         { *m = QueryAuctionResponse{} }
func (m *QueryAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionResponse) ProtoMessage()    {}
func (*QueryAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{3}
}
func (m *QueryAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionResponse.Merge(m, src)
}
func (m *QueryAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionResponse proto.InternalMessageInfo

func (m *QueryAuctionResponse) GetAuction() Auction {
	if m != nil {
		return m.Auction
	}
	return Auction{}
}

type QueryAuctionsRequest struct {
	History    bool               `protobuf:"varint,1,opt,name=history,proto3" json:"history,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAuctionsRequest) Reset()         { *m = QueryAuctionsRequest{} }
func (m *QueryAuctionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsRequest) ProtoMessage()    {}
func (*QueryAuctionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{4}
}
func (m *QueryAuctionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsRequest.Merge(m, src)
}
func (m *QueryAuctionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsRequest proto.InternalMessageInfo

func (m *QueryAuctionsRequest) GetHistory() bool {
	if m != nil {
		return m.History
	}
	return false
}

func (m *QueryAuctionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAuctionsResponse struct {
	Auctions   []Auction           `protobuf:"bytes,1,rep,name=auctions,proto3" json:"auctions" yaml:"auctions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryAuctionsResponse) Reset()         { *m = QueryAuctionsResponse{} }
func (m *QueryAuctionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionsResponse) ProtoMessage()    {}
func (*QueryAuctionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{5}
}
func (m *QueryAuctionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionsResponse.Merge(m, src)
}
func (m *QueryAuctionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionsResponse proto.InternalMessageInfo

func (m *QueryAuctionsResponse) GetAuctions() []Auction {
	if m != nil {
		return m.Auctions
	}
	return nil
}

func (m *QueryAuctionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBidsRequest struct {
	Bidder     string             `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	History    bool               `protobuf:"varint,2,opt,name=history,proto3" json:"history,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryBidsRequest) Reset()         { *m = QueryBidsRequest{} }
func (m *QueryBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBidsRequest) ProtoMessage()    {}
func (*QueryBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{6}
}
func (m *QueryBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsRequest.Merge(m, src)
}
func (m *QueryBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsRequest proto.InternalMessageInfo

func (m *QueryBidsRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *QueryBidsRequest) GetHistory() bool {
	if m != nil {
		return m.History
	}
	return false
}

func (m *QueryBidsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryBidsResponse struct {
	Bidder     string              `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	Bids       []Bid               `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids" yaml:"bids"`
	Pagination *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryBidsResponse) Reset()         { *m = QueryBidsResponse{} }
func (m *QueryBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBidsResponse) ProtoMessage()    {}
func (*QueryBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{7}
}
func (m *QueryBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBidsResponse.Merge(m, src)
}
func (m *QueryBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBidsResponse proto.InternalMessageInfo

func (m *QueryBidsResponse) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *QueryBidsResponse) GetBids() []Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *QueryBidsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAuctionParamsRequest struct {
}

func (m *QueryAuctionParamsRequest) Reset()         { *m = QueryAuctionParamsRequest{} }
func (m *QueryAuctionParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionParamsRequest) ProtoMessage()    {}
func (*QueryAuctionParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{8}
}
func (m *QueryAuctionParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionParamsRequest.Merge(m, src)
}
func (m *QueryAuctionParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionParamsRequest proto.InternalMessageInfo

type QueryAuctionParamsResponse struct {
	AuctionParams AuctionParams `protobuf:"bytes,1,opt,name=auction_params,json=auctionParams,proto3" json:"auction_params" yaml:"auction_params"`
}

func (m *QueryAuctionParamsResponse) Reset()         { *m = QueryAuctionParamsResponse{} }
func (m *QueryAuctionParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAuctionParamsResponse) ProtoMessage()    {}
func (*QueryAuctionParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{9}
}
func (m *QueryAuctionParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAuctionParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAuctionParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAuctionParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAuctionParamsResponse.Merge(m, src)
}
func (m *QueryAuctionParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAuctionParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAuctionParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAuctionParamsResponse proto.InternalMessageInfo

func (m *QueryAuctionParamsResponse) GetAuctionParams() AuctionParams {
	if m != nil {
		return m.AuctionParams
	}
	return AuctionParams{}
}

type QueryUserLimitBidsRequest struct {
	Bidder     string             `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryUserLimitBidsRequest) Reset()         { *m = QueryUserLimitBidsRequest{} }
func (m *QueryUserLimitBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserLimitBidsRequest) ProtoMessage()    {}
func (*QueryUserLimitBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{10}
}
func (m *QueryUserLimitBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserLimitBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserLimitBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserLimitBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserLimitBidsRequest.Merge(m, src)
}
func (m *QueryUserLimitBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserLimitBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserLimitBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserLimitBidsRequest proto.InternalMessageInfo

func (m *QueryUserLimitBidsRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *QueryUserLimitBidsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryUserLimitBidsResponse struct {
	LimitOrderBids LimitOrderBidsForUser `protobuf:"bytes,1,opt,name=limitOrderBids,proto3" json:"limitOrderBids" yaml:"limit_order_bids"`
}

func (m *QueryUserLimitBidsResponse) Reset()         { *m = QueryUserLimitBidsResponse{} }
func (m *QueryUserLimitBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserLimitBidsResponse) ProtoMessage()    {}
func (*QueryUserLimitBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{11}
}
func (m *QueryUserLimitBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserLimitBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserLimitBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserLimitBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserLimitBidsResponse.Merge(m, src)
}
func (m *QueryUserLimitBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserLimitBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserLimitBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserLimitBidsResponse proto.InternalMessageInfo

func (m *QueryUserLimitBidsResponse) GetLimitOrderBids() LimitOrderBidsForUser {
	if m != nil {
		return m.LimitOrderBids
	}
	return LimitOrderBidsForUser{}
}

type QueryUserLimitBidsByAssetIDRequest struct {
	Bidder            string             `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	CollateralTokenId uint64             `protobuf:"varint,2,opt,name=collateral_token_id,json=collateralTokenId,proto3" json:"collateral_token_id,omitempty"`
	DebtTokenId       uint64             `protobuf:"varint,3,opt,name=debt_token_id,json=debtTokenId,proto3" json:"debt_token_id,omitempty"`
	Pagination        *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryUserLimitBidsByAssetIDRequest) Reset()         { *m = QueryUserLimitBidsByAssetIDRequest{} }
func (m *QueryUserLimitBidsByAssetIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserLimitBidsByAssetIDRequest) ProtoMessage()    {}
func (*QueryUserLimitBidsByAssetIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{12}
}
func (m *QueryUserLimitBidsByAssetIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserLimitBidsByAssetIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserLimitBidsByAssetIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserLimitBidsByAssetIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserLimitBidsByAssetIDRequest.Merge(m, src)
}
func (m *QueryUserLimitBidsByAssetIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserLimitBidsByAssetIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserLimitBidsByAssetIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserLimitBidsByAssetIDRequest proto.InternalMessageInfo

func (m *QueryUserLimitBidsByAssetIDRequest) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *QueryUserLimitBidsByAssetIDRequest) GetCollateralTokenId() uint64 {
	if m != nil {
		return m.CollateralTokenId
	}
	return 0
}

func (m *QueryUserLimitBidsByAssetIDRequest) GetDebtTokenId() uint64 {
	if m != nil {
		return m.DebtTokenId
	}
	return 0
}

func (m *QueryUserLimitBidsByAssetIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryUserLimitBidsByAssetIDResponse struct {
	Bidder         string              `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty" yaml:"bidder"`
	LimitOrderBids []LimitOrderBid     `protobuf:"bytes,2,rep,name=limitOrderBids,proto3" json:"limitOrderBids" yaml:"limit_order_bids"`
	Pagination     *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryUserLimitBidsByAssetIDResponse) Reset()         { *m = QueryUserLimitBidsByAssetIDResponse{} }
func (m *QueryUserLimitBidsByAssetIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserLimitBidsByAssetIDResponse) ProtoMessage()    {}
func (*QueryUserLimitBidsByAssetIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{13}
}
func (m *QueryUserLimitBidsByAssetIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserLimitBidsByAssetIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserLimitBidsByAssetIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserLimitBidsByAssetIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserLimitBidsByAssetIDResponse.Merge(m, src)
}
func (m *QueryUserLimitBidsByAssetIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserLimitBidsByAssetIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserLimitBidsByAssetIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserLimitBidsByAssetIDResponse proto.InternalMessageInfo

func (m *QueryUserLimitBidsByAssetIDResponse) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *QueryUserLimitBidsByAssetIDResponse) GetLimitOrderBids() []LimitOrderBid {
	if m != nil {
		return m.LimitOrderBids
	}
	return nil
}

func (m *QueryUserLimitBidsByAssetIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLimitBidsRequest struct {
	CollateralTokenId uint64             `protobuf:"varint,1,opt,name=collateral_token_id,json=collateralTokenId,proto3" json:"collateral_token_id,omitempty"`
	DebtTokenId       uint64             `protobuf:"varint,2,opt,name=debt_token_id,json=debtTokenId,proto3" json:"debt_token_id,omitempty"`
	Pagination        *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLimitBidsRequest) Reset()         { *m = QueryLimitBidsRequest{} }
func (m *QueryLimitBidsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLimitBidsRequest) ProtoMessage()    {}
func (*QueryLimitBidsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{14}
}
func (m *QueryLimitBidsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLimitBidsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLimitBidsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLimitBidsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLimitBidsRequest.Merge(m, src)
}
func (m *QueryLimitBidsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLimitBidsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLimitBidsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLimitBidsRequest proto.InternalMessageInfo

func (m *QueryLimitBidsRequest) GetCollateralTokenId() uint64 {
	if m != nil {
		return m.CollateralTokenId
	}
	return 0
}

func (m *QueryLimitBidsRequest) GetDebtTokenId() uint64 {
	if m != nil {
		return m.DebtTokenId
	}
	return 0
}

func (m *QueryLimitBidsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLimitBidsResponse struct {
	LimitOrderBids []LimitOrderBid     `protobuf:"bytes,2,rep,name=limitOrderBids,proto3" json:"limitOrderBids" yaml:"limit_order_bids"`
	Pagination     *query.PageResponse `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLimitBidsResponse) Reset()         { *m = QueryLimitBidsResponse{} }
func (m *QueryLimitBidsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLimitBidsResponse) ProtoMessage()    {}
func (*QueryLimitBidsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5270c3f1c79728ac, []int{15}
}
func (m *QueryLimitBidsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLimitBidsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLimitBidsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLimitBidsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLimitBidsResponse.Merge(m, src)
}
func (m *QueryLimitBidsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLimitBidsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLimitBidsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLimitBidsResponse proto.InternalMessageInfo

func (m *QueryLimitBidsResponse) GetLimitOrderBids() []LimitOrderBid {
	if m != nil {
		return m.LimitOrderBids
	}
	return nil
}

func (m *QueryLimitBidsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.auctionsV2.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.auctionsV2.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryAuctionRequest)(nil), "comdex.auctionsV2.v1beta1.QueryAuctionRequest")
	proto.RegisterType((*QueryAuctionResponse)(nil), "comdex.auctionsV2.v1beta1.QueryAuctionResponse")
	proto.RegisterType((*QueryAuctionsRequest)(nil), "comdex.auctionsV2.v1beta1.QueryAuctionsRequest")
	proto.RegisterType((*QueryAuctionsResponse)(nil), "comdex.auctionsV2.v1beta1.QueryAuctionsResponse")
	proto.RegisterType((*QueryBidsRequest)(nil), "comdex.auctionsV2.v1beta1.QueryBidsRequest")
	proto.RegisterType((*QueryBidsResponse)(nil), "comdex.auctionsV2.v1beta1.QueryBidsResponse")
	proto.RegisterType((*QueryAuctionParamsRequest)(nil), "comdex.auctionsV2.v1beta1.QueryAuctionParamsRequest")
	proto.RegisterType((*QueryAuctionParamsResponse)(nil), "comdex.auctionsV2.v1beta1.QueryAuctionParamsResponse")
	proto.RegisterType((*QueryUserLimitBidsRequest)(nil), "comdex.auctionsV2.v1beta1.QueryUserLimitBidsRequest")
	proto.RegisterType((*QueryUserLimitBidsResponse)(nil), "comdex.auctionsV2.v1beta1.QueryUserLimitBidsResponse")
	proto.RegisterType((*QueryUserLimitBidsByAssetIDRequest)(nil), "comdex.auctionsV2.v1beta1.QueryUserLimitBidsByAssetIDRequest")
	proto.RegisterType((*QueryUserLimitBidsByAssetIDResponse)(nil), "comdex.auctionsV2.v1beta1.QueryUserLimitBidsByAssetIDResponse")
	proto.RegisterType((*QueryLimitBidsRequest)(nil), "comdex.auctionsV2.v1beta1.QueryLimitBidsRequest")
	proto.RegisterType((*QueryLimitBidsResponse)(nil), "comdex.auctionsV2.v1beta1.QueryLimitBidsResponse")
}

func init() {
	proto.RegisterFile("comdex/auctionsV2/v1beta1/query.proto", fileDescriptor_5270c3f1c79728ac)
}

var fileDescriptor_5270c3f1c79728ac = []byte{
	// 1085 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x38, 0x21, 0x1f, 0x63, 0x39, 0x90, 0xc9, 0x47, 0x5d, 0xd3, 0xda, 0x61, 0x0a, 0xa9,
	0x69, 0xc9, 0x6e, 0xe3, 0x06, 0x21, 0x55, 0x02, 0xd4, 0x15, 0x02, 0x82, 0xaa, 0x52, 0x56, 0xfd,
	0x90, 0x90, 0x4a, 0xb4, 0xf6, 0x4e, 0xdd, 0x15, 0xb6, 0xc7, 0xd9, 0x5d, 0x57, 0x58, 0x56, 0x2e,
	0x5c, 0x41, 0x02, 0x81, 0x04, 0x5c, 0x38, 0x55, 0x42, 0xfc, 0x03, 0xfc, 0x03, 0x9c, 0x2a, 0x4e,
	0x91, 0xb8, 0x70, 0x8a, 0x50, 0x82, 0xc4, 0x81, 0x03, 0x52, 0x0e, 0x9c, 0xd1, 0xce, 0xbc, 0xb5,
	0x3d, 0xf6, 0xda, 0xbb, 0x46, 0xe9, 0x85, 0x9b, 0x3d, 0xf3, 0x7b, 0xef, 0xfd, 0xde, 0xef, 0xbd,
	0x79, 0x33, 0x8b, 0x5f, 0xaa, 0xf0, 0xba, 0xcd, 0x3e, 0xd1, 0xad, 0x56, 0xc5, 0x77, 0x78, 0xc3,
	0xbb, 0x5b, 0xd2, 0x1f, 0x6d, 0x95, 0x99, 0x6f, 0x6d, 0xe9, 0x7b, 0x2d, 0xe6, 0xb6, 0xb5, 0xa6,
	0xcb, 0x7d, 0x4e, 0xce, 0x4a, 0x98, 0xd6, 0x83, 0x69, 0x00, 0xcb, 0xad, 0x54, 0x79, 0x95, 0x0b,
	0x94, 0x1e, 0xfc, 0x92, 0x06, 0xb9, 0x73, 0x55, 0xce, 0xab, 0x35, 0xa6, 0x5b, 0x4d, 0x47, 0xb7,
	0x1a, 0x0d, 0xee, 0x5b, 0xc2, 0x0e, 0x76, 0x2f, 0x55, 0xb8, 0x57, 0xe7, 0x9e, 0x5e, 0xb6, 0x3c,
	0x26, 0xe3, 0x74, 0xa3, 0x36, 0xad, 0xaa, 0xd3, 0x10, 0x60, 0xc0, 0x6e, 0x8c, 0x66, 0xd8, 0xb4,
	0x5c, 0xab, 0x1e, 0xfa, 0xbc, 0x38, 0x1a, 0x07, 0x4b, 0x00, 0xbc, 0x30, 0x1a, 0x58, 0x76, 0x6c,
	0x09, 0xa2, 0x2b, 0x98, 0x7c, 0x10, 0xf0, 0xba, 0x25, 0x42, 0x98, 0x6c, 0xaf, 0xc5, 0x3c, 0x9f,
	0xde, 0xc5, 0xcb, 0xca, 0xaa, 0xd7, 0xe4, 0x0d, 0x8f, 0x91, 0x37, 0xf1, 0xac, 0xa4, 0x92, 0x45,
	0xeb, 0xa8, 0x98, 0x2e, 0xbd, 0xa0, 0x8d, 0x94, 0x4b, 0x93, 0xa6, 0xc6, 0xcc, 0x93, 0xc3, 0xc2,
	0x94, 0x09, 0x66, 0xf4, 0x26, 0xf8, 0xbd, 0x2e, 0xf1, 0x10, 0x8e, 0x9c, 0xc7, 0x18, 0x3c, 0xec,
	0x3a, 0xb6, 0xf0, 0x3d, 0x63, 0x2e, 0xc0, 0xca, 0x8e, 0x4d, 0xb2, 0x78, 0xee, 0xa1, 0xe3, 0xf9,
	0xdc, 0x6d, 0x67, 0x53, 0xeb, 0xa8, 0x38, 0x6f, 0x86, 0x7f, 0x69, 0x0d, 0xaf, 0xa8, 0xfe, 0x80,
	0xe8, 0x6d, 0x3c, 0x07, 0xe6, 0xc0, 0x94, 0x8e, 0x61, 0x0a, 0xc6, 0xc6, 0x5a, 0x40, 0xf5, 0xe4,
	0xb0, 0xb0, 0xd8, 0xb6, 0xea, 0xb5, 0x6b, 0x14, 0x90, 0xd4, 0x0c, 0x5d, 0xd1, 0x2f, 0x90, 0x1a,
	0x2e, 0x94, 0xab, 0x9f, 0x20, 0x52, 0x08, 0x92, 0xfb, 0x18, 0xf7, 0x0a, 0x2d, 0xd8, 0xa7, 0x4b,
	0x1b, 0x9a, 0xec, 0x0a, 0x2d, 0xe8, 0x0a, 0x4d, 0x76, 0x5f, 0x4f, 0xb5, 0x2a, 0x03, 0xaf, 0xc6,
	0xea, 0xc9, 0x61, 0x61, 0x49, 0x72, 0xe9, 0xf9, 0xa0, 0x66, 0x9f, 0x43, 0x7a, 0x80, 0xf0, 0xea,
	0x00, 0x23, 0x50, 0xe0, 0x1e, 0x9e, 0x0f, 0x53, 0xcd, 0xa2, 0xf5, 0xe9, 0x84, 0x12, 0x9c, 0x01,
	0x09, 0x9e, 0x55, 0x24, 0xf0, 0xa8, 0xd9, 0x75, 0x46, 0x3e, 0x8a, 0xc8, 0xe8, 0x62, 0x6c, 0x46,
	0x92, 0x55, 0x92, 0x94, 0x1e, 0x23, 0xfc, 0x9c, 0x48, 0xc9, 0x70, 0xec, 0xae, 0xc0, 0x6b, 0x78,
	0xb6, 0xec, 0xd8, 0x36, 0x73, 0x85, 0xbe, 0x0b, 0x26, 0xfc, 0x1b, 0xdd, 0x19, 0x03, 0xc2, 0x4f,
	0x9f, 0xb6, 0xf0, 0x7f, 0x22, 0xbc, 0xd4, 0xc7, 0x12, 0x44, 0x7f, 0x59, 0xa5, 0x69, 0x2c, 0x9d,
	0x1c, 0x16, 0x32, 0xd2, 0x91, 0x5c, 0xa7, 0x5d, 0xe6, 0xef, 0xe0, 0x99, 0xb2, 0x63, 0x7b, 0xd9,
	0x94, 0xa8, 0x4d, 0x7e, 0x4c, 0x6d, 0x0c, 0xc7, 0x36, 0x96, 0xa1, 0x2e, 0xe9, 0xae, 0x33, 0x8f,
	0x9a, 0xc2, 0xc1, 0x40, 0x3d, 0xa6, 0x4f, 0xbd, 0x1e, 0xcf, 0xe3, 0xb3, 0xfd, 0x1d, 0xa6, 0xce,
	0x89, 0xcf, 0x11, 0xce, 0x45, 0xed, 0x82, 0x1e, 0x0d, 0xbc, 0x18, 0x9e, 0x6b, 0x65, 0x6e, 0x14,
	0xe3, 0x5b, 0x11, 0xc6, 0xc7, 0x79, 0x48, 0x7c, 0x55, 0x69, 0x48, 0xf0, 0x46, 0xcd, 0x8c, 0xd5,
	0x8f, 0xa6, 0x5f, 0x21, 0x20, 0x7b, 0xc7, 0x63, 0xee, 0x0d, 0xa7, 0xee, 0xf8, 0x49, 0x9a, 0xe8,
	0x29, 0x9f, 0xd1, 0x6f, 0x43, 0x8d, 0x06, 0x48, 0x81, 0x46, 0x6d, 0xbc, 0x58, 0x0b, 0x16, 0xdf,
	0x77, 0x6d, 0xe6, 0x06, 0x3b, 0xa0, 0xd1, 0x95, 0x31, 0x1a, 0xdd, 0x50, 0x0c, 0xde, 0xe6, 0x6e,
	0xe0, 0xda, 0x28, 0x80, 0x56, 0x67, 0x24, 0x1f, 0xe1, 0x75, 0x97, 0x07, 0xa8, 0x5d, 0xd9, 0x30,
	0x03, 0x81, 0xe8, 0xdf, 0x08, 0xd3, 0x61, 0x66, 0x46, 0xfb, 0xba, 0xe7, 0x31, 0x7f, 0xe7, 0xad,
	0x38, 0xdd, 0x34, 0xbc, 0x5c, 0xe1, 0xb5, 0x9a, 0xe5, 0x33, 0xd7, 0xaa, 0xed, 0xfa, 0xfc, 0x63,
	0x26, 0xc6, 0x77, 0x4a, 0x8c, 0xef, 0xa5, 0xde, 0xd6, 0xed, 0x60, 0x67, 0xc7, 0x26, 0x14, 0x67,
	0x6c, 0x56, 0xf6, 0x7b, 0xc8, 0x69, 0x81, 0x4c, 0x07, 0x8b, 0x21, 0x46, 0xad, 0xc5, 0xcc, 0x69,
	0xd7, 0xe2, 0x71, 0x0a, 0x5f, 0x18, 0x9b, 0xf1, 0xe4, 0x07, 0x79, 0x6f, 0xa8, 0x7e, 0xf2, 0x48,
	0x17, 0x93, 0xd6, 0x6f, 0xe2, 0xba, 0x3d, 0xf5, 0x23, 0xff, 0x4b, 0x78, 0xab, 0x0c, 0x1d, 0xa1,
	0x11, 0x25, 0x47, 0x89, 0x4b, 0x9e, 0x8a, 0x2b, 0xf9, 0xa9, 0x4f, 0xea, 0xbf, 0x10, 0x5e, 0x1b,
	0x4c, 0x06, 0xaa, 0xfc, 0xff, 0x2b, 0x5d, 0xe9, 0xbb, 0x34, 0x7e, 0x46, 0x64, 0x4b, 0x3e, 0x43,
	0x78, 0x56, 0x8e, 0x45, 0xb2, 0x39, 0x26, 0x9f, 0xe1, 0xc7, 0x5f, 0x4e, 0x4b, 0x0a, 0x97, 0xb4,
	0x28, 0xfd, 0xf4, 0xd7, 0x3f, 0xbe, 0x4e, 0x9d, 0x23, 0x39, 0x7d, 0xe0, 0xc1, 0xa9, 0x3f, 0x2a,
	0xc1, 0xd3, 0x95, 0xfc, 0x80, 0xf0, 0x1c, 0x4c, 0x76, 0x12, 0xeb, 0x5f, 0x7d, 0x1d, 0xe6, 0xf4,
	0xc4, 0x78, 0x20, 0x74, 0x4d, 0x10, 0xda, 0x26, 0xa5, 0x28, 0x42, 0xf0, 0x5b, 0xef, 0xf4, 0x5e,
	0x9c, 0xfb, 0x7a, 0x07, 0x9e, 0x0d, 0xfb, 0xe4, 0x7b, 0x84, 0xe7, 0xc3, 0xc7, 0x14, 0x49, 0x1a,
	0xb9, 0x2b, 0xdd, 0x95, 0xe4, 0x06, 0xc0, 0x55, 0x13, 0x5c, 0x8b, 0x64, 0x63, 0x0c, 0x57, 0xaf,
	0x8f, 0xdf, 0x37, 0x08, 0xcf, 0x88, 0x4e, 0xba, 0x1c, 0x17, 0xaa, 0xef, 0xdc, 0xe6, 0x5e, 0x49,
	0x06, 0x06, 0x4e, 0x57, 0x05, 0xa7, 0x4d, 0x72, 0x39, 0x8a, 0x53, 0xd0, 0xd7, 0x7a, 0x47, 0x0e,
	0xbf, 0x7e, 0xe1, 0x7e, 0x44, 0x38, 0xa3, 0xdc, 0xdd, 0x64, 0x3b, 0xa1, 0x18, 0x6a, 0xf7, 0xbd,
	0x3a, 0xa1, 0x15, 0x70, 0xbe, 0x24, 0x38, 0xbf, 0x48, 0xe8, 0x18, 0x1d, 0xe1, 0xd9, 0x40, 0x7e,
	0x42, 0x38, 0xa3, 0x5c, 0x00, 0xf1, 0x54, 0xa3, 0x1e, 0x14, 0xf1, 0x54, 0x23, 0x6f, 0x7c, 0xfa,
	0x9a, 0xa0, 0xba, 0x45, 0xf4, 0x28, 0xaa, 0x2d, 0x8f, 0xb9, 0x62, 0x66, 0x88, 0x29, 0xa2, 0x88,
	0x4d, 0xfe, 0x41, 0x78, 0x2d, 0xfa, 0xe2, 0x22, 0xaf, 0x4f, 0x44, 0x65, 0xf0, 0x8a, 0xcf, 0xbd,
	0xf1, 0x5f, 0xcd, 0x21, 0xa5, 0xfb, 0x22, 0xa5, 0x7b, 0xe4, 0xce, 0x84, 0x29, 0xe9, 0x9d, 0x88,
	0xeb, 0x64, 0x5f, 0xef, 0x28, 0x97, 0xc6, 0x3e, 0xf9, 0x19, 0xe1, 0x85, 0x5e, 0xb1, 0x62, 0x0f,
	0xd9, 0x50, 0xa1, 0xb6, 0x26, 0xb0, 0x80, 0x8c, 0x6e, 0x89, 0x8c, 0xde, 0x23, 0xef, 0x46, 0x65,
	0x34, 0x98, 0x4d, 0x92, 0x24, 0x8c, 0x9b, 0x4f, 0x8e, 0xf2, 0xe8, 0xe0, 0x28, 0x8f, 0x7e, 0x3f,
	0xca, 0xa3, 0x2f, 0x8f, 0xf3, 0x53, 0x07, 0xc7, 0xf9, 0xa9, 0xdf, 0x8e, 0xf3, 0x53, 0x1f, 0x6e,
	0x57, 0x1d, 0xff, 0x61, 0xab, 0x1c, 0x90, 0x84, 0x68, 0x9b, 0xfc, 0xc1, 0x03, 0xa7, 0xe2, 0x58,
	0xb5, 0x30, 0xba, 0xf2, 0x15, 0xef, 0xb7, 0x9b, 0xcc, 0x2b, 0xcf, 0x8a, 0x0f, 0xf8, 0xab, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x15, 0x15, 0xc9, 0xbd, 0xda, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Auction(ctx context.Context, in *QueryAuctionRequest, opts ...grpc.CallOption) (*QueryAuctionResponse, error)
	Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error)
	Bids(ctx context.Context, in *QueryBidsRequest, opts ...grpc.CallOption) (*QueryBidsResponse, error)
	AuctionParams(ctx context.Context, in *QueryAuctionParamsRequest, opts ...grpc.CallOption) (*QueryAuctionParamsResponse, error)
	UserLimitBids(ctx context.Context, in *QueryUserLimitBidsRequest, opts ...grpc.CallOption) (*QueryUserLimitBidsResponse, error)
	UserLimitBidsByAssetID(ctx context.Context, in *QueryUserLimitBidsByAssetIDRequest, opts ...grpc.CallOption) (*QueryUserLimitBidsByAssetIDResponse, error)
	LimitBids(ctx context.Context, in *QueryLimitBidsRequest, opts ...grpc.CallOption) (*QueryLimitBidsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Auction(ctx context.Context, in *QueryAuctionRequest, opts ...grpc.CallOption) (*QueryAuctionResponse, error) {
	out := new(QueryAuctionResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/Auction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Auctions(ctx context.Context, in *QueryAuctionsRequest, opts ...grpc.CallOption) (*QueryAuctionsResponse, error) {
	out := new(QueryAuctionsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/Auctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bids(ctx context.Context, in *QueryBidsRequest, opts ...grpc.CallOption) (*QueryBidsResponse, error) {
	out := new(QueryBidsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/Bids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionParams(ctx context.Context, in *QueryAuctionParamsRequest, opts ...grpc.CallOption) (*QueryAuctionParamsResponse, error) {
	out := new(QueryAuctionParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/AuctionParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserLimitBids(ctx context.Context, in *QueryUserLimitBidsRequest, opts ...grpc.CallOption) (*QueryUserLimitBidsResponse, error) {
	out := new(QueryUserLimitBidsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/UserLimitBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserLimitBidsByAssetID(ctx context.Context, in *QueryUserLimitBidsByAssetIDRequest, opts ...grpc.CallOption) (*QueryUserLimitBidsByAssetIDResponse, error) {
	out := new(QueryUserLimitBidsByAssetIDResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/UserLimitBidsByAssetID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LimitBids(ctx context.Context, in *QueryLimitBidsRequest, opts ...grpc.CallOption) (*QueryLimitBidsResponse, error) {
	out := new(QueryLimitBidsResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Query/LimitBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Auction(context.Context, *QueryAuctionRequest) (*QueryAuctionResponse, error)
	Auctions(context.Context, *QueryAuctionsRequest) (*QueryAuctionsResponse, error)
	Bids(context.Context, *QueryBidsRequest) (*QueryBidsResponse, error)
	AuctionParams(context.Context, *QueryAuctionParamsRequest) (*QueryAuctionParamsResponse, error)
	UserLimitBids(context.Context, *QueryUserLimitBidsRequest) (*QueryUserLimitBidsResponse, error)
	UserLimitBidsByAssetID(context.Context, *QueryUserLimitBidsByAssetIDRequest) (*QueryUserLimitBidsByAssetIDResponse, error)
	LimitBids(context.Context, *QueryLimitBidsRequest) (*QueryLimitBidsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Auction(ctx context.Context, req *QueryAuctionRequest) (*QueryAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auction not implemented")
}
func (*UnimplementedQueryServer) Auctions(ctx context.Context, req *QueryAuctionsRequest) (*QueryAuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auctions not implemented")
}
func (*UnimplementedQueryServer) Bids(ctx context.Context, req *QueryBidsRequest) (*QueryBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bids not implemented")
}
func (*UnimplementedQueryServer) AuctionParams(ctx context.Context, req *QueryAuctionParamsRequest) (*QueryAuctionParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionParams not implemented")
}
func (*UnimplementedQueryServer) UserLimitBids(ctx context.Context, req *QueryUserLimitBidsRequest) (*QueryUserLimitBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLimitBids not implemented")
}
func (*UnimplementedQueryServer) UserLimitBidsByAssetID(ctx context.Context, req *QueryUserLimitBidsByAssetIDRequest) (*QueryUserLimitBidsByAssetIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLimitBidsByAssetID not implemented")
}
func (*UnimplementedQueryServer) LimitBids(ctx context.Context, req *QueryLimitBidsRequest) (*QueryLimitBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LimitBids not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Auction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/Auction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auction(ctx, req.(*QueryAuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Auctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Auctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/Auctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Auctions(ctx, req.(*QueryAuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/Bids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bids(ctx, req.(*QueryBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAuctionParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/AuctionParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionParams(ctx, req.(*QueryAuctionParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserLimitBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserLimitBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserLimitBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/UserLimitBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserLimitBids(ctx, req.(*QueryUserLimitBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserLimitBidsByAssetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserLimitBidsByAssetIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserLimitBidsByAssetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/UserLimitBidsByAssetID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserLimitBidsByAssetID(ctx, req.(*QueryUserLimitBidsByAssetIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LimitBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLimitBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LimitBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Query/LimitBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LimitBids(ctx, req.(*QueryLimitBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.auctionsV2.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Auction",
			Handler:    _Query_Auction_Handler,
		},
		{
			MethodName: "Auctions",
			Handler:    _Query_Auctions_Handler,
		},
		{
			MethodName: "Bids",
			Handler:    _Query_Bids_Handler,
		},
		{
			MethodName: "AuctionParams",
			Handler:    _Query_AuctionParams_Handler,
		},
		{
			MethodName: "UserLimitBids",
			Handler:    _Query_UserLimitBids_Handler,
		},
		{
			MethodName: "UserLimitBidsByAssetID",
			Handler:    _Query_UserLimitBidsByAssetID_Handler,
		},
		{
			MethodName: "LimitBids",
			Handler:    _Query_LimitBids_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/auctionsV2/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.AuctionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Auctions) > 0 {
		for iNdEx := len(m.Auctions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Auctions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.History {
		i--
		if m.History {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAuctionParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAuctionParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAuctionParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAuctionParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AuctionParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserLimitBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserLimitBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserLimitBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserLimitBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserLimitBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserLimitBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LimitOrderBids.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserLimitBidsByAssetIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserLimitBidsByAssetIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserLimitBidsByAssetIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DebtTokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DebtTokenId))
		i--
		dAtA[i] = 0x18
	}
	if m.CollateralTokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollateralTokenId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserLimitBidsByAssetIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserLimitBidsByAssetIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserLimitBidsByAssetIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LimitOrderBids) > 0 {
		for iNdEx := len(m.LimitOrderBids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderBids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLimitBidsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLimitBidsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLimitBidsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DebtTokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DebtTokenId))
		i--
		dAtA[i] = 0x10
	}
	if m.CollateralTokenId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollateralTokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLimitBidsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLimitBidsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLimitBidsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LimitOrderBids) > 0 {
		for iNdEx := len(m.LimitOrderBids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderBids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovQuery(uint64(m.AuctionId))
	}
	if m.History {
		n += 2
	}
	return n
}

func (m *QueryAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Auction.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAuctionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.History {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Auctions) > 0 {
		for _, e := range m.Auctions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.History {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAuctionParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAuctionParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AuctionParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserLimitBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserLimitBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LimitOrderBids.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserLimitBidsByAssetIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CollateralTokenId != 0 {
		n += 1 + sovQuery(uint64(m.CollateralTokenId))
	}
	if m.DebtTokenId != 0 {
		n += 1 + sovQuery(uint64(m.DebtTokenId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserLimitBidsByAssetIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.LimitOrderBids) > 0 {
		for _, e := range m.LimitOrderBids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLimitBidsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollateralTokenId != 0 {
		n += 1 + sovQuery(uint64(m.CollateralTokenId))
	}
	if m.DebtTokenId != 0 {
		n += 1 + sovQuery(uint64(m.DebtTokenId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLimitBidsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LimitOrderBids) > 0 {
		for _, e := range m.LimitOrderBids {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctions = append(m.Auctions, Auction{})
			if err := m.Auctions[len(m.Auctions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.History = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAuctionParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAuctionParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAuctionParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserLimitBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserLimitBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserLimitBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserLimitBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserLimitBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserLimitBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitOrderBids.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserLimitBidsByAssetIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserLimitBidsByAssetIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserLimitBidsByAssetIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralTokenId", wireType)
			}
			m.CollateralTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtTokenId", wireType)
			}
			m.DebtTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserLimitBidsByAssetIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserLimitBidsByAssetIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserLimitBidsByAssetIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderBids = append(m.LimitOrderBids, LimitOrderBid{})
			if err := m.LimitOrderBids[len(m.LimitOrderBids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLimitBidsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLimitBidsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLimitBidsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralTokenId", wireType)
			}
			m.CollateralTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtTokenId", wireType)
			}
			m.DebtTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLimitBidsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLimitBidsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLimitBidsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderBids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderBids = append(m.LimitOrderBids, LimitOrderBid{})
			if err := m.LimitOrderBids[len(m.LimitOrderBids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
