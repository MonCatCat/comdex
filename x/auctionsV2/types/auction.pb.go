// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auctionsV2/v1beta1/auction.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Auctions struct {
	AuctionId                 uint64                                  `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	OutflowTokenInitAmount    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=outflow_token_init_amount,json=outflowTokenInitAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token_init_amount" yaml:"outflow_token_init_amount"`
	OutflowTokenCurrentAmount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=outflow_token_current_amount,json=outflowTokenCurrentAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"outflow_token_current_amount" yaml:"outflow_token_current_amount"`
	InflowTokenTargetAmount   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=inflow_token_target_amount,json=inflowTokenTargetAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token_target_amount" yaml:"inflow_token_target_amount"`
	InflowTokenCurrentAmount  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,5,opt,name=inflow_token_current_amount,json=inflowTokenCurrentAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"inflow_token_current_amount" yaml:"inflow_token_current_amount"`
	ActiveBiddingId           uint64                                  `protobuf:"varint,6,opt,name=active_bidding_id,json=activeBiddingId,proto3" json:"active_bidding_id,omitempty" yaml:"active_bidding_id"`
	BiddingIds                []*BidOwnerMapping                      `protobuf:"bytes,7,rep,name=bidding_ids,json=biddingIds,proto3" json:"bidding_ids,omitempty" yaml:"bidding_ids"`
	BidFactor                 github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,8,opt,name=bid_factor,json=bidFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bid_factor" yaml:"bid_factor"`
	// price indicator only for dutch auctions
	OutflowTokenInitialPrice github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,9,opt,name=outflow_token_initial_price,json=outflowTokenInitialPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_initial_price" yaml:"outflow_token_initial_price"`
	OutflowTokenCurrentPrice github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,10,opt,name=outflow_token_current_price,json=outflowTokenCurrentPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_current_price" yaml:"outflow_token_current_price"`
	OutflowTokenEndPrice     github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,11,opt,name=outflow_token_end_price,json=outflowTokenEndPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"outflow_token_end_price" yaml:"outflow_token_end_price"`
	InflowTokenCurrentPrice  github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,12,opt,name=inflow_token_current_price,json=inflowTokenCurrentPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflow_token_current_price" yaml:"inflow_token_current_price"`
	LockedVaultId            uint64                                        `protobuf:"varint,13,opt,name=locked_vault_id,json=lockedVaultId,proto3" json:"locked_vault_id,omitempty" yaml:"locked_vault_id"`
	VaultOwner               github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,14,opt,name=vault_owner,json=vaultOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"vault_owner,omitempty" yaml:"vault_owner"`
	StartTime                time.Time                                     `protobuf:"bytes,15,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	EndTime                  time.Time                                     `protobuf:"bytes,16,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	BidEndTime               time.Time                                     `protobuf:"bytes,17,opt,name=bid_end_time,json=bidEndTime,proto3,stdtime" json:"bid_end_time" yaml:"bid_end_time"`
	AppId                    uint64                                        `protobuf:"varint,18,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AuctionMappingId         uint64                                        `protobuf:"varint,19,opt,name=auction_mapping_id,json=auctionMappingId,proto3" json:"auction_mapping_id,omitempty" yaml:"auction_mapping_id"`
	AuctionStatus            uint64                                        `protobuf:"varint,20,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
}

func (m *Auctions) Reset()         { *m = Auctions{} }
func (m *Auctions) String() string { return proto.CompactTextString(m) }
func (*Auctions) ProtoMessage()    {}
func (*Auctions) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee47f5a405fa8ba, []int{0}
}
func (m *Auctions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Auctions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Auctions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Auctions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Auctions.Merge(m, src)
}
func (m *Auctions) XXX_Size() int {
	return m.Size()
}
func (m *Auctions) XXX_DiscardUnknown() {
	xxx_messageInfo_Auctions.DiscardUnknown(m)
}

var xxx_messageInfo_Auctions proto.InternalMessageInfo

func (m *Auctions) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Auctions) GetOutflowTokenInitAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.OutflowTokenInitAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Auctions) GetOutflowTokenCurrentAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.OutflowTokenCurrentAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Auctions) GetInflowTokenTargetAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.InflowTokenTargetAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Auctions) GetInflowTokenCurrentAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.InflowTokenCurrentAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Auctions) GetActiveBiddingId() uint64 {
	if m != nil {
		return m.ActiveBiddingId
	}
	return 0
}

func (m *Auctions) GetBiddingIds() []*BidOwnerMapping {
	if m != nil {
		return m.BiddingIds
	}
	return nil
}

func (m *Auctions) GetLockedVaultId() uint64 {
	if m != nil {
		return m.LockedVaultId
	}
	return 0
}

func (m *Auctions) GetVaultOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.VaultOwner
	}
	return ""
}

func (m *Auctions) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Auctions) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Auctions) GetBidEndTime() time.Time {
	if m != nil {
		return m.BidEndTime
	}
	return time.Time{}
}

func (m *Auctions) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *Auctions) GetAuctionMappingId() uint64 {
	if m != nil {
		return m.AuctionMappingId
	}
	return 0
}

func (m *Auctions) GetAuctionStatus() uint64 {
	if m != nil {
		return m.AuctionStatus
	}
	return 0
}

type BidOwnerMapping struct {
	BidId    uint64 `protobuf:"varint,1,opt,name=bid_id,json=bidId,proto3" json:"bid_id,omitempty"`
	BidOwner string `protobuf:"bytes,2,opt,name=bid_owner,json=bidOwner,proto3" json:"bid_owner,omitempty"`
}

func (m *BidOwnerMapping) Reset()         { *m = BidOwnerMapping{} }
func (m *BidOwnerMapping) String() string { return proto.CompactTextString(m) }
func (*BidOwnerMapping) ProtoMessage()    {}
func (*BidOwnerMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_8ee47f5a405fa8ba, []int{1}
}
func (m *BidOwnerMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidOwnerMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidOwnerMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidOwnerMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidOwnerMapping.Merge(m, src)
}
func (m *BidOwnerMapping) XXX_Size() int {
	return m.Size()
}
func (m *BidOwnerMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_BidOwnerMapping.DiscardUnknown(m)
}

var xxx_messageInfo_BidOwnerMapping proto.InternalMessageInfo

func (m *BidOwnerMapping) GetBidId() uint64 {
	if m != nil {
		return m.BidId
	}
	return 0
}

func (m *BidOwnerMapping) GetBidOwner() string {
	if m != nil {
		return m.BidOwner
	}
	return ""
}

func init() {
	proto.RegisterType((*Auctions)(nil), "comdex.auctionsV2.v1beta1.Auctions")
	proto.RegisterType((*BidOwnerMapping)(nil), "comdex.auctionsV2.v1beta1.bidOwnerMapping")
}

func init() {
	proto.RegisterFile("comdex/auctionsV2/v1beta1/auction.proto", fileDescriptor_8ee47f5a405fa8ba)
}

var fileDescriptor_8ee47f5a405fa8ba = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0xb4, 0x49, 0xe3, 0x71, 0x53, 0xd7, 0xd3, 0x7c, 0xac, 0x9d, 0xd6, 0xeb, 0x2e,
	0x12, 0xb5, 0x90, 0xb2, 0x56, 0x43, 0xaf, 0xb8, 0x22, 0x0e, 0x01, 0x2c, 0x04, 0x54, 0x1b, 0x13,
	0x21, 0x24, 0xb4, 0x9a, 0xdd, 0x19, 0xbb, 0xa3, 0xd8, 0x3b, 0xab, 0xdd, 0x71, 0x4a, 0x9f, 0x80,
	0xdb, 0x48, 0x3c, 0x05, 0x12, 0x12, 0x12, 0x4f, 0xd1, 0xcb, 0x8a, 0x2b, 0xc4, 0xc5, 0x82, 0x92,
	0x37, 0xf0, 0x25, 0x57, 0x68, 0x3e, 0xd6, 0xeb, 0x75, 0x13, 0x1c, 0x0b, 0xae, 0xec, 0x39, 0x73,
	0xe6, 0x7f, 0x7e, 0x33, 0x7b, 0xce, 0x99, 0x01, 0x4f, 0x02, 0x36, 0xc2, 0xe4, 0xfb, 0x36, 0x1a,
	0x07, 0x9c, 0xb2, 0x30, 0x39, 0xd9, 0x6f, 0x9f, 0x3d, 0xf5, 0x09, 0x47, 0x4f, 0x33, 0x93, 0x13,
	0xc5, 0x8c, 0x33, 0x58, 0x53, 0x8e, 0x4e, 0xee, 0xe8, 0x68, 0xc7, 0xfa, 0xe6, 0x80, 0x0d, 0x98,
	0xf4, 0x6a, 0x8b, 0x7f, 0x6a, 0x41, 0xdd, 0x1a, 0x30, 0x36, 0x18, 0x92, 0xb6, 0x1c, 0xf9, 0xe3,
	0x7e, 0x9b, 0xd3, 0x11, 0x49, 0x38, 0x1a, 0x45, 0xda, 0xa1, 0x11, 0xb0, 0x64, 0xc4, 0x92, 0xb6,
	0x8f, 0x12, 0x32, 0x0d, 0x1a, 0x30, 0xaa, 0x23, 0xda, 0xbf, 0x55, 0xc1, 0xfa, 0x81, 0x8e, 0x06,
	0x9f, 0x01, 0xa0, 0x23, 0x7b, 0x14, 0x9b, 0x46, 0xd3, 0x68, 0xdd, 0xee, 0x6c, 0x4d, 0x52, 0xab,
	0xfa, 0x0a, 0x8d, 0x86, 0x1f, 0xda, 0xf9, 0x9c, 0xed, 0x96, 0xf4, 0xa0, 0x8b, 0xe1, 0x4f, 0x06,
	0xa8, 0xb1, 0x31, 0xef, 0x0f, 0xd9, 0x4b, 0x8f, 0xb3, 0x53, 0x12, 0x7a, 0x34, 0xa4, 0xdc, 0x43,
	0x23, 0x36, 0x0e, 0xb9, 0xf9, 0x4e, 0xd3, 0x68, 0x95, 0xf7, 0x6b, 0x8e, 0xe2, 0x70, 0x04, 0x47,
	0xb6, 0x27, 0xe7, 0x90, 0xd1, 0xb0, 0x73, 0xfc, 0x3a, 0xb5, 0x56, 0x26, 0xa9, 0xd5, 0x54, 0x41,
	0xae, 0x55, 0xb2, 0xff, 0x4e, 0xad, 0x27, 0x03, 0xca, 0x5f, 0x8c, 0x7d, 0x27, 0x60, 0xa3, 0xb6,
	0xde, 0x98, 0xfa, 0xd9, 0x4b, 0xf0, 0x69, 0x9b, 0xbf, 0x8a, 0x48, 0x22, 0x45, 0xdd, 0x6d, 0x2d,
	0xd3, 0x13, 0x2a, 0xdd, 0x90, 0xf2, 0x03, 0xa9, 0x01, 0x7f, 0x35, 0xc0, 0xc3, 0x62, 0x84, 0x60,
	0x1c, 0xc7, 0x24, 0x9c, 0xe2, 0xde, 0x5a, 0x84, 0x7b, 0xa2, 0x71, 0xdf, 0xbd, 0x0a, 0xb7, 0x28,
	0xb6, 0x14, 0x71, 0x6d, 0x96, 0xf8, 0x50, 0xe9, 0x68, 0xe8, 0x9f, 0x0d, 0x50, 0xa7, 0xe1, 0x4c,
	0x18, 0x8e, 0xe2, 0x01, 0x99, 0x22, 0xdf, 0x5e, 0x84, 0xdc, 0xd3, 0xc8, 0x8f, 0x15, 0xf2, 0xf5,
	0x52, 0x4b, 0x01, 0xef, 0x28, 0x1d, 0xc9, 0xdb, 0x93, 0x2a, 0x1a, 0xf7, 0x17, 0x03, 0xec, 0x16,
	0x62, 0xcc, 0x1d, 0xf1, 0xea, 0x22, 0xde, 0xaf, 0x35, 0xaf, 0x7d, 0x05, 0xef, 0x7f, 0x38, 0x61,
	0x73, 0x06, 0xb8, 0x78, 0xc0, 0x9f, 0x81, 0x2a, 0x0a, 0x38, 0x3d, 0x23, 0x9e, 0x4f, 0x31, 0xa6,
	0xe1, 0x40, 0xa4, 0xff, 0x9a, 0x4c, 0xff, 0x87, 0x93, 0xd4, 0x32, 0x75, 0xfa, 0xcf, 0xbb, 0xd8,
	0x6e, 0x45, 0xd9, 0x3a, 0xca, 0xd4, 0xc5, 0x30, 0x00, 0xe5, 0x7c, 0x3e, 0x31, 0xef, 0x34, 0x6f,
	0xb5, 0xca, 0xfb, 0xef, 0x3b, 0xd7, 0x96, 0xb5, 0xe3, 0x53, 0xfc, 0xd5, 0xcb, 0x90, 0xc4, 0x5f,
	0xa0, 0x28, 0xa2, 0xe1, 0xa0, 0xb3, 0x3d, 0x49, 0x2d, 0xa8, 0xe2, 0xcd, 0x08, 0xd9, 0x2e, 0xf0,
	0xb3, 0x18, 0x09, 0xf4, 0x81, 0x18, 0x79, 0x7d, 0x14, 0x70, 0x16, 0x9b, 0xeb, 0x4d, 0xa3, 0x55,
	0xea, 0x1c, 0x8a, 0x33, 0xfb, 0x23, 0xb5, 0xde, 0xbb, 0xc1, 0x69, 0x7c, 0x4c, 0x82, 0xbc, 0xa8,
	0x73, 0x25, 0xdb, 0x2d, 0xf9, 0x14, 0x7f, 0x22, 0xff, 0xc3, 0x1f, 0x0d, 0xb0, 0xfb, 0x76, 0x29,
	0x52, 0x34, 0xf4, 0xa2, 0x98, 0x06, 0xc4, 0x2c, 0xc9, 0xa8, 0xbd, 0xa5, 0xa3, 0xda, 0xd7, 0x55,
	0xf9, 0x54, 0xda, 0x76, 0xcd, 0xf9, 0xe2, 0xa5, 0x68, 0xf8, 0x5c, 0x4c, 0x5d, 0x41, 0x95, 0xe5,
	0x83, 0xa2, 0x02, 0xff, 0x27, 0x55, 0x41, 0x7a, 0x8e, 0x4a, 0xe7, 0x8f, 0xa2, 0xfa, 0xc1, 0x00,
	0x3b, 0xc5, 0xa5, 0x24, 0xc4, 0x9a, 0xa8, 0x2c, 0x89, 0x9e, 0x2f, 0x4d, 0xd4, 0xb8, 0x8a, 0x68,
	0x2a, 0x6b, 0xbb, 0x9b, 0xb3, 0x34, 0x47, 0x21, 0x56, 0x24, 0xe7, 0xf3, 0x9d, 0xa2, 0x78, 0x3c,
	0x77, 0x25, 0xcc, 0xf1, 0xd2, 0x30, 0x8f, 0xff, 0xa5, 0x10, 0x35, 0xcf, 0xce, 0xdb, 0xc5, 0xa5,
	0x90, 0x3a, 0xa0, 0x32, 0x64, 0xc1, 0x29, 0xc1, 0xde, 0x19, 0x1a, 0x0f, 0xb9, 0xa8, 0xac, 0x0d,
	0x59, 0x59, 0xf5, 0x49, 0x6a, 0x6d, 0x2b, 0xe1, 0x39, 0x07, 0xdb, 0xdd, 0x50, 0x96, 0x13, 0x61,
	0xe8, 0x62, 0xf8, 0x02, 0x94, 0xd5, 0x1c, 0x13, 0xa5, 0x62, 0xde, 0x93, 0xdb, 0xf8, 0x34, 0xaf,
	0x94, 0x99, 0x49, 0xd1, 0x11, 0xf6, 0x6e, 0xb0, 0xb1, 0x83, 0x20, 0x38, 0xc0, 0x38, 0x26, 0x49,
	0xe2, 0x02, 0xb9, 0x5c, 0x56, 0x21, 0xfc, 0x06, 0x80, 0x84, 0xa3, 0x98, 0x7b, 0xe2, 0x1e, 0x35,
	0x2b, 0xb2, 0x53, 0xd5, 0x1d, 0x75, 0xc9, 0x3a, 0xd9, 0x25, 0xeb, 0xf4, 0xb2, 0x4b, 0xb6, 0xf3,
	0x48, 0xb7, 0x2a, 0x5d, 0x4c, 0xf9, 0x5a, 0xfb, 0xfc, 0x4f, 0xcb, 0x70, 0x4b, 0xd2, 0x20, 0xdc,
	0xa1, 0x0b, 0xd6, 0xc5, 0xe7, 0x93, 0xba, 0xf7, 0x17, 0xea, 0xee, 0x6a, 0xdd, 0x8a, 0xd2, 0xcd,
	0x56, 0x2a, 0xd5, 0x3b, 0x24, 0xc4, 0x52, 0xf3, 0x3b, 0x70, 0x57, 0x94, 0xef, 0x54, 0xb7, 0xba,
	0x50, 0xd7, 0xd2, 0xba, 0x0f, 0xf2, 0xe2, 0x2f, 0x6a, 0x8b, 0xce, 0x72, 0xa4, 0xe5, 0x5b, 0x60,
	0x0d, 0x45, 0x91, 0xf8, 0x62, 0x50, 0x7e, 0xb1, 0xea, 0x24, 0xb5, 0x36, 0x74, 0x2f, 0x94, 0x76,
	0xdb, 0x5d, 0x45, 0x51, 0xd4, 0xc5, 0xf0, 0x73, 0x00, 0xb3, 0xc7, 0xc1, 0x48, 0x35, 0x32, 0xb1,
	0xea, 0x81, 0x5c, 0xf5, 0x68, 0x92, 0x5a, 0xb5, 0xe2, 0x03, 0x22, 0xf7, 0xb1, 0xdd, 0xfb, 0xda,
	0xa8, 0x1b, 0x60, 0x17, 0xc3, 0x8f, 0xc0, 0xbd, 0xcc, 0x31, 0xe1, 0x88, 0x8f, 0x13, 0x73, 0x53,
	0x0a, 0xd5, 0x26, 0xa9, 0xb5, 0x55, 0x14, 0x52, 0xf3, 0xb6, 0xbb, 0xa1, 0x0d, 0xc7, 0x6a, 0x7c,
	0x04, 0x2a, 0x73, 0x7d, 0x15, 0x6e, 0x81, 0x35, 0xb1, 0xd9, 0xec, 0x59, 0xe3, 0xae, 0xfa, 0x14,
	0x77, 0x31, 0xdc, 0x05, 0xa2, 0xe7, 0xe9, 0xbc, 0x12, 0x4f, 0x95, 0x92, 0xbb, 0x9e, 0x2d, 0xed,
	0x7c, 0xf9, 0xfa, 0xa2, 0x61, 0xbc, 0xb9, 0x68, 0x18, 0x7f, 0x5d, 0x34, 0x8c, 0xf3, 0xcb, 0xc6,
	0xca, 0x9b, 0xcb, 0xc6, 0xca, 0xef, 0x97, 0x8d, 0x95, 0x6f, 0x9f, 0x15, 0x32, 0x4c, 0xf4, 0xf6,
	0x3d, 0xd6, 0xef, 0xd3, 0x80, 0xa2, 0xa1, 0x1e, 0xb7, 0x0b, 0xaf, 0x3d, 0x99, 0x73, 0xfe, 0x9a,
	0xfc, 0x20, 0x1f, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0x30, 0xe5, 0xc2, 0x55, 0x0f, 0x0a, 0x00,
	0x00,
}

func (m *Auctions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Auctions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Auctions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionStatus != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionStatus))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.AuctionMappingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionMappingId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.AppId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BidEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BidEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAuction(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintAuction(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintAuction(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x7a
	if len(m.VaultOwner) > 0 {
		i -= len(m.VaultOwner)
		copy(dAtA[i:], m.VaultOwner)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.VaultOwner)))
		i--
		dAtA[i] = 0x72
	}
	if m.LockedVaultId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.LockedVaultId))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.InflowTokenCurrentPrice.Size()
		i -= size
		if _, err := m.InflowTokenCurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.OutflowTokenEndPrice.Size()
		i -= size
		if _, err := m.OutflowTokenEndPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.OutflowTokenCurrentPrice.Size()
		i -= size
		if _, err := m.OutflowTokenCurrentPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.OutflowTokenInitialPrice.Size()
		i -= size
		if _, err := m.OutflowTokenInitialPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.BidFactor.Size()
		i -= size
		if _, err := m.BidFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.BiddingIds) > 0 {
		for iNdEx := len(m.BiddingIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BiddingIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ActiveBiddingId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.ActiveBiddingId))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.InflowTokenCurrentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.InflowTokenTargetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.OutflowTokenCurrentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OutflowTokenInitAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BidOwnerMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidOwnerMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidOwnerMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidOwner) > 0 {
		i -= len(m.BidOwner)
		copy(dAtA[i:], m.BidOwner)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.BidOwner)))
		i--
		dAtA[i] = 0x12
	}
	if m.BidId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.BidId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Auctions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.OutflowTokenInitAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenCurrentAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenTargetAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenCurrentAmount.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.ActiveBiddingId != 0 {
		n += 1 + sovAuction(uint64(m.ActiveBiddingId))
	}
	if len(m.BiddingIds) > 0 {
		for _, e := range m.BiddingIds {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	l = m.BidFactor.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenInitialPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenCurrentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.OutflowTokenEndPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.InflowTokenCurrentPrice.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.LockedVaultId != 0 {
		n += 1 + sovAuction(uint64(m.LockedVaultId))
	}
	l = len(m.VaultOwner)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 2 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BidEndTime)
	n += 2 + l + sovAuction(uint64(l))
	if m.AppId != 0 {
		n += 2 + sovAuction(uint64(m.AppId))
	}
	if m.AuctionMappingId != 0 {
		n += 2 + sovAuction(uint64(m.AuctionMappingId))
	}
	if m.AuctionStatus != 0 {
		n += 2 + sovAuction(uint64(m.AuctionStatus))
	}
	return n
}

func (m *BidOwnerMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidId != 0 {
		n += 1 + sovAuction(uint64(m.BidId))
	}
	l = len(m.BidOwner)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Auctions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Auctions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Auctions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenInitAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenInitAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenCurrentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenCurrentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenTargetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenTargetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenCurrentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenCurrentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBiddingId", wireType)
			}
			m.ActiveBiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingIds = append(m.BiddingIds, &BidOwnerMapping{})
			if err := m.BiddingIds[len(m.BiddingIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenInitialPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenInitialPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenCurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenCurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutflowTokenEndPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutflowTokenEndPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflowTokenCurrentPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflowTokenCurrentPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultId", wireType)
			}
			m.LockedVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultOwner = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BidEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMappingId", wireType)
			}
			m.AuctionMappingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionMappingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			m.AuctionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionStatus |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidOwnerMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: bidOwnerMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: bidOwnerMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidId", wireType)
			}
			m.BidId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
