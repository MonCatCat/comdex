// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auctionsV2/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgPlaceMarketBidRequest struct {
	AuctionId uint64     `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder    string     `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgPlaceMarketBidRequest) Reset()         { *m = MsgPlaceMarketBidRequest{} }
func (m *MsgPlaceMarketBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceMarketBidRequest) ProtoMessage()    {}
func (*MsgPlaceMarketBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{0}
}
func (m *MsgPlaceMarketBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceMarketBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceMarketBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceMarketBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceMarketBidRequest.Merge(m, src)
}
func (m *MsgPlaceMarketBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceMarketBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceMarketBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceMarketBidRequest proto.InternalMessageInfo

type MsgPlaceMarketBidResponse struct {
}

func (m *MsgPlaceMarketBidResponse) Reset()         { *m = MsgPlaceMarketBidResponse{} }
func (m *MsgPlaceMarketBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceMarketBidResponse) ProtoMessage()    {}
func (*MsgPlaceMarketBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{1}
}
func (m *MsgPlaceMarketBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceMarketBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceMarketBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceMarketBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceMarketBidResponse.Merge(m, src)
}
func (m *MsgPlaceMarketBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceMarketBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceMarketBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceMarketBidResponse proto.InternalMessageInfo

type MsgDepositLimitBidRequest struct {
	CollateralTokenId uint64                                 `protobuf:"varint,1,opt,name=collateral_token_id,json=collateralTokenId,proto3" json:"collateral_token_id,omitempty"`
	DebtTokenId       uint64                                 `protobuf:"varint,2,opt,name=debt_token_id,json=debtTokenId,proto3" json:"debt_token_id,omitempty"`
	PremiumDiscount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=premium_discount,json=premiumDiscount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"premium_discount" yaml:"premium_discount"`
	Bidder            string                                 `protobuf:"bytes,4,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount            types.Coin                             `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDepositLimitBidRequest) Reset()         { *m = MsgDepositLimitBidRequest{} }
func (m *MsgDepositLimitBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLimitBidRequest) ProtoMessage()    {}
func (*MsgDepositLimitBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{2}
}
func (m *MsgDepositLimitBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLimitBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLimitBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLimitBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLimitBidRequest.Merge(m, src)
}
func (m *MsgDepositLimitBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLimitBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLimitBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLimitBidRequest proto.InternalMessageInfo

type MsgDepositLimitBidResponse struct {
}

func (m *MsgDepositLimitBidResponse) Reset()         { *m = MsgDepositLimitBidResponse{} }
func (m *MsgDepositLimitBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositLimitBidResponse) ProtoMessage()    {}
func (*MsgDepositLimitBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{3}
}
func (m *MsgDepositLimitBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositLimitBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositLimitBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositLimitBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositLimitBidResponse.Merge(m, src)
}
func (m *MsgDepositLimitBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositLimitBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositLimitBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositLimitBidResponse proto.InternalMessageInfo

type MsgCancelLimitBidRequest struct {
	CollateralTokenId uint64                                 `protobuf:"varint,1,opt,name=collateral_token_id,json=collateralTokenId,proto3" json:"collateral_token_id,omitempty"`
	DebtTokenId       uint64                                 `protobuf:"varint,2,opt,name=debt_token_id,json=debtTokenId,proto3" json:"debt_token_id,omitempty"`
	PremiumDiscount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=premium_discount,json=premiumDiscount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"premium_discount" yaml:"premium_discount"`
	Bidder            string                                 `protobuf:"bytes,4,opt,name=bidder,proto3" json:"bidder,omitempty"`
}

func (m *MsgCancelLimitBidRequest) Reset()         { *m = MsgCancelLimitBidRequest{} }
func (m *MsgCancelLimitBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLimitBidRequest) ProtoMessage()    {}
func (*MsgCancelLimitBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{4}
}
func (m *MsgCancelLimitBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLimitBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLimitBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLimitBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLimitBidRequest.Merge(m, src)
}
func (m *MsgCancelLimitBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLimitBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLimitBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLimitBidRequest proto.InternalMessageInfo

type MsgCancelLimitBidResponse struct {
}

func (m *MsgCancelLimitBidResponse) Reset()         { *m = MsgCancelLimitBidResponse{} }
func (m *MsgCancelLimitBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelLimitBidResponse) ProtoMessage()    {}
func (*MsgCancelLimitBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{5}
}
func (m *MsgCancelLimitBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelLimitBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelLimitBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelLimitBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelLimitBidResponse.Merge(m, src)
}
func (m *MsgCancelLimitBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelLimitBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelLimitBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelLimitBidResponse proto.InternalMessageInfo

type MsgWithdrawLimitBidRequest struct {
	CollateralTokenId uint64                                 `protobuf:"varint,1,opt,name=collateral_token_id,json=collateralTokenId,proto3" json:"collateral_token_id,omitempty"`
	DebtTokenId       uint64                                 `protobuf:"varint,2,opt,name=debt_token_id,json=debtTokenId,proto3" json:"debt_token_id,omitempty"`
	PremiumDiscount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=premium_discount,json=premiumDiscount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"premium_discount" yaml:"premium_discount"`
	Bidder            string                                 `protobuf:"bytes,4,opt,name=bidder,proto3" json:"bidder,omitempty"`
	Amount            types.Coin                             `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawLimitBidRequest) Reset()         { *m = MsgWithdrawLimitBidRequest{} }
func (m *MsgWithdrawLimitBidRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLimitBidRequest) ProtoMessage()    {}
func (*MsgWithdrawLimitBidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{6}
}
func (m *MsgWithdrawLimitBidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLimitBidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLimitBidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLimitBidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLimitBidRequest.Merge(m, src)
}
func (m *MsgWithdrawLimitBidRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLimitBidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLimitBidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLimitBidRequest proto.InternalMessageInfo

type MsgWithdrawLimitBidResponse struct {
}

func (m *MsgWithdrawLimitBidResponse) Reset()         { *m = MsgWithdrawLimitBidResponse{} }
func (m *MsgWithdrawLimitBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawLimitBidResponse) ProtoMessage()    {}
func (*MsgWithdrawLimitBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c216a24ef98c1b4, []int{7}
}
func (m *MsgWithdrawLimitBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawLimitBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawLimitBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawLimitBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawLimitBidResponse.Merge(m, src)
}
func (m *MsgWithdrawLimitBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawLimitBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawLimitBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawLimitBidResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgPlaceMarketBidRequest)(nil), "comdex.auctionsV2.v1beta1.MsgPlaceMarketBidRequest")
	proto.RegisterType((*MsgPlaceMarketBidResponse)(nil), "comdex.auctionsV2.v1beta1.MsgPlaceMarketBidResponse")
	proto.RegisterType((*MsgDepositLimitBidRequest)(nil), "comdex.auctionsV2.v1beta1.MsgDepositLimitBidRequest")
	proto.RegisterType((*MsgDepositLimitBidResponse)(nil), "comdex.auctionsV2.v1beta1.MsgDepositLimitBidResponse")
	proto.RegisterType((*MsgCancelLimitBidRequest)(nil), "comdex.auctionsV2.v1beta1.MsgCancelLimitBidRequest")
	proto.RegisterType((*MsgCancelLimitBidResponse)(nil), "comdex.auctionsV2.v1beta1.MsgCancelLimitBidResponse")
	proto.RegisterType((*MsgWithdrawLimitBidRequest)(nil), "comdex.auctionsV2.v1beta1.MsgWithdrawLimitBidRequest")
	proto.RegisterType((*MsgWithdrawLimitBidResponse)(nil), "comdex.auctionsV2.v1beta1.MsgWithdrawLimitBidResponse")
}

func init() {
	proto.RegisterFile("comdex/auctionsV2/v1beta1/tx.proto", fileDescriptor_2c216a24ef98c1b4)
}

var fileDescriptor_2c216a24ef98c1b4 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0x93, 0xae, 0x54, 0xaa, 0x27, 0x04, 0xf3, 0x10, 0xb4, 0x19, 0x4b, 0xab, 0x1c, 0x50,
	0x2f, 0x73, 0xb4, 0x6e, 0x80, 0xc4, 0xb1, 0xdb, 0xa5, 0x12, 0x95, 0x50, 0x85, 0x86, 0xc4, 0xa5,
	0x72, 0x62, 0xaf, 0xb3, 0x9a, 0xc4, 0x25, 0x76, 0x61, 0xbb, 0x20, 0x21, 0x71, 0xe2, 0xb4, 0x8f,
	0xc1, 0x27, 0x80, 0xaf, 0xd0, 0xe3, 0x8e, 0x88, 0x43, 0x05, 0xed, 0x37, 0xe0, 0xcc, 0x01, 0x25,
	0xf6, 0xd6, 0x76, 0x4b, 0x55, 0x7a, 0x86, 0x53, 0x9b, 0xf7, 0xfe, 0xcf, 0xf9, 0xfb, 0x97, 0xf7,
	0x6c, 0xe0, 0xf8, 0x3c, 0x24, 0xf4, 0xd4, 0xc5, 0x03, 0x5f, 0x32, 0x1e, 0x89, 0xa3, 0xba, 0xfb,
	0x76, 0xd7, 0xa3, 0x12, 0xef, 0xba, 0xf2, 0x14, 0xf5, 0x63, 0x2e, 0x39, 0x2c, 0x2b, 0x0d, 0x9a,
	0x6a, 0x90, 0xd6, 0x58, 0xf7, 0xba, 0xbc, 0xcb, 0x53, 0x95, 0x9b, 0xfc, 0x53, 0x05, 0x96, 0xed,
	0x73, 0x11, 0x72, 0xe1, 0x7a, 0x58, 0xd0, 0xab, 0xe5, 0x7c, 0xce, 0x22, 0x95, 0x77, 0x3e, 0x99,
	0xa0, 0xd4, 0x12, 0xdd, 0x17, 0x01, 0xf6, 0x69, 0x0b, 0xc7, 0x3d, 0x2a, 0x1b, 0x8c, 0xb4, 0xe9,
	0x9b, 0x01, 0x15, 0x12, 0x6e, 0x03, 0xa0, 0x5f, 0xd4, 0x61, 0xa4, 0x64, 0x56, 0xcd, 0x5a, 0xbe,
	0x5d, 0xd4, 0x91, 0x26, 0x81, 0xf7, 0x41, 0xc1, 0x63, 0x84, 0xd0, 0xb8, 0x94, 0xab, 0x9a, 0xb5,
	0x62, 0x5b, 0x3f, 0xc1, 0xa7, 0xa0, 0x80, 0x43, 0x3e, 0x88, 0x64, 0x69, 0xad, 0x6a, 0xd6, 0xd6,
	0xeb, 0x65, 0xa4, 0x4c, 0xa0, 0xc4, 0xc4, 0xa5, 0x5f, 0x74, 0xc0, 0x59, 0xd4, 0xc8, 0x0f, 0x47,
	0x15, 0xa3, 0xad, 0xe5, 0xce, 0x16, 0x28, 0x67, 0x78, 0x11, 0x7d, 0x1e, 0x09, 0xea, 0x7c, 0xc9,
	0xa5, 0xd9, 0x43, 0xda, 0xe7, 0x82, 0xc9, 0xe7, 0x2c, 0x64, 0xb3, 0x56, 0x11, 0xd8, 0xf4, 0x79,
	0x10, 0x60, 0x49, 0x63, 0x1c, 0x74, 0x24, 0xef, 0xd1, 0x19, 0xcf, 0x1b, 0xd3, 0xd4, 0xcb, 0x24,
	0xd3, 0x24, 0xd0, 0x01, 0xb7, 0x09, 0xf5, 0xe4, 0x54, 0x99, 0x4b, 0x95, 0xeb, 0x49, 0xf0, 0x52,
	0x23, 0xc1, 0xdd, 0x7e, 0x4c, 0x43, 0x36, 0x08, 0x3b, 0x84, 0x09, 0xff, 0x6a, 0x47, 0xc5, 0x46,
	0x33, 0xb1, 0xfd, 0x7d, 0x54, 0x79, 0xd4, 0x65, 0xf2, 0x64, 0xe0, 0x21, 0x9f, 0x87, 0xae, 0x06,
	0xad, 0x7e, 0x76, 0x04, 0xe9, 0xb9, 0xf2, 0xac, 0x4f, 0x05, 0x6a, 0x46, 0xf2, 0xd7, 0xa8, 0xf2,
	0xe0, 0x0c, 0x87, 0xc1, 0x33, 0xe7, 0xfa, 0x7a, 0x4e, 0xfb, 0x8e, 0x0e, 0x1d, 0xea, 0xc8, 0x0c,
	0xd5, 0xfc, 0x02, 0xaa, 0xb7, 0x56, 0xa3, 0xfa, 0x10, 0x58, 0x59, 0xdc, 0x34, 0xd6, 0xdf, 0xaa,
	0x01, 0x0e, 0x70, 0xe4, 0xd3, 0xe0, 0x9f, 0xa3, 0xaa, 0x5b, 0xee, 0xfa, 0xee, 0x35, 0x9b, 0xaf,
	0xb9, 0x14, 0xdd, 0x2b, 0x26, 0x4f, 0x48, 0x8c, 0xdf, 0xfd, 0xef, 0xb9, 0xbf, 0xee, 0xb9, 0x6d,
	0xb0, 0x95, 0x09, 0x4e, 0x81, 0xad, 0x9f, 0xe7, 0xc1, 0x5a, 0x4b, 0x74, 0xe1, 0x7b, 0xb0, 0x71,
	0x63, 0xe0, 0xe1, 0x1e, 0x5a, 0x78, 0xc8, 0xa1, 0x45, 0x47, 0x95, 0xb5, 0xbf, 0x5a, 0x91, 0xf2,
	0x01, 0x3f, 0x98, 0x00, 0xde, 0x9c, 0x0d, 0xb8, 0x64, 0xb1, 0xec, 0x23, 0xc8, 0x7a, 0xbc, 0x62,
	0x95, 0xf6, 0xa0, 0x18, 0xcc, 0x77, 0xe0, 0x32, 0x06, 0x99, 0xd3, 0xba, 0x8c, 0x41, 0x76, 0x93,
	0xc3, 0x8f, 0x26, 0xd8, 0xcc, 0xf8, 0x56, 0x70, 0xc9, 0x76, 0x16, 0x0c, 0x85, 0xf5, 0x64, 0xd5,
	0x32, 0x65, 0xa3, 0x71, 0x34, 0xfc, 0x69, 0x1b, 0x9f, 0xc7, 0xb6, 0x31, 0x1c, 0xdb, 0xe6, 0xc5,
	0xd8, 0x36, 0x7f, 0x8c, 0x6d, 0xf3, 0x7c, 0x62, 0x1b, 0x17, 0x13, 0xdb, 0xf8, 0x36, 0xb1, 0x8d,
	0xd7, 0xfb, 0x73, 0x8d, 0x9f, 0xbc, 0x63, 0x87, 0x1f, 0x1f, 0x33, 0x9f, 0xe1, 0x40, 0x3f, 0xbb,
	0x73, 0x97, 0x67, 0x3a, 0x0a, 0x5e, 0x21, 0xbd, 0xe7, 0xf6, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xba, 0xe5, 0xa9, 0x6c, 0x5e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	MsgPlaceMarketBid(ctx context.Context, in *MsgPlaceMarketBidRequest, opts ...grpc.CallOption) (*MsgPlaceMarketBidResponse, error)
	MsgDepositLimitBid(ctx context.Context, in *MsgDepositLimitBidRequest, opts ...grpc.CallOption) (*MsgDepositLimitBidResponse, error)
	MsgCancelLimitBid(ctx context.Context, in *MsgCancelLimitBidRequest, opts ...grpc.CallOption) (*MsgCancelLimitBidResponse, error)
	MsgWithdrawLimitBid(ctx context.Context, in *MsgWithdrawLimitBidRequest, opts ...grpc.CallOption) (*MsgWithdrawLimitBidResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MsgPlaceMarketBid(ctx context.Context, in *MsgPlaceMarketBidRequest, opts ...grpc.CallOption) (*MsgPlaceMarketBidResponse, error) {
	out := new(MsgPlaceMarketBidResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Msg/MsgPlaceMarketBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgDepositLimitBid(ctx context.Context, in *MsgDepositLimitBidRequest, opts ...grpc.CallOption) (*MsgDepositLimitBidResponse, error) {
	out := new(MsgDepositLimitBidResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Msg/MsgDepositLimitBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgCancelLimitBid(ctx context.Context, in *MsgCancelLimitBidRequest, opts ...grpc.CallOption) (*MsgCancelLimitBidResponse, error) {
	out := new(MsgCancelLimitBidResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Msg/MsgCancelLimitBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgWithdrawLimitBid(ctx context.Context, in *MsgWithdrawLimitBidRequest, opts ...grpc.CallOption) (*MsgWithdrawLimitBidResponse, error) {
	out := new(MsgWithdrawLimitBidResponse)
	err := c.cc.Invoke(ctx, "/comdex.auctionsV2.v1beta1.Msg/MsgWithdrawLimitBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	MsgPlaceMarketBid(context.Context, *MsgPlaceMarketBidRequest) (*MsgPlaceMarketBidResponse, error)
	MsgDepositLimitBid(context.Context, *MsgDepositLimitBidRequest) (*MsgDepositLimitBidResponse, error)
	MsgCancelLimitBid(context.Context, *MsgCancelLimitBidRequest) (*MsgCancelLimitBidResponse, error)
	MsgWithdrawLimitBid(context.Context, *MsgWithdrawLimitBidRequest) (*MsgWithdrawLimitBidResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MsgPlaceMarketBid(ctx context.Context, req *MsgPlaceMarketBidRequest) (*MsgPlaceMarketBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgPlaceMarketBid not implemented")
}
func (*UnimplementedMsgServer) MsgDepositLimitBid(ctx context.Context, req *MsgDepositLimitBidRequest) (*MsgDepositLimitBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgDepositLimitBid not implemented")
}
func (*UnimplementedMsgServer) MsgCancelLimitBid(ctx context.Context, req *MsgCancelLimitBidRequest) (*MsgCancelLimitBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgCancelLimitBid not implemented")
}
func (*UnimplementedMsgServer) MsgWithdrawLimitBid(ctx context.Context, req *MsgWithdrawLimitBidRequest) (*MsgWithdrawLimitBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgWithdrawLimitBid not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MsgPlaceMarketBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceMarketBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgPlaceMarketBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Msg/MsgPlaceMarketBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgPlaceMarketBid(ctx, req.(*MsgPlaceMarketBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgDepositLimitBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositLimitBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgDepositLimitBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Msg/MsgDepositLimitBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgDepositLimitBid(ctx, req.(*MsgDepositLimitBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgCancelLimitBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelLimitBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgCancelLimitBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Msg/MsgCancelLimitBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgCancelLimitBid(ctx, req.(*MsgCancelLimitBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgWithdrawLimitBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawLimitBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgWithdrawLimitBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.auctionsV2.v1beta1.Msg/MsgWithdrawLimitBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgWithdrawLimitBid(ctx, req.(*MsgWithdrawLimitBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.auctionsV2.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MsgPlaceMarketBid",
			Handler:    _Msg_MsgPlaceMarketBid_Handler,
		},
		{
			MethodName: "MsgDepositLimitBid",
			Handler:    _Msg_MsgDepositLimitBid_Handler,
		},
		{
			MethodName: "MsgCancelLimitBid",
			Handler:    _Msg_MsgCancelLimitBid_Handler,
		},
		{
			MethodName: "MsgWithdrawLimitBid",
			Handler:    _Msg_MsgWithdrawLimitBid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/auctionsV2/v1beta1/tx.proto",
}

func (m *MsgPlaceMarketBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceMarketBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceMarketBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceMarketBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceMarketBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceMarketBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositLimitBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLimitBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLimitBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.PremiumDiscount.Size()
		i -= size
		if _, err := m.PremiumDiscount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.DebtTokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DebtTokenId))
		i--
		dAtA[i] = 0x10
	}
	if m.CollateralTokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollateralTokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositLimitBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositLimitBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositLimitBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelLimitBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLimitBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLimitBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.PremiumDiscount.Size()
		i -= size
		if _, err := m.PremiumDiscount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.DebtTokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DebtTokenId))
		i--
		dAtA[i] = 0x10
	}
	if m.CollateralTokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollateralTokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelLimitBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelLimitBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelLimitBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLimitBidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLimitBidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLimitBidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.PremiumDiscount.Size()
		i -= size
		if _, err := m.PremiumDiscount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.DebtTokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DebtTokenId))
		i--
		dAtA[i] = 0x10
	}
	if m.CollateralTokenId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CollateralTokenId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawLimitBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawLimitBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawLimitBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgPlaceMarketBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovTx(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPlaceMarketBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositLimitBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollateralTokenId != 0 {
		n += 1 + sovTx(uint64(m.CollateralTokenId))
	}
	if m.DebtTokenId != 0 {
		n += 1 + sovTx(uint64(m.DebtTokenId))
	}
	l = m.PremiumDiscount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositLimitBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelLimitBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollateralTokenId != 0 {
		n += 1 + sovTx(uint64(m.CollateralTokenId))
	}
	if m.DebtTokenId != 0 {
		n += 1 + sovTx(uint64(m.DebtTokenId))
	}
	l = m.PremiumDiscount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelLimitBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawLimitBidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollateralTokenId != 0 {
		n += 1 + sovTx(uint64(m.CollateralTokenId))
	}
	if m.DebtTokenId != 0 {
		n += 1 + sovTx(uint64(m.DebtTokenId))
	}
	l = m.PremiumDiscount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawLimitBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgPlaceMarketBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceMarketBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceMarketBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceMarketBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceMarketBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceMarketBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositLimitBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLimitBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLimitBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralTokenId", wireType)
			}
			m.CollateralTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtTokenId", wireType)
			}
			m.DebtTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositLimitBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositLimitBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositLimitBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLimitBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLimitBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLimitBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralTokenId", wireType)
			}
			m.CollateralTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtTokenId", wireType)
			}
			m.DebtTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelLimitBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelLimitBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelLimitBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLimitBidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLimitBidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLimitBidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralTokenId", wireType)
			}
			m.CollateralTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtTokenId", wireType)
			}
			m.DebtTokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtTokenId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawLimitBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawLimitBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawLimitBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
