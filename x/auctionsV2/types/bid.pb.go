// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auctionsV2/v1beta1/bid.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Bid struct {
	BiddingId             uint64                                  `protobuf:"varint,1,opt,name=bidding_id,json=biddingId,proto3" json:"bidding_id,omitempty" yaml:"bidding_id"`
	AuctionId             uint64                                  `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	CollateralTokenAmount github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=collateral_token_amount,json=collateralTokenAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"collateral_token_amount" yaml:"outflow_token_amount"`
	DebtTokenAmount       github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=debt_token_amount,json=debtTokenAmount,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"debt_token_amount" yaml:"inflow_token_amount"`
	BidderAddress         string                                  `protobuf:"bytes,5,opt,name=bidder_address,json=bidderAddress,proto3" json:"bidder_address,omitempty" yaml:"bidder"`
	BiddingTimestamp      time.Time                               `protobuf:"bytes,6,opt,name=bidding_timestamp,json=biddingTimestamp,proto3,stdtime" json:"bidding_timestamp" yaml:"bidding_timestamp"`
	AppId                 uint64                                  `protobuf:"varint,7,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	BidType               string                                  `protobuf:"bytes,8,opt,name=bid_type,json=bidType,proto3" json:"bid_type,omitempty" yaml:"bid_type"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6db8f3a6a396ec, []int{0}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetBiddingId() uint64 {
	if m != nil {
		return m.BiddingId
	}
	return 0
}

func (m *Bid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Bid) GetCollateralTokenAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.CollateralTokenAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Bid) GetDebtTokenAmount() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.DebtTokenAmount
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *Bid) GetBidderAddress() string {
	if m != nil {
		return m.BidderAddress
	}
	return ""
}

func (m *Bid) GetBiddingTimestamp() time.Time {
	if m != nil {
		return m.BiddingTimestamp
	}
	return time.Time{}
}

func (m *Bid) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *Bid) GetBidType() string {
	if m != nil {
		return m.BidType
	}
	return ""
}

type LimitOrderBid struct {
	LimitOrderBiddingId uint64                                  `protobuf:"varint,1,opt,name=limit_order_bidding_id,json=limitOrderBiddingId,proto3" json:"limit_order_bidding_id,omitempty" yaml:"limit_order_bidding_id"`
	BidderAddress       string                                  `protobuf:"bytes,2,opt,name=bidder_address,json=bidderAddress,proto3" json:"bidder_address,omitempty" yaml:"bidder"`
	CollateralToken     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=collateral_token,json=collateralToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"collateral_token" yaml:"outflow_token"`
	DebtToken           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=debt_token,json=debtToken,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"debt_token" yaml:"debt_token"`
	BiddingId           []uint64                                `protobuf:"varint,5,rep,packed,name=bidding_id,json=biddingId,proto3" json:"bidding_id,omitempty" yaml:"bidding_id"`
	PremiumDiscount     github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,6,opt,name=premium_discount,json=premiumDiscount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"premium_discount" yaml:"premium_discount"`
}

func (m *LimitOrderBid) Reset()         { *m = LimitOrderBid{} }
func (m *LimitOrderBid) String() string { return proto.CompactTextString(m) }
func (*LimitOrderBid) ProtoMessage()    {}
func (*LimitOrderBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6db8f3a6a396ec, []int{1}
}
func (m *LimitOrderBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderBid.Merge(m, src)
}
func (m *LimitOrderBid) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderBid) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderBid.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderBid proto.InternalMessageInfo

func (m *LimitOrderBid) GetLimitOrderBiddingId() uint64 {
	if m != nil {
		return m.LimitOrderBiddingId
	}
	return 0
}

func (m *LimitOrderBid) GetBidderAddress() string {
	if m != nil {
		return m.BidderAddress
	}
	return ""
}

func (m *LimitOrderBid) GetCollateralToken() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.CollateralToken
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LimitOrderBid) GetDebtToken() github_com_cosmos_cosmos_sdk_types.Coin {
	if m != nil {
		return m.DebtToken
	}
	return github_com_cosmos_cosmos_sdk_types.Coin{}
}

func (m *LimitOrderBid) GetBiddingId() []uint64 {
	if m != nil {
		return m.BiddingId
	}
	return nil
}

type AuctionParams struct {
	AuctionDurationSeconds uint64                                 `protobuf:"varint,1,opt,name=auction_duration_seconds,json=auctionDurationSeconds,proto3" json:"auction_duration_seconds,omitempty" yaml:"auction_duration_seconds"`
	Step                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=step,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"step" yaml:"step"`
	WithdrawalFee          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=withdrawal_fee,json=withdrawalFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"withdrawal_fee" yaml:"withdrawal_fee"`
	ClosingFee             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=closing_fee,json=closingFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"closing_fee" yaml:"closing_fee"`
	MinUsdValueLeft        uint64                                 `protobuf:"varint,5,opt,name=min_usd_value_left,json=minUsdValueLeft,proto3" json:"min_usd_value_left,omitempty" yaml:"min_usd_value_left"`
}

func (m *AuctionParams) Reset()         { *m = AuctionParams{} }
func (m *AuctionParams) String() string { return proto.CompactTextString(m) }
func (*AuctionParams) ProtoMessage()    {}
func (*AuctionParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6db8f3a6a396ec, []int{2}
}
func (m *AuctionParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionParams.Merge(m, src)
}
func (m *AuctionParams) XXX_Size() int {
	return m.Size()
}
func (m *AuctionParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionParams.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionParams proto.InternalMessageInfo

func (m *AuctionParams) GetAuctionDurationSeconds() uint64 {
	if m != nil {
		return m.AuctionDurationSeconds
	}
	return 0
}

func (m *AuctionParams) GetMinUsdValueLeft() uint64 {
	if m != nil {
		return m.MinUsdValueLeft
	}
	return 0
}

type LimitOrderBidsForUser struct {
	BidderAddress string          `protobuf:"bytes,1,opt,name=bidder_address,json=bidderAddress,proto3" json:"bidder_address,omitempty" yaml:"bidder"`
	LimitOrderBid []LimitOrderBid `protobuf:"bytes,2,rep,name=limit_order_bid,json=limitOrderBid,proto3" json:"limit_order_bid" yaml:"limit_order_bid"`
}

func (m *LimitOrderBidsForUser) Reset()         { *m = LimitOrderBidsForUser{} }
func (m *LimitOrderBidsForUser) String() string { return proto.CompactTextString(m) }
func (*LimitOrderBidsForUser) ProtoMessage()    {}
func (*LimitOrderBidsForUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_6f6db8f3a6a396ec, []int{3}
}
func (m *LimitOrderBidsForUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LimitOrderBidsForUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitOrderBidsForUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LimitOrderBidsForUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitOrderBidsForUser.Merge(m, src)
}
func (m *LimitOrderBidsForUser) XXX_Size() int {
	return m.Size()
}
func (m *LimitOrderBidsForUser) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitOrderBidsForUser.DiscardUnknown(m)
}

var xxx_messageInfo_LimitOrderBidsForUser proto.InternalMessageInfo

func (m *LimitOrderBidsForUser) GetBidderAddress() string {
	if m != nil {
		return m.BidderAddress
	}
	return ""
}

func (m *LimitOrderBidsForUser) GetLimitOrderBid() []LimitOrderBid {
	if m != nil {
		return m.LimitOrderBid
	}
	return nil
}

func init() {
	proto.RegisterType((*Bid)(nil), "comdex.auctionsV2.v1beta1.Bid")
	proto.RegisterType((*LimitOrderBid)(nil), "comdex.auctionsV2.v1beta1.LimitOrderBid")
	proto.RegisterType((*AuctionParams)(nil), "comdex.auctionsV2.v1beta1.AuctionParams")
	proto.RegisterType((*LimitOrderBidsForUser)(nil), "comdex.auctionsV2.v1beta1.LimitOrderBidsForUser")
}

func init() {
	proto.RegisterFile("comdex/auctionsV2/v1beta1/bid.proto", fileDescriptor_6f6db8f3a6a396ec)
}

var fileDescriptor_6f6db8f3a6a396ec = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6e, 0x1b, 0x45,
	0x18, 0xcf, 0xc6, 0x4e, 0x5a, 0x4f, 0xe4, 0x3a, 0xd9, 0x36, 0xa9, 0x13, 0x54, 0xaf, 0x99, 0x22,
	0xf0, 0xa5, 0xbb, 0x6a, 0xe8, 0x01, 0x21, 0x71, 0x88, 0xb1, 0x8a, 0x82, 0x4a, 0x81, 0x25, 0xcd,
	0x01, 0x09, 0xad, 0x66, 0x77, 0xc6, 0xee, 0xa8, 0xbb, 0x3b, 0xab, 0x9d, 0xd9, 0x86, 0x5e, 0x78,
	0x03, 0xa4, 0x1e, 0x78, 0x01, 0x9e, 0x80, 0x87, 0xe0, 0xd2, 0x63, 0x8f, 0x08, 0x89, 0x05, 0x25,
	0x3c, 0x81, 0x8f, 0x9c, 0xd0, 0xfc, 0xb1, 0x37, 0xeb, 0x04, 0x25, 0x16, 0x27, 0xcf, 0x7c, 0x7f,
	0x7e, 0xdf, 0x6f, 0xbe, 0xf9, 0xcd, 0xb7, 0x06, 0xf7, 0x23, 0x96, 0x60, 0xf2, 0xbd, 0x87, 0x8a,
	0x48, 0x50, 0x96, 0xf2, 0xe3, 0x7d, 0xef, 0xe5, 0xc3, 0x90, 0x08, 0xf4, 0xd0, 0x0b, 0x29, 0x76,
	0xb3, 0x9c, 0x09, 0x66, 0xef, 0xea, 0x20, 0xb7, 0x0a, 0x72, 0x4d, 0xd0, 0xde, 0x9d, 0x09, 0x9b,
	0x30, 0x15, 0xe5, 0xc9, 0x95, 0x4e, 0xd8, 0x73, 0x26, 0x8c, 0x4d, 0x62, 0xe2, 0xa9, 0x5d, 0x58,
	0x8c, 0x3d, 0x41, 0x13, 0xc2, 0x05, 0x4a, 0x32, 0x13, 0xd0, 0x8b, 0x18, 0x4f, 0x18, 0xf7, 0x42,
	0xc4, 0xc9, 0xbc, 0x60, 0xc4, 0x68, 0xaa, 0xfd, 0xf0, 0x97, 0x35, 0xd0, 0x18, 0x52, 0x6c, 0x3f,
	0x02, 0x20, 0xa4, 0x18, 0xd3, 0x74, 0x12, 0x50, 0xdc, 0xb5, 0xfa, 0xd6, 0xa0, 0x39, 0xdc, 0x9e,
	0x96, 0xce, 0xd6, 0x2b, 0x94, 0xc4, 0x1f, 0xc3, 0xca, 0x07, 0xfd, 0x96, 0xd9, 0x1c, 0xaa, 0x2c,
	0x43, 0x55, 0x66, 0xad, 0x2e, 0x66, 0x55, 0x3e, 0xe8, 0xb7, 0xcc, 0xe6, 0x10, 0xdb, 0x3f, 0x5b,
	0xe0, 0x6e, 0xc4, 0xe2, 0x18, 0x09, 0x92, 0xa3, 0x38, 0x10, 0xec, 0x05, 0x49, 0x03, 0x94, 0xb0,
	0x22, 0x15, 0xdd, 0x46, 0xdf, 0x1a, 0x6c, 0xec, 0xef, 0xba, 0x9a, 0xb6, 0x2b, 0x69, 0xcf, 0x5a,
	0xe0, 0x7e, 0xca, 0x68, 0x3a, 0x7c, 0xfa, 0xa6, 0x74, 0x56, 0xa6, 0xa5, 0xf3, 0x8e, 0x2e, 0xc1,
	0x0a, 0x31, 0x8e, 0xd9, 0x49, 0x0d, 0x04, 0xfe, 0x53, 0x3a, 0x1f, 0x4c, 0xa8, 0x78, 0x5e, 0x84,
	0x6e, 0xc4, 0x12, 0xcf, 0xb4, 0x40, 0xff, 0x3c, 0xe0, 0xf8, 0x85, 0x27, 0x5e, 0x65, 0x84, 0x2b,
	0x3c, 0x7f, 0xbb, 0x62, 0x72, 0x24, 0x31, 0x0e, 0x14, 0x84, 0xfd, 0x93, 0x05, 0xb6, 0x30, 0x09,
	0x45, 0x9d, 0x5d, 0xf3, 0x2a, 0x76, 0x5f, 0x18, 0x76, 0x7b, 0x9a, 0x1d, 0x4d, 0xff, 0x1f, 0xb9,
	0x8e, 0xa4, 0x70, 0x9e, 0xd6, 0x47, 0xe0, 0x96, 0xec, 0x3e, 0xc9, 0x03, 0x84, 0x71, 0x4e, 0x38,
	0xef, 0xae, 0xf5, 0xad, 0x41, 0x6b, 0xb8, 0x35, 0x2d, 0x9d, 0x76, 0x75, 0x55, 0x24, 0x87, 0x7e,
	0x5b, 0x2f, 0x0e, 0x74, 0x9c, 0x9d, 0x80, 0xad, 0xd9, 0x25, 0xce, 0x35, 0xd2, 0x5d, 0x57, 0xe7,
	0xd9, 0x73, 0xb5, 0x8a, 0xdc, 0x99, 0x8a, 0xdc, 0xa3, 0x59, 0xc4, 0xf0, 0x3d, 0x73, 0xa0, 0x6e,
	0x5d, 0x07, 0x73, 0x08, 0xf8, 0xfa, 0x4f, 0xc7, 0xf2, 0x37, 0x8d, 0x7d, 0x9e, 0x67, 0x0f, 0xc0,
	0x3a, 0xca, 0x32, 0xa9, 0x8a, 0x1b, 0x4a, 0x15, 0xe7, 0x08, 0x6a, 0x3b, 0xf4, 0xd7, 0x50, 0x96,
	0x1d, 0x62, 0xdb, 0x05, 0x37, 0x43, 0x8a, 0x03, 0x79, 0xea, 0xee, 0x4d, 0x75, 0x98, 0xdb, 0xd3,
	0xd2, 0xe9, 0xcc, 0xeb, 0x29, 0x0f, 0xf4, 0x6f, 0x84, 0x14, 0x1f, 0xc9, 0xd5, 0x1f, 0x4d, 0xd0,
	0x7e, 0x42, 0x13, 0x2a, 0xbe, 0xcc, 0x31, 0xc9, 0xa5, 0x76, 0x8f, 0xc1, 0x4e, 0x2c, 0x0d, 0x01,
	0x93, 0x96, 0xe0, 0x82, 0x8e, 0xdf, 0x9d, 0x96, 0xce, 0x3d, 0x8d, 0x77, 0x79, 0x1c, 0xf4, 0x6f,
	0xc7, 0xe7, 0x11, 0x8d, 0xba, 0x2f, 0x36, 0x7b, 0xf5, 0x9a, 0xcd, 0xfe, 0xd1, 0x02, 0x9b, 0x8b,
	0x0a, 0xbf, 0x5a, 0xda, 0x9f, 0x99, 0x5e, 0xdf, 0xb9, 0x44, 0xda, 0xcb, 0xc9, 0x66, 0x41, 0xd3,
	0xf6, 0x0f, 0x00, 0x54, 0x62, 0xbe, 0x5a, 0xc5, 0x23, 0x43, 0xc4, 0x3c, 0xe3, 0x2a, 0x75, 0x29,
	0x16, 0xad, 0xb9, 0x78, 0x17, 0xa6, 0xcb, 0x5a, 0xbf, 0x71, 0xad, 0xe9, 0x22, 0xc0, 0x66, 0x96,
	0x93, 0x84, 0x16, 0x49, 0x80, 0x29, 0x8f, 0xd4, 0x0b, 0x5c, 0x57, 0x37, 0x70, 0x28, 0x09, 0xfe,
	0x5e, 0x3a, 0xef, 0x5f, 0x83, 0xcb, 0x88, 0x44, 0xd3, 0xd2, 0xb9, 0xab, 0x2b, 0x2d, 0xe2, 0x41,
	0xbf, 0x63, 0x4c, 0xa3, 0x99, 0xe5, 0xef, 0x06, 0x68, 0x1f, 0xe8, 0x59, 0xf5, 0x15, 0xca, 0x51,
	0xc2, 0xed, 0xef, 0x40, 0x77, 0x36, 0xc9, 0x70, 0x91, 0x23, 0xb5, 0xe0, 0x24, 0x62, 0x29, 0xe6,
	0x46, 0x61, 0xf7, 0xa7, 0xa5, 0xe3, 0xd4, 0x67, 0xde, 0x62, 0x24, 0xf4, 0x77, 0x8c, 0x6b, 0x64,
	0x3c, 0xdf, 0x68, 0x87, 0xfd, 0x35, 0x68, 0x72, 0x41, 0x32, 0x23, 0xae, 0x4f, 0x96, 0x3e, 0xda,
	0x86, 0x2e, 0x2c, 0x31, 0xa0, 0xaf, 0xa0, 0xec, 0x14, 0xdc, 0x3a, 0xa1, 0xe2, 0x39, 0xce, 0xd1,
	0x09, 0x8a, 0x83, 0x31, 0x21, 0x4a, 0x7c, 0x2d, 0xad, 0xb0, 0xa5, 0xc0, 0xb7, 0x35, 0x78, 0x1d,
	0x0d, 0xfa, 0xed, 0xca, 0xf0, 0x98, 0x10, 0x9b, 0x80, 0x8d, 0x28, 0x66, 0x5c, 0xde, 0xa1, 0x2c,
	0xd6, 0x54, 0xc5, 0x46, 0x4b, 0x17, 0xb3, 0x75, 0xb1, 0x73, 0x50, 0xd0, 0x07, 0x66, 0x27, 0xcb,
	0x7c, 0x0e, 0xec, 0x84, 0xa6, 0x41, 0xc1, 0x71, 0xf0, 0x12, 0xc5, 0x05, 0x09, 0x62, 0x32, 0x16,
	0x6a, 0x02, 0x36, 0x87, 0xf7, 0xa6, 0xa5, 0xb3, 0xab, 0xf3, 0x2f, 0xc6, 0x40, 0xbf, 0x93, 0xd0,
	0xf4, 0x19, 0xc7, 0xc7, 0xd2, 0xf4, 0x44, 0x5a, 0x7e, 0xb5, 0xc0, 0x76, 0x6d, 0x8c, 0xf0, 0xc7,
	0x2c, 0x7f, 0xc6, 0x49, 0x7e, 0xc9, 0xb3, 0xb7, 0xae, 0xf9, 0xec, 0x33, 0xd0, 0x59, 0x18, 0x30,
	0xdd, 0xd5, 0x7e, 0x63, 0xb0, 0xb1, 0x3f, 0x70, 0xff, 0xf3, 0xc3, 0xee, 0xd6, 0x48, 0x0c, 0x7b,
	0xe6, 0xe9, 0xed, 0x5c, 0x3a, 0xaf, 0xa0, 0xdf, 0xae, 0x0d, 0xaa, 0xe1, 0xd3, 0x37, 0xa7, 0x3d,
	0xeb, 0xed, 0x69, 0xcf, 0xfa, 0xeb, 0xb4, 0x67, 0xbd, 0x3e, 0xeb, 0xad, 0xbc, 0x3d, 0xeb, 0xad,
	0xfc, 0x76, 0xd6, 0x5b, 0xf9, 0xf6, 0x51, 0xad, 0xeb, 0xb2, 0xf8, 0x03, 0x36, 0x1e, 0xd3, 0x88,
	0xa2, 0xd8, 0xec, 0xbd, 0xda, 0x9f, 0x11, 0x75, 0x0f, 0xe1, 0xba, 0xfa, 0x04, 0x7c, 0xf8, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x94, 0xf3, 0xa5, 0xae, 0x08, 0x00, 0x00,
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BidType) > 0 {
		i -= len(m.BidType)
		copy(dAtA[i:], m.BidType)
		i = encodeVarintBid(dAtA, i, uint64(len(m.BidType)))
		i--
		dAtA[i] = 0x42
	}
	if m.AppId != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x38
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BiddingTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBid(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.BidderAddress) > 0 {
		i -= len(m.BidderAddress)
		copy(dAtA[i:], m.BidderAddress)
		i = encodeVarintBid(dAtA, i, uint64(len(m.BidderAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.DebtTokenAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.CollateralTokenAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AuctionId != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.BiddingId != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.BiddingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LimitOrderBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PremiumDiscount.Size()
		i -= size
		if _, err := m.PremiumDiscount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BiddingId) > 0 {
		dAtA5 := make([]byte, len(m.BiddingId)*10)
		var j4 int
		for _, num := range m.BiddingId {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintBid(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.DebtToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.CollateralToken.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BidderAddress) > 0 {
		i -= len(m.BidderAddress)
		copy(dAtA[i:], m.BidderAddress)
		i = encodeVarintBid(dAtA, i, uint64(len(m.BidderAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.LimitOrderBiddingId != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.LimitOrderBiddingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuctionParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinUsdValueLeft != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.MinUsdValueLeft))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.ClosingFee.Size()
		i -= size
		if _, err := m.ClosingFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.WithdrawalFee.Size()
		i -= size
		if _, err := m.WithdrawalFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Step.Size()
		i -= size
		if _, err := m.Step.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionDurationSeconds != 0 {
		i = encodeVarintBid(dAtA, i, uint64(m.AuctionDurationSeconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LimitOrderBidsForUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitOrderBidsForUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitOrderBidsForUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LimitOrderBid) > 0 {
		for iNdEx := len(m.LimitOrderBid) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LimitOrderBid[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBid(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BidderAddress) > 0 {
		i -= len(m.BidderAddress)
		copy(dAtA[i:], m.BidderAddress)
		i = encodeVarintBid(dAtA, i, uint64(len(m.BidderAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBid(dAtA []byte, offset int, v uint64) int {
	offset -= sovBid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BiddingId != 0 {
		n += 1 + sovBid(uint64(m.BiddingId))
	}
	if m.AuctionId != 0 {
		n += 1 + sovBid(uint64(m.AuctionId))
	}
	l = m.CollateralTokenAmount.Size()
	n += 1 + l + sovBid(uint64(l))
	l = m.DebtTokenAmount.Size()
	n += 1 + l + sovBid(uint64(l))
	l = len(m.BidderAddress)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp)
	n += 1 + l + sovBid(uint64(l))
	if m.AppId != 0 {
		n += 1 + sovBid(uint64(m.AppId))
	}
	l = len(m.BidType)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	return n
}

func (m *LimitOrderBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LimitOrderBiddingId != 0 {
		n += 1 + sovBid(uint64(m.LimitOrderBiddingId))
	}
	l = len(m.BidderAddress)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	l = m.CollateralToken.Size()
	n += 1 + l + sovBid(uint64(l))
	l = m.DebtToken.Size()
	n += 1 + l + sovBid(uint64(l))
	if len(m.BiddingId) > 0 {
		l = 0
		for _, e := range m.BiddingId {
			l += sovBid(uint64(e))
		}
		n += 1 + sovBid(uint64(l)) + l
	}
	l = m.PremiumDiscount.Size()
	n += 1 + l + sovBid(uint64(l))
	return n
}

func (m *AuctionParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionDurationSeconds != 0 {
		n += 1 + sovBid(uint64(m.AuctionDurationSeconds))
	}
	l = m.Step.Size()
	n += 1 + l + sovBid(uint64(l))
	l = m.WithdrawalFee.Size()
	n += 1 + l + sovBid(uint64(l))
	l = m.ClosingFee.Size()
	n += 1 + l + sovBid(uint64(l))
	if m.MinUsdValueLeft != 0 {
		n += 1 + sovBid(uint64(m.MinUsdValueLeft))
	}
	return n
}

func (m *LimitOrderBidsForUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BidderAddress)
	if l > 0 {
		n += 1 + l + sovBid(uint64(l))
	}
	if len(m.LimitOrderBid) > 0 {
		for _, e := range m.LimitOrderBid {
			l = e.Size()
			n += 1 + l + sovBid(uint64(l))
		}
	}
	return n
}

func sovBid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBid(x uint64) (n int) {
	return sovBid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingId", wireType)
			}
			m.BiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtTokenAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtTokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BiddingTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitOrderBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderBiddingId", wireType)
			}
			m.LimitOrderBiddingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitOrderBiddingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollateralToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DebtToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BiddingId = append(m.BiddingId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBid
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBid
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BiddingId) == 0 {
					m.BiddingId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BiddingId = append(m.BiddingId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingId", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremiumDiscount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PremiumDiscount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionDurationSeconds", wireType)
			}
			m.AuctionDurationSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionDurationSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Step.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawalFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClosingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUsdValueLeft", wireType)
			}
			m.MinUsdValueLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUsdValueLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitOrderBidsForUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitOrderBidsForUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitOrderBidsForUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitOrderBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitOrderBid = append(m.LimitOrderBid, LimitOrderBid{})
			if err := m.LimitOrderBid[len(m.LimitOrderBid)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBid = fmt.Errorf("proto: unexpected end of group")
)
