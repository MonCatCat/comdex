// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidity/v1beta1/userPoolData.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AllUserAddressesArray struct {
	UserAddresses []string `protobuf:"bytes,1,rep,name=user_addresses,json=userAddresses,proto3" json:"user_addresses,omitempty" yaml:"user_addresses"`
}

func (m *AllUserAddressesArray) Reset()         { *m = AllUserAddressesArray{} }
func (m *AllUserAddressesArray) String() string { return proto.CompactTextString(m) }
func (*AllUserAddressesArray) ProtoMessage()    {}
func (*AllUserAddressesArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_d15836daa61d55bf, []int{0}
}
func (m *AllUserAddressesArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllUserAddressesArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllUserAddressesArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllUserAddressesArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllUserAddressesArray.Merge(m, src)
}
func (m *AllUserAddressesArray) XXX_Size() int {
	return m.Size()
}
func (m *AllUserAddressesArray) XXX_DiscardUnknown() {
	xxx_messageInfo_AllUserAddressesArray.DiscardUnknown(m)
}

var xxx_messageInfo_AllUserAddressesArray proto.InternalMessageInfo

type UserPoolsData struct {
	UserAddress      string       `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty" yaml:"user_address"`
	UserPoolWiseData []*UserPools `protobuf:"bytes,2,rep,name=user_pools,json=userPools,proto3" json:"user_pools,omitempty" yaml:"user_pool_wise_data"`
}

func (m *UserPoolsData) Reset()         { *m = UserPoolsData{} }
func (m *UserPoolsData) String() string { return proto.CompactTextString(m) }
func (*UserPoolsData) ProtoMessage()    {}
func (*UserPoolsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d15836daa61d55bf, []int{1}
}
func (m *UserPoolsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPoolsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPoolsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPoolsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPoolsData.Merge(m, src)
}
func (m *UserPoolsData) XXX_Size() int {
	return m.Size()
}
func (m *UserPoolsData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPoolsData.DiscardUnknown(m)
}

var xxx_messageInfo_UserPoolsData proto.InternalMessageInfo

type UserPools struct {
	PoolId                  uint64                                  `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id" yaml:"pool_id"`
	BondedPoolCoin          *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bonded_pool_coin,json=bondedPoolCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonded_pool_coin,omitempty" yaml:"bonded_pool_coin"`
	UnbondedPoolCoin        *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=unbonded_pool_coin,json=unbondedPoolCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unbonded_pool_coin,omitempty" yaml:"unbonded_pool_coin"`
	UserPoolUnbondingTokens []*UserPoolUnbondingTokens              `protobuf:"bytes,4,rep,name=unbonding_coins,json=unbondingCoins,proto3" json:"unbonding_coins,omitempty" yaml:"user_pool_unbonding_tokens"`
}

func (m *UserPools) Reset()         { *m = UserPools{} }
func (m *UserPools) String() string { return proto.CompactTextString(m) }
func (*UserPools) ProtoMessage()    {}
func (*UserPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_d15836daa61d55bf, []int{2}
}
func (m *UserPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPools.Merge(m, src)
}
func (m *UserPools) XXX_Size() int {
	return m.Size()
}
func (m *UserPools) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPools.DiscardUnknown(m)
}

var xxx_messageInfo_UserPools proto.InternalMessageInfo

type UserPoolUnbondingTokens struct {
	IsUnbondingPoolCoin *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=is_unbonding_pool_coin,json=isUnbondingPoolCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"is_unbonding_pool_coin,omitempty" yaml:"is_unbonding_pool_coin"`
	UnbondingStartTime  float32                                 `protobuf:"fixed32,2,opt,name=unbonding_start_time,json=unbondingStartTime,proto3" json:"unbonding_start_time,omitempty" yaml:"unbonding_start_time"`
	UnbondingEndTime    float32                                 `protobuf:"fixed32,3,opt,name=unbonding_end_time,json=unbondingEndTime,proto3" json:"unbonding_end_time,omitempty" yaml:"unbonding_end_time"`
}

func (m *UserPoolUnbondingTokens) Reset()         { *m = UserPoolUnbondingTokens{} }
func (m *UserPoolUnbondingTokens) String() string { return proto.CompactTextString(m) }
func (*UserPoolUnbondingTokens) ProtoMessage()    {}
func (*UserPoolUnbondingTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_d15836daa61d55bf, []int{3}
}
func (m *UserPoolUnbondingTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPoolUnbondingTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPoolUnbondingTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPoolUnbondingTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPoolUnbondingTokens.Merge(m, src)
}
func (m *UserPoolUnbondingTokens) XXX_Size() int {
	return m.Size()
}
func (m *UserPoolUnbondingTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPoolUnbondingTokens.DiscardUnknown(m)
}

var xxx_messageInfo_UserPoolUnbondingTokens proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AllUserAddressesArray)(nil), "comdex.liquidity.v1beta1.AllUserAddressesArray")
	proto.RegisterType((*UserPoolsData)(nil), "comdex.liquidity.v1beta1.UserPoolsData")
	proto.RegisterType((*UserPools)(nil), "comdex.liquidity.v1beta1.UserPools")
	proto.RegisterType((*UserPoolUnbondingTokens)(nil), "comdex.liquidity.v1beta1.UserPoolUnbondingTokens")
}

func init() {
	proto.RegisterFile("comdex/liquidity/v1beta1/userPoolData.proto", fileDescriptor_d15836daa61d55bf)
}

var fileDescriptor_d15836daa61d55bf = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x93, 0xaa, 0x9f, 0x32, 0xfd, 0x1a, 0x2a, 0xb7, 0xa5, 0x69, 0x51, 0x3d, 0x65, 0x90,
	0x50, 0x25, 0xd4, 0x58, 0x69, 0x05, 0x8b, 0xae, 0x5a, 0x43, 0x85, 0x2a, 0x36, 0xc8, 0x34, 0x42,
	0xb0, 0x89, 0x9c, 0xcc, 0x34, 0x8c, 0xea, 0x78, 0x8a, 0x67, 0x5c, 0xc8, 0x8e, 0x47, 0xe0, 0x01,
	0x78, 0x00, 0xde, 0x83, 0x4d, 0xc5, 0xaa, 0x4b, 0xc4, 0x62, 0x04, 0xae, 0xc4, 0x82, 0xa5, 0x9f,
	0x00, 0xcd, 0xf8, 0x27, 0x6e, 0x43, 0x84, 0xba, 0x8a, 0x7d, 0xee, 0xb9, 0xe7, 0x9c, 0xb9, 0x73,
	0x63, 0xf0, 0xa0, 0xcf, 0x86, 0x98, 0xbc, 0xb7, 0x7d, 0xfa, 0x36, 0xa2, 0x98, 0x8a, 0x91, 0x7d,
	0xd6, 0xee, 0x11, 0xe1, 0xb5, 0xed, 0x88, 0x93, 0xf0, 0x39, 0x63, 0xfe, 0x13, 0x4f, 0x78, 0xad,
	0xd3, 0x90, 0x09, 0x66, 0x36, 0x53, 0x72, 0xab, 0x20, 0xb7, 0x32, 0xf2, 0xda, 0xd2, 0x80, 0x0d,
	0x98, 0x26, 0xd9, 0xea, 0x29, 0xe5, 0xa3, 0x57, 0x60, 0x79, 0xdf, 0xf7, 0x3b, 0x9c, 0x84, 0xfb,
	0x18, 0x87, 0x84, 0x73, 0xc2, 0xf7, 0xc3, 0xd0, 0x1b, 0x99, 0x7b, 0xa0, 0xa1, 0xe4, 0xbb, 0x5e,
	0x0e, 0x37, 0x8d, 0x8d, 0xda, 0x66, 0xdd, 0x59, 0x4d, 0x24, 0x5c, 0x1e, 0x79, 0x43, 0x7f, 0x17,
	0x5d, 0xad, 0x23, 0x77, 0x3e, 0x2a, 0xcb, 0xa0, 0x2f, 0x06, 0x98, 0xef, 0x64, 0x09, 0xb9, 0x8a,
	0x68, 0xee, 0x82, 0xff, 0xcb, 0x3d, 0x4d, 0x63, 0xc3, 0xd8, 0xac, 0x3b, 0x2b, 0x89, 0x84, 0x8b,
	0x93, 0x8a, 0xc8, 0x9d, 0x2b, 0xe9, 0x99, 0x67, 0x00, 0xe8, 0xea, 0xa9, 0x52, 0x6b, 0x56, 0x37,
	0x6a, 0x9b, 0x73, 0xdb, 0xf7, 0x5a, 0xd3, 0x4e, 0xdb, 0x2a, 0x8c, 0x9d, 0xed, 0x58, 0xc2, 0x85,
	0xfc, 0xf5, 0x25, 0xe5, 0x44, 0x45, 0x49, 0x24, 0x5c, 0x2b, 0x59, 0x2a, 0xd1, 0xee, 0x3b, 0xca,
	0x49, 0x17, 0x7b, 0xc2, 0x43, 0x6e, 0x3d, 0x9f, 0x2c, 0x47, 0x5f, 0x6b, 0xa0, 0x5e, 0x88, 0x99,
	0x8f, 0xc0, 0x7f, 0x9a, 0x4b, 0xb1, 0x0e, 0x3f, 0xe3, 0xac, 0xff, 0x96, 0x30, 0x87, 0x12, 0x09,
	0x1b, 0xa9, 0x68, 0x06, 0x20, 0x77, 0x56, 0x3d, 0x1d, 0x62, 0x93, 0x81, 0x85, 0x1e, 0x0b, 0x30,
	0xc1, 0xa9, 0x55, 0x9f, 0xd1, 0xa0, 0x59, 0xd5, 0xa7, 0x3f, 0xf8, 0x2e, 0xe1, 0xfd, 0x01, 0x15,
	0x6f, 0xa2, 0x9e, 0x3a, 0x8d, 0xdd, 0x67, 0x7c, 0xc8, 0x78, 0xf6, 0xb3, 0xc5, 0xf1, 0x89, 0x2d,
	0x46, 0xa7, 0x84, 0xb7, 0x0e, 0x03, 0x91, 0x48, 0xb8, 0x92, 0xea, 0x5f, 0xd7, 0x42, 0x6e, 0x23,
	0x85, 0x54, 0xca, 0xc7, 0x8c, 0x06, 0x66, 0x04, 0xcc, 0x28, 0x98, 0xb0, 0xac, 0x69, 0xcb, 0xa7,
	0x37, 0xb2, 0x5c, 0xcd, 0xe6, 0x14, 0x4c, 0x9a, 0x2e, 0xe4, 0x60, 0x61, 0xfb, 0xc9, 0x00, 0xb7,
	0x52, 0x90, 0x06, 0x03, 0xcd, 0xe2, 0xcd, 0x19, 0x7d, 0x57, 0xed, 0x7f, 0xdf, 0x55, 0x27, 0x6f,
	0x3c, 0x62, 0x27, 0x24, 0xe0, 0xce, 0x5e, 0x2c, 0xe1, 0xca, 0x94, 0x62, 0x22, 0xe1, 0xdd, 0xeb,
	0x17, 0x38, 0x36, 0x16, 0x9a, 0x83, 0xdc, 0x46, 0x01, 0xa9, 0x74, 0x1c, 0xfd, 0xaa, 0x82, 0x69,
	0x82, 0xe6, 0x07, 0x03, 0xdc, 0xa6, 0xbc, 0x24, 0x32, 0x1e, 0x5b, 0xba, 0xa7, 0xcf, 0x6e, 0x34,
	0xb6, 0xf5, 0x34, 0xdd, 0xdf, 0x15, 0x91, 0xbb, 0x48, 0x79, 0x11, 0xa0, 0x98, 0xde, 0x00, 0x2c,
	0x8d, 0xc9, 0x5c, 0x78, 0xa1, 0xe8, 0x0a, 0x3a, 0x24, 0x7a, 0x53, 0xaa, 0xce, 0xc3, 0x58, 0x42,
	0xb3, 0x68, 0x7a, 0xa1, 0xca, 0x47, 0x74, 0x48, 0x12, 0x09, 0xef, 0x94, 0xaf, 0xe8, 0x6a, 0x2f,
	0x72, 0xcd, 0x68, 0xa2, 0xc5, 0xec, 0x82, 0x31, 0xda, 0x25, 0x01, 0x4e, 0x6d, 0x6a, 0xda, 0xa6,
	0xad, 0xff, 0x2f, 0x79, 0xf5, 0x20, 0xc0, 0x99, 0xc9, 0xea, 0x75, 0x93, 0xbc, 0xaf, 0xd8, 0x83,
	0x31, 0xdd, 0xe9, 0x9c, 0xff, 0xb4, 0x2a, 0x9f, 0x63, 0xab, 0x72, 0x1e, 0x5b, 0xc6, 0x45, 0x6c,
	0x19, 0x3f, 0x62, 0xcb, 0xf8, 0x78, 0x69, 0x55, 0x2e, 0x2e, 0xad, 0xca, 0xb7, 0x4b, 0xab, 0xf2,
	0x7a, 0xe7, 0xca, 0x24, 0xd5, 0x66, 0x6c, 0xb1, 0xe3, 0x63, 0xda, 0xa7, 0x9e, 0x9f, 0xbd, 0xdb,
	0xe5, 0x4f, 0x9e, 0x1e, 0x6d, 0x6f, 0x56, 0x7f, 0xb4, 0x76, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x1e, 0xe3, 0x9e, 0x3f, 0x13, 0x05, 0x00, 0x00,
}

func (m *AllUserAddressesArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllUserAddressesArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllUserAddressesArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddresses) > 0 {
		for iNdEx := len(m.UserAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserAddresses[iNdEx])
			copy(dAtA[i:], m.UserAddresses[iNdEx])
			i = encodeVarintUserPoolData(dAtA, i, uint64(len(m.UserAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserPoolsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPoolsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPoolsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPoolWiseData) > 0 {
		for iNdEx := len(m.UserPoolWiseData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPoolWiseData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserPoolData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintUserPoolData(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserPoolUnbondingTokens) > 0 {
		for iNdEx := len(m.UserPoolUnbondingTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserPoolUnbondingTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserPoolData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.UnbondedPoolCoin != nil {
		{
			size := m.UnbondedPoolCoin.Size()
			i -= size
			if _, err := m.UnbondedPoolCoin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintUserPoolData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BondedPoolCoin != nil {
		{
			size := m.BondedPoolCoin.Size()
			i -= size
			if _, err := m.BondedPoolCoin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintUserPoolData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintUserPoolData(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserPoolUnbondingTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPoolUnbondingTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPoolUnbondingTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingEndTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UnbondingEndTime))))
		i--
		dAtA[i] = 0x1d
	}
	if m.UnbondingStartTime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UnbondingStartTime))))
		i--
		dAtA[i] = 0x15
	}
	if m.IsUnbondingPoolCoin != nil {
		{
			size := m.IsUnbondingPoolCoin.Size()
			i -= size
			if _, err := m.IsUnbondingPoolCoin.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintUserPoolData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserPoolData(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserPoolData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AllUserAddressesArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserAddresses) > 0 {
		for _, s := range m.UserAddresses {
			l = len(s)
			n += 1 + l + sovUserPoolData(uint64(l))
		}
	}
	return n
}

func (m *UserPoolsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovUserPoolData(uint64(l))
	}
	if len(m.UserPoolWiseData) > 0 {
		for _, e := range m.UserPoolWiseData {
			l = e.Size()
			n += 1 + l + sovUserPoolData(uint64(l))
		}
	}
	return n
}

func (m *UserPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovUserPoolData(uint64(m.PoolId))
	}
	if m.BondedPoolCoin != nil {
		l = m.BondedPoolCoin.Size()
		n += 1 + l + sovUserPoolData(uint64(l))
	}
	if m.UnbondedPoolCoin != nil {
		l = m.UnbondedPoolCoin.Size()
		n += 1 + l + sovUserPoolData(uint64(l))
	}
	if len(m.UserPoolUnbondingTokens) > 0 {
		for _, e := range m.UserPoolUnbondingTokens {
			l = e.Size()
			n += 1 + l + sovUserPoolData(uint64(l))
		}
	}
	return n
}

func (m *UserPoolUnbondingTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsUnbondingPoolCoin != nil {
		l = m.IsUnbondingPoolCoin.Size()
		n += 1 + l + sovUserPoolData(uint64(l))
	}
	if m.UnbondingStartTime != 0 {
		n += 5
	}
	if m.UnbondingEndTime != 0 {
		n += 5
	}
	return n
}

func sovUserPoolData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserPoolData(x uint64) (n int) {
	return sovUserPoolData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllUserAddressesArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserPoolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllUserAddressesArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllUserAddressesArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserPoolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddresses = append(m.UserAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserPoolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPoolsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserPoolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPoolsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPoolsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserPoolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPoolWiseData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserPoolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPoolWiseData = append(m.UserPoolWiseData, &UserPools{})
			if err := m.UserPoolWiseData[len(m.UserPoolWiseData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserPoolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserPoolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedPoolCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserPoolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.BondedPoolCoin = &v
			if err := m.BondedPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondedPoolCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserPoolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.UnbondedPoolCoin = &v
			if err := m.UnbondedPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPoolUnbondingTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserPoolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPoolUnbondingTokens = append(m.UserPoolUnbondingTokens, &UserPoolUnbondingTokens{})
			if err := m.UserPoolUnbondingTokens[len(m.UserPoolUnbondingTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserPoolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPoolUnbondingTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserPoolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPoolUnbondingTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPoolUnbondingTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUnbondingPoolCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUserPoolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.IsUnbondingPoolCoin = &v
			if err := m.IsUnbondingPoolCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingStartTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UnbondingStartTime = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingEndTime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UnbondingEndTime = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipUserPoolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserPoolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserPoolData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserPoolData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserPoolData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserPoolData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserPoolData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserPoolData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserPoolData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserPoolData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserPoolData = fmt.Errorf("proto: unexpected end of group")
)
