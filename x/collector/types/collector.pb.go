// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/collector/v1beta1/collector.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CollectorData struct {
	CollectedStabilityFee       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=collected_stability_fee,json=collectedStabilityFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collected_stability_fee" yaml:"collected_stability_fee"`
	CollectedClosingFee         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=collected_closing_fee,json=collectedClosingFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collected_closing_fee" yaml:"collected_closing_fee"`
	CollectedOpeningFee         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=collected_opening_fee,json=collectedOpeningFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"collected_opening_fee" yaml:"collected_opening_fee"`
	LiquidationRewardsCollected github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=liquidation_rewards_collected,json=liquidationRewardsCollected,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"liquidation_rewards_collected" yaml:"liquidation_rewards_collected"`
}

func (m *CollectorData) Reset()         { *m = CollectorData{} }
func (m *CollectorData) String() string { return proto.CompactTextString(m) }
func (*CollectorData) ProtoMessage()    {}
func (*CollectorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{0}
}
func (m *CollectorData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectorData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectorData.Merge(m, src)
}
func (m *CollectorData) XXX_Size() int {
	return m.Size()
}
func (m *CollectorData) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectorData.DiscardUnknown(m)
}

var xxx_messageInfo_CollectorData proto.InternalMessageInfo

type AppAssetIdToFeeCollectedData struct {
	AppId            uint64                                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId          uint64                                 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	NetFeesCollected github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=net_fees_collected,json=netFeesCollected,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"net_fees_collected" yaml:"net_fees_collected"`
}

func (m *AppAssetIdToFeeCollectedData) Reset()         { *m = AppAssetIdToFeeCollectedData{} }
func (m *AppAssetIdToFeeCollectedData) String() string { return proto.CompactTextString(m) }
func (*AppAssetIdToFeeCollectedData) ProtoMessage()    {}
func (*AppAssetIdToFeeCollectedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{1}
}
func (m *AppAssetIdToFeeCollectedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppAssetIdToFeeCollectedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppAssetIdToFeeCollectedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppAssetIdToFeeCollectedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppAssetIdToFeeCollectedData.Merge(m, src)
}
func (m *AppAssetIdToFeeCollectedData) XXX_Size() int {
	return m.Size()
}
func (m *AppAssetIdToFeeCollectedData) XXX_DiscardUnknown() {
	xxx_messageInfo_AppAssetIdToFeeCollectedData.DiscardUnknown(m)
}

var xxx_messageInfo_AppAssetIdToFeeCollectedData proto.InternalMessageInfo

func (m *AppAssetIdToFeeCollectedData) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppAssetIdToFeeCollectedData) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

type AppToAssetIdCollectorMapping struct {
	AppId     uint64        `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId   uint64        `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	Collector CollectorData `protobuf:"bytes,3,opt,name=collector,proto3" json:"collector" yaml:"collector"`
}

func (m *AppToAssetIdCollectorMapping) Reset()         { *m = AppToAssetIdCollectorMapping{} }
func (m *AppToAssetIdCollectorMapping) String() string { return proto.CompactTextString(m) }
func (*AppToAssetIdCollectorMapping) ProtoMessage()    {}
func (*AppToAssetIdCollectorMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{2}
}
func (m *AppToAssetIdCollectorMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppToAssetIdCollectorMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppToAssetIdCollectorMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppToAssetIdCollectorMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppToAssetIdCollectorMapping.Merge(m, src)
}
func (m *AppToAssetIdCollectorMapping) XXX_Size() int {
	return m.Size()
}
func (m *AppToAssetIdCollectorMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AppToAssetIdCollectorMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AppToAssetIdCollectorMapping proto.InternalMessageInfo

func (m *AppToAssetIdCollectorMapping) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppToAssetIdCollectorMapping) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *AppToAssetIdCollectorMapping) GetCollector() CollectorData {
	if m != nil {
		return m.Collector
	}
	return CollectorData{}
}

type CollectorLookupTableData struct {
	AppId            uint64                                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	CollectorAssetId uint64                                 `protobuf:"varint,2,opt,name=collector_asset_id,json=collectorAssetId,proto3" json:"collector_asset_id,omitempty" yaml:"collector_asset_id"`
	SecondaryAssetId uint64                                 `protobuf:"varint,3,opt,name=secondary_asset_id,json=secondaryAssetId,proto3" json:"secondary_asset_id,omitempty" yaml:"secondary_asset_id"`
	SurplusThreshold uint64                                 `protobuf:"varint,4,opt,name=surplus_threshold,json=surplusThreshold,proto3" json:"surplus_threshold,omitempty" yaml:"surplus_threshold"`
	DebtThreshold    uint64                                 `protobuf:"varint,5,opt,name=debt_threshold,json=debtThreshold,proto3" json:"debt_threshold,omitempty" yaml:"debt_threshold"`
	LockerSavingRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=locker_saving_rate,json=lockerSavingRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"locker_saving_rate" yaml:"locker_saving_rate"`
	LotSize          uint64                                 `protobuf:"varint,7,opt,name=lot_size,json=lotSize,proto3" json:"lot_size,omitempty" yaml:"lot_size"`
	BidFactor        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=bid_factor,json=bidFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bid_factor" yaml:"bid_factor"`
	DebtLotSize      uint64                                 `protobuf:"varint,9,opt,name=debt_lot_size,json=debtLotSize,proto3" json:"debt_lot_size,omitempty" yaml:"debt_lot_size"`
	BlockHeight      int64                                  `protobuf:"varint,10,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"debt_lot_size"`
	BlockTime        time.Time                              `protobuf:"bytes,11,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time" yaml:"block_time"`
}

func (m *CollectorLookupTableData) Reset()         { *m = CollectorLookupTableData{} }
func (m *CollectorLookupTableData) String() string { return proto.CompactTextString(m) }
func (*CollectorLookupTableData) ProtoMessage()    {}
func (*CollectorLookupTableData) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{3}
}
func (m *CollectorLookupTableData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectorLookupTableData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectorLookupTableData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectorLookupTableData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectorLookupTableData.Merge(m, src)
}
func (m *CollectorLookupTableData) XXX_Size() int {
	return m.Size()
}
func (m *CollectorLookupTableData) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectorLookupTableData.DiscardUnknown(m)
}

var xxx_messageInfo_CollectorLookupTableData proto.InternalMessageInfo

func (m *CollectorLookupTableData) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *CollectorLookupTableData) GetCollectorAssetId() uint64 {
	if m != nil {
		return m.CollectorAssetId
	}
	return 0
}

func (m *CollectorLookupTableData) GetSecondaryAssetId() uint64 {
	if m != nil {
		return m.SecondaryAssetId
	}
	return 0
}

func (m *CollectorLookupTableData) GetSurplusThreshold() uint64 {
	if m != nil {
		return m.SurplusThreshold
	}
	return 0
}

func (m *CollectorLookupTableData) GetDebtThreshold() uint64 {
	if m != nil {
		return m.DebtThreshold
	}
	return 0
}

func (m *CollectorLookupTableData) GetLotSize() uint64 {
	if m != nil {
		return m.LotSize
	}
	return 0
}

func (m *CollectorLookupTableData) GetDebtLotSize() uint64 {
	if m != nil {
		return m.DebtLotSize
	}
	return 0
}

func (m *CollectorLookupTableData) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CollectorLookupTableData) GetBlockTime() time.Time {
	if m != nil {
		return m.BlockTime
	}
	return time.Time{}
}

type AppToDenomsMapping struct {
	AppId    uint64   `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetIds []uint64 `protobuf:"varint,2,rep,packed,name=asset_ids,json=assetIds,proto3" json:"asset_ids,omitempty" yaml:"asset_ids"`
}

func (m *AppToDenomsMapping) Reset()         { *m = AppToDenomsMapping{} }
func (m *AppToDenomsMapping) String() string { return proto.CompactTextString(m) }
func (*AppToDenomsMapping) ProtoMessage()    {}
func (*AppToDenomsMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{4}
}
func (m *AppToDenomsMapping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppToDenomsMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppToDenomsMapping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppToDenomsMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppToDenomsMapping.Merge(m, src)
}
func (m *AppToDenomsMapping) XXX_Size() int {
	return m.Size()
}
func (m *AppToDenomsMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_AppToDenomsMapping.DiscardUnknown(m)
}

var xxx_messageInfo_AppToDenomsMapping proto.InternalMessageInfo

func (m *AppToDenomsMapping) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppToDenomsMapping) GetAssetIds() []uint64 {
	if m != nil {
		return m.AssetIds
	}
	return nil
}

type AppAssetIdToAuctionLookupTable struct {
	AppId               uint64 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" yaml:"app_id"`
	AssetId             uint64 `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty" yaml:"asset_id"`
	IsSurplusAuction    bool   `protobuf:"varint,3,opt,name=is_surplus_auction,json=isSurplusAuction,proto3" json:"is_surplus_auction,omitempty" yaml:"is_surplus_auction"`
	IsDebtAuction       bool   `protobuf:"varint,4,opt,name=is_debt_auction,json=isDebtAuction,proto3" json:"is_debt_auction,omitempty" yaml:"is_debt_auction"`
	IsDistributor       bool   `protobuf:"varint,5,opt,name=is_distributor,json=isDistributor,proto3" json:"is_distributor,omitempty" yaml:"is_distributor"`
	IsAuctionActive     bool   `protobuf:"varint,6,opt,name=is_auction_active,json=isAuctionActive,proto3" json:"is_auction_active,omitempty" yaml:"is_auction_active"`
	AssetOutOraclePrice bool   `protobuf:"varint,7,opt,name=asset_out_oracle_price,json=assetOutOraclePrice,proto3" json:"asset_out_oracle_price,omitempty" yaml:"asset_out_oracle_price"`
	AssetOutPrice       uint64 `protobuf:"varint,8,opt,name=asset_out_price,json=assetOutPrice,proto3" json:"asset_out_price,omitempty" yaml:"asset_out_price"`
}

func (m *AppAssetIdToAuctionLookupTable) Reset()         { *m = AppAssetIdToAuctionLookupTable{} }
func (m *AppAssetIdToAuctionLookupTable) String() string { return proto.CompactTextString(m) }
func (*AppAssetIdToAuctionLookupTable) ProtoMessage()    {}
func (*AppAssetIdToAuctionLookupTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_f18765a8dff2a43b, []int{5}
}
func (m *AppAssetIdToAuctionLookupTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppAssetIdToAuctionLookupTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppAssetIdToAuctionLookupTable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppAssetIdToAuctionLookupTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppAssetIdToAuctionLookupTable.Merge(m, src)
}
func (m *AppAssetIdToAuctionLookupTable) XXX_Size() int {
	return m.Size()
}
func (m *AppAssetIdToAuctionLookupTable) XXX_DiscardUnknown() {
	xxx_messageInfo_AppAssetIdToAuctionLookupTable.DiscardUnknown(m)
}

var xxx_messageInfo_AppAssetIdToAuctionLookupTable proto.InternalMessageInfo

func (m *AppAssetIdToAuctionLookupTable) GetAppId() uint64 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *AppAssetIdToAuctionLookupTable) GetAssetId() uint64 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *AppAssetIdToAuctionLookupTable) GetIsSurplusAuction() bool {
	if m != nil {
		return m.IsSurplusAuction
	}
	return false
}

func (m *AppAssetIdToAuctionLookupTable) GetIsDebtAuction() bool {
	if m != nil {
		return m.IsDebtAuction
	}
	return false
}

func (m *AppAssetIdToAuctionLookupTable) GetIsDistributor() bool {
	if m != nil {
		return m.IsDistributor
	}
	return false
}

func (m *AppAssetIdToAuctionLookupTable) GetIsAuctionActive() bool {
	if m != nil {
		return m.IsAuctionActive
	}
	return false
}

func (m *AppAssetIdToAuctionLookupTable) GetAssetOutOraclePrice() bool {
	if m != nil {
		return m.AssetOutOraclePrice
	}
	return false
}

func (m *AppAssetIdToAuctionLookupTable) GetAssetOutPrice() uint64 {
	if m != nil {
		return m.AssetOutPrice
	}
	return 0
}

func init() {
	proto.RegisterType((*CollectorData)(nil), "comdex.collector.v1beta1.CollectorData")
	proto.RegisterType((*AppAssetIdToFeeCollectedData)(nil), "comdex.collector.v1beta1.AppAssetIdToFeeCollectedData")
	proto.RegisterType((*AppToAssetIdCollectorMapping)(nil), "comdex.collector.v1beta1.AppToAssetIdCollectorMapping")
	proto.RegisterType((*CollectorLookupTableData)(nil), "comdex.collector.v1beta1.CollectorLookupTableData")
	proto.RegisterType((*AppToDenomsMapping)(nil), "comdex.collector.v1beta1.AppToDenomsMapping")
	proto.RegisterType((*AppAssetIdToAuctionLookupTable)(nil), "comdex.collector.v1beta1.AppAssetIdToAuctionLookupTable")
}

func init() {
	proto.RegisterFile("comdex/collector/v1beta1/collector.proto", fileDescriptor_f18765a8dff2a43b)
}

var fileDescriptor_f18765a8dff2a43b = []byte{
	// 1039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x36, 0x63, 0xd9, 0x96, 0xd6, 0x75, 0x2c, 0xd3, 0x4e, 0xca, 0xb8, 0xb6, 0xe8, 0x2e, 0x8a,
	0xd6, 0x97, 0x50, 0x70, 0x73, 0x6b, 0x7b, 0x88, 0x65, 0xc3, 0x88, 0xe1, 0xa4, 0x0e, 0xd6, 0x46,
	0x50, 0xf4, 0x42, 0x2c, 0xc9, 0x95, 0xb4, 0x30, 0xa5, 0x65, 0xb8, 0x4b, 0xb7, 0xca, 0xb1, 0xa7,
	0x1e, 0x73, 0xee, 0x6b, 0xf4, 0x09, 0x7a, 0xcb, 0xad, 0x39, 0xb6, 0x3d, 0xb0, 0x85, 0xfd, 0x06,
	0xea, 0x0b, 0x14, 0xbb, 0xcb, 0x3f, 0x49, 0x48, 0x00, 0x01, 0xcd, 0xc9, 0xe2, 0x37, 0x1f, 0x3f,
	0x7e, 0x33, 0x3b, 0x33, 0x6b, 0xb0, 0xef, 0xb3, 0x41, 0x40, 0x7e, 0x6c, 0xfb, 0x2c, 0x0c, 0x89,
	0x2f, 0x58, 0xdc, 0xbe, 0x3e, 0xf0, 0x88, 0xc0, 0x07, 0x25, 0xe2, 0x44, 0x31, 0x13, 0xcc, 0xb4,
	0x34, 0xd3, 0x29, 0xf1, 0x8c, 0xb9, 0xbd, 0xd5, 0x63, 0x3d, 0xa6, 0x48, 0x6d, 0xf9, 0x4b, 0xf3,
	0xb7, 0xed, 0x1e, 0x63, 0xbd, 0x90, 0xb4, 0xd5, 0x93, 0x97, 0x74, 0xdb, 0x82, 0x0e, 0x08, 0x17,
	0x78, 0x10, 0x69, 0x02, 0xfc, 0xad, 0x06, 0xd6, 0x8e, 0x72, 0xb1, 0x63, 0x2c, 0xb0, 0xf9, 0xb3,
	0x01, 0x3e, 0xce, 0xe4, 0x49, 0xe0, 0x72, 0x81, 0x3d, 0x1a, 0x52, 0x31, 0x72, 0xbb, 0x84, 0x58,
	0xc6, 0x9e, 0xb1, 0xdf, 0xe8, 0x3c, 0x7f, 0x93, 0xda, 0x0b, 0x7f, 0xa5, 0xf6, 0xe7, 0x3d, 0x2a,
	0xfa, 0x89, 0xe7, 0xf8, 0x6c, 0xd0, 0xf6, 0x19, 0x1f, 0x30, 0x9e, 0xfd, 0x79, 0xc8, 0x83, 0xab,
	0xb6, 0x18, 0x45, 0x84, 0x3b, 0xa7, 0x43, 0x31, 0x4e, 0xed, 0xd6, 0x08, 0x0f, 0xc2, 0xaf, 0xe0,
	0x3b, 0x64, 0x21, 0xba, 0x57, 0x44, 0x2e, 0xf2, 0xc0, 0x09, 0x21, 0xe6, 0x4f, 0x06, 0x28, 0x23,
	0xae, 0x1f, 0x32, 0x4e, 0x87, 0x3d, 0x65, 0xe4, 0x8e, 0x32, 0xf2, 0xed, 0xdc, 0x46, 0x76, 0xa6,
	0x8d, 0x54, 0x44, 0x21, 0xda, 0x2c, 0xf0, 0x23, 0x0d, 0xcf, 0x9a, 0x60, 0x11, 0x19, 0xe6, 0x26,
	0x16, 0xff, 0x2f, 0x13, 0x15, 0xd1, 0xaa, 0x89, 0x73, 0x0d, 0x4b, 0x13, 0xbf, 0x18, 0x60, 0x37,
	0xa4, 0x2f, 0x13, 0x1a, 0x60, 0x41, 0xd9, 0xd0, 0x8d, 0xc9, 0x0f, 0x38, 0x0e, 0xb8, 0x5b, 0x70,
	0xad, 0x9a, 0x32, 0xf3, 0x62, 0x6e, 0x33, 0x9f, 0x69, 0x33, 0xef, 0x15, 0x87, 0xe8, 0x93, 0x4a,
	0x1c, 0xe9, 0xf0, 0x51, 0x11, 0xfd, 0xd7, 0x00, 0x3b, 0x87, 0x51, 0x74, 0xc8, 0x39, 0x11, 0xa7,
	0xc1, 0x25, 0x3b, 0x21, 0xa4, 0x08, 0xaa, 0x96, 0xda, 0x07, 0xcb, 0x38, 0x8a, 0x5c, 0x1a, 0xa8,
	0x06, 0xaa, 0x75, 0x36, 0xc6, 0xa9, 0xbd, 0xa6, 0xbf, 0xab, 0x71, 0x88, 0x96, 0x70, 0x14, 0x9d,
	0x06, 0xa6, 0x03, 0xea, 0x58, 0xca, 0x48, 0xee, 0x1d, 0xc5, 0xdd, 0x1c, 0xa7, 0xf6, 0x7a, 0xc6,
	0xcd, 0x22, 0x10, 0xad, 0x60, 0xfd, 0x2d, 0x73, 0x04, 0xcc, 0x21, 0x11, 0xb2, 0x70, 0xd5, 0x5a,
	0xe8, 0x83, 0x39, 0x9b, 0xbb, 0x16, 0x0f, 0xf4, 0x77, 0x66, 0x15, 0x21, 0x6a, 0x0e, 0x89, 0x38,
	0x21, 0xa4, 0x92, 0xf5, 0x9f, 0x3a, 0xeb, 0x4b, 0x96, 0xe5, 0x5d, 0x4c, 0xd1, 0x33, 0x1c, 0x45,
	0x74, 0xd8, 0xfb, 0x80, 0x59, 0xbb, 0xa0, 0x51, 0x2c, 0x00, 0x95, 0xec, 0xea, 0x97, 0x5f, 0x38,
	0xef, 0xda, 0x0c, 0xce, 0xc4, 0x78, 0x77, 0x2c, 0x59, 0x95, 0x71, 0x6a, 0x37, 0x27, 0x9a, 0x90,
	0xc5, 0x10, 0x95, 0x9a, 0xf0, 0xf7, 0x65, 0x60, 0x15, 0xaf, 0x3d, 0x65, 0xec, 0x2a, 0x89, 0x2e,
	0xb1, 0x17, 0x92, 0x39, 0x4f, 0xf3, 0x0c, 0x98, 0x85, 0xa6, 0x3b, 0x95, 0xe1, 0x6e, 0x59, 0xef,
	0x59, 0x0e, 0x44, 0xcd, 0x02, 0xcc, 0xca, 0x2b, 0xc5, 0x38, 0xf1, 0xd9, 0x30, 0xc0, 0xf1, 0xa8,
	0x14, 0x5b, 0x9c, 0x16, 0x9b, 0xe5, 0x40, 0xd4, 0x2c, 0xc0, 0x5c, 0xec, 0x14, 0x6c, 0xf0, 0x24,
	0x8e, 0xc2, 0x84, 0xbb, 0xa2, 0x1f, 0x13, 0xde, 0x67, 0xa1, 0x1e, 0xa1, 0x5a, 0x67, 0x67, 0x9c,
	0xda, 0x56, 0xa6, 0x35, 0x4d, 0x91, 0x52, 0x1a, 0xbb, 0xcc, 0x21, 0xf3, 0x31, 0xb8, 0x1b, 0x10,
	0x4f, 0x54, 0x74, 0x96, 0x94, 0xce, 0x83, 0x71, 0x6a, 0xdf, 0xd3, 0x3a, 0x93, 0x71, 0x88, 0xd6,
	0x24, 0x50, 0x2a, 0x8c, 0x80, 0x19, 0x32, 0xff, 0x8a, 0xc4, 0x2e, 0xc7, 0xd7, 0x72, 0x0f, 0xc4,
	0x58, 0x10, 0x6b, 0x79, 0xee, 0x26, 0x3e, 0x26, 0x7e, 0x59, 0x87, 0x59, 0x45, 0x88, 0x9a, 0x1a,
	0xbc, 0x50, 0x18, 0xc2, 0x82, 0xc8, 0xce, 0x0b, 0x99, 0x70, 0x39, 0x7d, 0x45, 0xac, 0x95, 0xe9,
	0xce, 0xcb, 0x23, 0x10, 0xad, 0x84, 0x4c, 0x5c, 0xd0, 0x57, 0xc4, 0xf4, 0x00, 0xf0, 0x68, 0xe0,
	0x76, 0xb1, 0x6a, 0xbd, 0xba, 0xb2, 0x78, 0x34, 0xb7, 0xc5, 0x0d, 0xad, 0x5f, 0x2a, 0x41, 0xd4,
	0xf0, 0x68, 0x70, 0xa2, 0x7e, 0x9b, 0xdf, 0x00, 0x55, 0x1f, 0xb7, 0x30, 0xd6, 0x50, 0xc6, 0xac,
	0x71, 0x6a, 0x6f, 0x55, 0xea, 0x59, 0xba, 0x5b, 0x95, 0xcf, 0x4f, 0x33, 0x87, 0x5f, 0x83, 0x8f,
	0x3c, 0x99, 0xa6, 0xdb, 0x27, 0xb4, 0xd7, 0x17, 0x16, 0xd8, 0x33, 0xf6, 0x17, 0xdf, 0xf7, 0xb2,
	0x62, 0x3f, 0x51, 0x64, 0xf3, 0x3b, 0x00, 0xf4, 0xcb, 0xf2, 0x9a, 0xb4, 0x56, 0xd5, 0x64, 0x6d,
	0x3b, 0xfa, 0x0e, 0x75, 0xf2, 0x3b, 0xd4, 0xb9, 0xcc, 0xef, 0xd0, 0xce, 0x6e, 0x36, 0x4c, 0x79,
	0x42, 0xc5, 0xbb, 0xf0, 0xf5, 0xdf, 0xb6, 0x81, 0x1a, 0x0a, 0x90, 0x74, 0xf8, 0x12, 0x98, 0x6a,
	0x59, 0x1c, 0x93, 0x21, 0x1b, 0xf0, 0xf9, 0x57, 0xc4, 0x01, 0x68, 0xe4, 0xfd, 0xcc, 0xad, 0x3b,
	0x7b, 0x8b, 0xfb, 0xb5, 0xce, 0x56, 0x39, 0xc5, 0x45, 0x08, 0xa2, 0x7a, 0xb6, 0x24, 0x38, 0xfc,
	0xb5, 0x06, 0x5a, 0xd5, 0xb5, 0x7c, 0x98, 0xf8, 0x72, 0x7d, 0x57, 0xc6, 0xf9, 0x03, 0xae, 0xa8,
	0x33, 0x60, 0x52, 0xee, 0xe6, 0x03, 0x84, 0xf5, 0xa7, 0xd5, 0xb4, 0xd6, 0xab, 0xd3, 0x3a, 0xcb,
	0x81, 0xa8, 0x49, 0xf9, 0x85, 0xc6, 0x32, 0xc7, 0x66, 0x07, 0xac, 0x53, 0xee, 0xaa, 0x83, 0xcb,
	0x95, 0x6a, 0x4a, 0x69, 0x7b, 0x9c, 0xda, 0xf7, 0x0b, 0xa5, 0x2a, 0x01, 0xa2, 0x35, 0xca, 0x8f,
	0x89, 0x27, 0x72, 0x8d, 0xc7, 0xe0, 0xae, 0xa4, 0x50, 0x2e, 0x62, 0xea, 0x25, 0xb2, 0x7b, 0x97,
	0x94, 0x44, 0x65, 0x4c, 0x27, 0xe3, 0x5a, 0xa1, 0x7c, 0x36, 0x9f, 0x80, 0x0d, 0x5a, 0xd8, 0x74,
	0xb1, 0x2f, 0xe8, 0xb5, 0x9e, 0xd2, 0x7a, 0x75, 0x67, 0xcc, 0x50, 0x20, 0x5a, 0xa7, 0x79, 0x26,
	0x87, 0x0a, 0x31, 0x5f, 0x80, 0xfb, 0xba, 0x64, 0x2c, 0x11, 0x2e, 0x8b, 0xb1, 0x1f, 0x12, 0x37,
	0x8a, 0xa9, 0xaf, 0x67, 0xb0, 0xde, 0xf9, 0x74, 0x9c, 0xda, 0xbb, 0xd5, 0xd2, 0x4e, 0xf3, 0x20,
	0xda, 0x54, 0x81, 0xf3, 0x44, 0x9c, 0x2b, 0xf8, 0xb9, 0x44, 0x65, 0x9d, 0x4a, 0xbe, 0x16, 0xac,
	0xab, 0xb3, 0xaa, 0xd4, 0x69, 0x8a, 0x00, 0xd1, 0x5a, 0xae, 0xa4, 0x34, 0x3a, 0xcf, 0xde, 0xdc,
	0xb4, 0x8c, 0xb7, 0x37, 0x2d, 0xe3, 0x9f, 0x9b, 0x96, 0xf1, 0xfa, 0xb6, 0xb5, 0xf0, 0xf6, 0xb6,
	0xb5, 0xf0, 0xc7, 0x6d, 0x6b, 0xe1, 0xfb, 0x47, 0x13, 0xf3, 0x2d, 0x2f, 0x9b, 0x87, 0xac, 0xdb,
	0xa5, 0x3e, 0xc5, 0x61, 0xf6, 0xdc, 0xae, 0xfe, 0x0b, 0xab, 0x06, 0xde, 0x5b, 0x56, 0x53, 0xf3,
	0xe8, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0x77, 0x95, 0x7c, 0xe3, 0x0a, 0x00, 0x00,
}

func (m *CollectorData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectorData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidationRewardsCollected.Size()
		i -= size
		if _, err := m.LiquidationRewardsCollected.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CollectedOpeningFee.Size()
		i -= size
		if _, err := m.CollectedOpeningFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CollectedClosingFee.Size()
		i -= size
		if _, err := m.CollectedClosingFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CollectedStabilityFee.Size()
		i -= size
		if _, err := m.CollectedStabilityFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AppAssetIdToFeeCollectedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppAssetIdToFeeCollectedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppAssetIdToFeeCollectedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NetFeesCollected.Size()
		i -= size
		if _, err := m.NetFeesCollected.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppToAssetIdCollectorMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppToAssetIdCollectorMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppToAssetIdCollectorMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collector.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AssetId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CollectorLookupTableData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectorLookupTableData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectorLookupTableData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintCollector(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x5a
	if m.BlockHeight != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.DebtLotSize != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.DebtLotSize))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.BidFactor.Size()
		i -= size
		if _, err := m.BidFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.LotSize != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.LotSize))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.LockerSavingRate.Size()
		i -= size
		if _, err := m.LockerSavingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollector(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.DebtThreshold != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.DebtThreshold))
		i--
		dAtA[i] = 0x28
	}
	if m.SurplusThreshold != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.SurplusThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.SecondaryAssetId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.SecondaryAssetId))
		i--
		dAtA[i] = 0x18
	}
	if m.CollectorAssetId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.CollectorAssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppToDenomsMapping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppToDenomsMapping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppToDenomsMapping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetIds) > 0 {
		dAtA4 := make([]byte, len(m.AssetIds)*10)
		var j3 int
		for _, num := range m.AssetIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintCollector(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.AppId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AppAssetIdToAuctionLookupTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppAssetIdToAuctionLookupTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppAssetIdToAuctionLookupTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetOutPrice != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AssetOutPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.AssetOutOraclePrice {
		i--
		if m.AssetOutOraclePrice {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsAuctionActive {
		i--
		if m.IsAuctionActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.IsDistributor {
		i--
		if m.IsDistributor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IsDebtAuction {
		i--
		if m.IsDebtAuction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsSurplusAuction {
		i--
		if m.IsSurplusAuction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AssetId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x10
	}
	if m.AppId != 0 {
		i = encodeVarintCollector(dAtA, i, uint64(m.AppId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollector(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollector(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollectorData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CollectedStabilityFee.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.CollectedClosingFee.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.CollectedOpeningFee.Size()
	n += 1 + l + sovCollector(uint64(l))
	l = m.LiquidationRewardsCollected.Size()
	n += 1 + l + sovCollector(uint64(l))
	return n
}

func (m *AppAssetIdToFeeCollectedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovCollector(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovCollector(uint64(m.AssetId))
	}
	l = m.NetFeesCollected.Size()
	n += 1 + l + sovCollector(uint64(l))
	return n
}

func (m *AppToAssetIdCollectorMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovCollector(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovCollector(uint64(m.AssetId))
	}
	l = m.Collector.Size()
	n += 1 + l + sovCollector(uint64(l))
	return n
}

func (m *CollectorLookupTableData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovCollector(uint64(m.AppId))
	}
	if m.CollectorAssetId != 0 {
		n += 1 + sovCollector(uint64(m.CollectorAssetId))
	}
	if m.SecondaryAssetId != 0 {
		n += 1 + sovCollector(uint64(m.SecondaryAssetId))
	}
	if m.SurplusThreshold != 0 {
		n += 1 + sovCollector(uint64(m.SurplusThreshold))
	}
	if m.DebtThreshold != 0 {
		n += 1 + sovCollector(uint64(m.DebtThreshold))
	}
	l = m.LockerSavingRate.Size()
	n += 1 + l + sovCollector(uint64(l))
	if m.LotSize != 0 {
		n += 1 + sovCollector(uint64(m.LotSize))
	}
	l = m.BidFactor.Size()
	n += 1 + l + sovCollector(uint64(l))
	if m.DebtLotSize != 0 {
		n += 1 + sovCollector(uint64(m.DebtLotSize))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovCollector(uint64(m.BlockHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BlockTime)
	n += 1 + l + sovCollector(uint64(l))
	return n
}

func (m *AppToDenomsMapping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovCollector(uint64(m.AppId))
	}
	if len(m.AssetIds) > 0 {
		l = 0
		for _, e := range m.AssetIds {
			l += sovCollector(uint64(e))
		}
		n += 1 + sovCollector(uint64(l)) + l
	}
	return n
}

func (m *AppAssetIdToAuctionLookupTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppId != 0 {
		n += 1 + sovCollector(uint64(m.AppId))
	}
	if m.AssetId != 0 {
		n += 1 + sovCollector(uint64(m.AssetId))
	}
	if m.IsSurplusAuction {
		n += 2
	}
	if m.IsDebtAuction {
		n += 2
	}
	if m.IsDistributor {
		n += 2
	}
	if m.IsAuctionActive {
		n += 2
	}
	if m.AssetOutOraclePrice {
		n += 2
	}
	if m.AssetOutPrice != 0 {
		n += 1 + sovCollector(uint64(m.AssetOutPrice))
	}
	return n
}

func sovCollector(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollector(x uint64) (n int) {
	return sovCollector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollectorData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedStabilityFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectedStabilityFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedClosingFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectedClosingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedOpeningFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CollectedOpeningFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationRewardsCollected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationRewardsCollected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppAssetIdToFeeCollectedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppAssetIdToFeeCollectedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppAssetIdToFeeCollectedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetFeesCollected", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NetFeesCollected.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppToAssetIdCollectorMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppToAssetIdCollectorMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppToAssetIdCollectorMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectorLookupTableData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectorLookupTableData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectorLookupTableData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorAssetId", wireType)
			}
			m.CollectorAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectorAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondaryAssetId", wireType)
			}
			m.SecondaryAssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondaryAssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurplusThreshold", wireType)
			}
			m.SurplusThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurplusThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtThreshold", wireType)
			}
			m.DebtThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerSavingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockerSavingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotSize", wireType)
			}
			m.LotSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebtLotSize", wireType)
			}
			m.DebtLotSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DebtLotSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollector
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollector
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppToDenomsMapping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppToDenomsMapping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppToDenomsMapping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollector
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AssetIds = append(m.AssetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollector
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCollector
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCollector
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AssetIds) == 0 {
					m.AssetIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCollector
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AssetIds = append(m.AssetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppAssetIdToAuctionLookupTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppAssetIdToAuctionLookupTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppAssetIdToAuctionLookupTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			m.AppId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSurplusAuction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSurplusAuction = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDebtAuction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDebtAuction = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDistributor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDistributor = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuctionActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuctionActive = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutOraclePrice", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AssetOutOraclePrice = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetOutPrice", wireType)
			}
			m.AssetOutPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetOutPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollector(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollector(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollector
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollector
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollector
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollector        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollector          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollector = fmt.Errorf("proto: unexpected end of group")
)
