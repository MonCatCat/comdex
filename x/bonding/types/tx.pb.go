// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/bonding/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgLockTokens struct {
	Owner    string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Duration time.Duration                            `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration,omitempty" yaml:"duration"`
	Coins    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *MsgLockTokens) Reset()         { *m = MsgLockTokens{} }
func (m *MsgLockTokens) String() string { return proto.CompactTextString(m) }
func (*MsgLockTokens) ProtoMessage()    {}
func (*MsgLockTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91905a5458b2bdf, []int{0}
}
func (m *MsgLockTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLockTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLockTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLockTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLockTokens.Merge(m, src)
}
func (m *MsgLockTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgLockTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLockTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLockTokens proto.InternalMessageInfo

func (m *MsgLockTokens) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgLockTokens) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgLockTokens) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type MsgLockTokensResponse struct {
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *MsgLockTokensResponse) Reset()         { *m = MsgLockTokensResponse{} }
func (m *MsgLockTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLockTokensResponse) ProtoMessage()    {}
func (*MsgLockTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91905a5458b2bdf, []int{1}
}
func (m *MsgLockTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLockTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLockTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLockTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLockTokensResponse.Merge(m, src)
}
func (m *MsgLockTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLockTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLockTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLockTokensResponse proto.InternalMessageInfo

func (m *MsgLockTokensResponse) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type MsgBeginUnlockingAll struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *MsgBeginUnlockingAll) Reset()         { *m = MsgBeginUnlockingAll{} }
func (m *MsgBeginUnlockingAll) String() string { return proto.CompactTextString(m) }
func (*MsgBeginUnlockingAll) ProtoMessage()    {}
func (*MsgBeginUnlockingAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91905a5458b2bdf, []int{2}
}
func (m *MsgBeginUnlockingAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginUnlockingAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginUnlockingAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginUnlockingAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginUnlockingAll.Merge(m, src)
}
func (m *MsgBeginUnlockingAll) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginUnlockingAll) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginUnlockingAll.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginUnlockingAll proto.InternalMessageInfo

func (m *MsgBeginUnlockingAll) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type MsgBeginUnlockingAllResponse struct {
	Unlocks []*PeriodLock `protobuf:"bytes,1,rep,name=unlocks,proto3" json:"unlocks,omitempty"`
}

func (m *MsgBeginUnlockingAllResponse) Reset()         { *m = MsgBeginUnlockingAllResponse{} }
func (m *MsgBeginUnlockingAllResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBeginUnlockingAllResponse) ProtoMessage()    {}
func (*MsgBeginUnlockingAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91905a5458b2bdf, []int{3}
}
func (m *MsgBeginUnlockingAllResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginUnlockingAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginUnlockingAllResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginUnlockingAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginUnlockingAllResponse.Merge(m, src)
}
func (m *MsgBeginUnlockingAllResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginUnlockingAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginUnlockingAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginUnlockingAllResponse proto.InternalMessageInfo

func (m *MsgBeginUnlockingAllResponse) GetUnlocks() []*PeriodLock {
	if m != nil {
		return m.Unlocks
	}
	return nil
}

type MsgBeginUnlocking struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	ID    uint64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// Amount of unlocking coins. Unlock all if not set.
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *MsgBeginUnlocking) Reset()         { *m = MsgBeginUnlocking{} }
func (m *MsgBeginUnlocking) String() string { return proto.CompactTextString(m) }
func (*MsgBeginUnlocking) ProtoMessage()    {}
func (*MsgBeginUnlocking) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91905a5458b2bdf, []int{4}
}
func (m *MsgBeginUnlocking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginUnlocking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginUnlocking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginUnlocking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginUnlocking.Merge(m, src)
}
func (m *MsgBeginUnlocking) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginUnlocking) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginUnlocking.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginUnlocking proto.InternalMessageInfo

func (m *MsgBeginUnlocking) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgBeginUnlocking) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MsgBeginUnlocking) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type MsgBeginUnlockingResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgBeginUnlockingResponse) Reset()         { *m = MsgBeginUnlockingResponse{} }
func (m *MsgBeginUnlockingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBeginUnlockingResponse) ProtoMessage()    {}
func (*MsgBeginUnlockingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e91905a5458b2bdf, []int{5}
}
func (m *MsgBeginUnlockingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBeginUnlockingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBeginUnlockingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBeginUnlockingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBeginUnlockingResponse.Merge(m, src)
}
func (m *MsgBeginUnlockingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBeginUnlockingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBeginUnlockingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBeginUnlockingResponse proto.InternalMessageInfo

func (m *MsgBeginUnlockingResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*MsgLockTokens)(nil), "comdex.bonding.v1beta1.MsgLockTokens")
	proto.RegisterType((*MsgLockTokensResponse)(nil), "comdex.bonding.v1beta1.MsgLockTokensResponse")
	proto.RegisterType((*MsgBeginUnlockingAll)(nil), "comdex.bonding.v1beta1.MsgBeginUnlockingAll")
	proto.RegisterType((*MsgBeginUnlockingAllResponse)(nil), "comdex.bonding.v1beta1.MsgBeginUnlockingAllResponse")
	proto.RegisterType((*MsgBeginUnlocking)(nil), "comdex.bonding.v1beta1.MsgBeginUnlocking")
	proto.RegisterType((*MsgBeginUnlockingResponse)(nil), "comdex.bonding.v1beta1.MsgBeginUnlockingResponse")
}

func init() { proto.RegisterFile("comdex/bonding/v1beta1/tx.proto", fileDescriptor_e91905a5458b2bdf) }

var fileDescriptor_e91905a5458b2bdf = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x1d, 0x4a, 0xcb, 0x02, 0x85, 0x5a, 0x05, 0xa5, 0x11, 0xb2, 0x83, 0x25, 0x20, 0x48,
	0xcd, 0x9a, 0x14, 0xb8, 0x20, 0x84, 0x44, 0xc8, 0xa5, 0x82, 0x48, 0xc8, 0x82, 0x0b, 0xe2, 0x62,
	0x3b, 0x9b, 0xed, 0x2a, 0xf6, 0x4e, 0x94, 0x75, 0x68, 0x73, 0xe7, 0x03, 0x38, 0xf2, 0x0d, 0x1c,
	0xf8, 0x8e, 0x1e, 0x2b, 0x4e, 0x9c, 0x52, 0x94, 0xdc, 0x38, 0xf6, 0x0b, 0x90, 0x77, 0xb3, 0x86,
	0x90, 0x16, 0x99, 0x4b, 0x4f, 0xf6, 0xec, 0xbc, 0x79, 0xf3, 0xe6, 0xcd, 0x6a, 0x91, 0x13, 0x41,
	0xd2, 0x25, 0x07, 0x5e, 0x08, 0xbc, 0xcb, 0x38, 0xf5, 0x3e, 0x34, 0x43, 0x92, 0x06, 0x4d, 0x2f,
	0x3d, 0xc0, 0x83, 0x21, 0xa4, 0x60, 0xdd, 0x54, 0x00, 0x3c, 0x07, 0xe0, 0x39, 0xa0, 0xba, 0x49,
	0x81, 0x82, 0x84, 0x78, 0xd9, 0x9f, 0x42, 0x57, 0x6d, 0x0a, 0x40, 0x63, 0xe2, 0xc9, 0x28, 0x1c,
	0xf5, 0xbc, 0xee, 0x68, 0x18, 0xa4, 0x0c, 0xb8, 0xce, 0x47, 0x20, 0x12, 0x10, 0x5e, 0x18, 0x08,
	0x92, 0xf7, 0x8a, 0x80, 0xe9, 0xfc, 0xed, 0x33, 0xe4, 0xc4, 0x10, 0xf5, 0x15, 0xc4, 0xfd, 0x68,
	0xa2, 0xab, 0x1d, 0x41, 0x5f, 0x41, 0xd4, 0x7f, 0x03, 0x7d, 0xc2, 0x85, 0x75, 0x17, 0xad, 0xc0,
	0x3e, 0x27, 0xc3, 0x8a, 0x51, 0x33, 0xea, 0x97, 0x5a, 0xd7, 0x4f, 0x26, 0xce, 0x95, 0x71, 0x90,
	0xc4, 0x4f, 0x5c, 0x79, 0xec, 0xfa, 0x2a, 0x6d, 0xed, 0xa1, 0x35, 0x2d, 0xa7, 0x62, 0xd6, 0x8c,
	0xfa, 0xe5, 0x9d, 0x2d, 0xac, 0xf4, 0x62, 0xad, 0x17, 0xb7, 0xe7, 0x80, 0x56, 0xf3, 0x70, 0xe2,
	0x94, 0x7e, 0x4e, 0x1c, 0x4b, 0x97, 0x6c, 0x43, 0xc2, 0x52, 0x92, 0x0c, 0xd2, 0xf1, 0xc9, 0xc4,
	0xb9, 0xa6, 0xf8, 0x75, 0xce, 0xfd, 0x7c, 0xec, 0x18, 0x7e, 0xce, 0x6e, 0x05, 0x68, 0x25, 0x1b,
	0x4a, 0x54, 0xca, 0xb5, 0xb2, 0x6c, 0xa3, 0xc6, 0xc6, 0xd9, 0xd8, 0xda, 0x41, 0xfc, 0x02, 0x18,
	0x6f, 0x3d, 0xc8, 0xda, 0x7c, 0x39, 0x76, 0xea, 0x94, 0xa5, 0x7b, 0xa3, 0x10, 0x47, 0x90, 0x78,
	0x73, 0x8f, 0xd4, 0xa7, 0x21, 0xba, 0x7d, 0x2f, 0x1d, 0x0f, 0x88, 0x90, 0x05, 0xc2, 0x57, 0xcc,
	0xee, 0x3d, 0x74, 0x63, 0xc1, 0x05, 0x9f, 0x88, 0x01, 0x70, 0x41, 0xac, 0x75, 0x64, 0xee, 0xb6,
	0xa5, 0x15, 0x17, 0x7c, 0x73, 0xb7, 0xed, 0x3e, 0x43, 0x9b, 0x1d, 0x41, 0x5b, 0x84, 0x32, 0xfe,
	0x96, 0x67, 0x3e, 0x32, 0x4e, 0x9f, 0xc7, 0x71, 0x51, 0xd7, 0xdc, 0xf7, 0xe8, 0xd6, 0x69, 0xf5,
	0x79, 0xbf, 0xa7, 0x68, 0x75, 0x24, 0xcf, 0x45, 0xc5, 0x90, 0xd3, 0xba, 0xf8, 0xf4, 0x2b, 0x83,
	0x5f, 0x93, 0x21, 0x83, 0x6e, 0x26, 0xd9, 0xd7, 0x25, 0xee, 0x57, 0x03, 0x6d, 0x2c, 0xd1, 0x17,
	0xde, 0xa8, 0x9a, 0xd5, 0xd4, 0xb3, 0x9e, 0x87, 0xef, 0x8f, 0xd1, 0xd6, 0x92, 0xde, 0xdc, 0x8b,
	0x0a, 0x5a, 0x15, 0xa3, 0x28, 0x22, 0x42, 0x48, 0xe5, 0x6b, 0xbe, 0x0e, 0x77, 0xbe, 0x99, 0xa8,
	0xdc, 0x11, 0xd4, 0x0a, 0x11, 0xfa, 0xe3, 0xe6, 0xde, 0x39, 0xcb, 0xaa, 0x85, 0xd5, 0x56, 0x1b,
	0x85, 0x60, 0xb9, 0x8a, 0x7d, 0xb4, 0xb1, 0xbc, 0xee, 0xed, 0x7f, 0x70, 0x2c, 0xa1, 0xab, 0x8f,
	0xfe, 0x07, 0x9d, 0x37, 0xe6, 0x68, 0xfd, 0xaf, 0x45, 0xde, 0x2f, 0xcc, 0x53, 0x6d, 0x16, 0x86,
	0xea, 0x7e, 0xad, 0x97, 0x87, 0x53, 0xdb, 0x38, 0x9a, 0xda, 0xc6, 0x8f, 0xa9, 0x6d, 0x7c, 0x9a,
	0xd9, 0xa5, 0xa3, 0x99, 0x5d, 0xfa, 0x3e, 0xb3, 0x4b, 0xef, 0x9a, 0x0b, 0x6b, 0xcd, 0x68, 0x1b,
	0xd0, 0xeb, 0xb1, 0x88, 0x05, 0xf1, 0x3c, 0xf6, 0x7e, 0x3f, 0x32, 0x72, 0xcb, 0xe1, 0x45, 0xf9,
	0x06, 0x3c, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0xce, 0x9b, 0xc9, 0x9d, 0x12, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// LockTokens lock tokens
	LockTokens(ctx context.Context, in *MsgLockTokens, opts ...grpc.CallOption) (*MsgLockTokensResponse, error)
	// BeginUnlockingAll begin unlocking all tokens
	BeginUnlockingAll(ctx context.Context, in *MsgBeginUnlockingAll, opts ...grpc.CallOption) (*MsgBeginUnlockingAllResponse, error)
	// MsgBeginUnlocking begins unlocking tokens by lock ID
	BeginUnlocking(ctx context.Context, in *MsgBeginUnlocking, opts ...grpc.CallOption) (*MsgBeginUnlockingResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) LockTokens(ctx context.Context, in *MsgLockTokens, opts ...grpc.CallOption) (*MsgLockTokensResponse, error) {
	out := new(MsgLockTokensResponse)
	err := c.cc.Invoke(ctx, "/comdex.bonding.v1beta1.Msg/LockTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BeginUnlockingAll(ctx context.Context, in *MsgBeginUnlockingAll, opts ...grpc.CallOption) (*MsgBeginUnlockingAllResponse, error) {
	out := new(MsgBeginUnlockingAllResponse)
	err := c.cc.Invoke(ctx, "/comdex.bonding.v1beta1.Msg/BeginUnlockingAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BeginUnlocking(ctx context.Context, in *MsgBeginUnlocking, opts ...grpc.CallOption) (*MsgBeginUnlockingResponse, error) {
	out := new(MsgBeginUnlockingResponse)
	err := c.cc.Invoke(ctx, "/comdex.bonding.v1beta1.Msg/BeginUnlocking", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// LockTokens lock tokens
	LockTokens(context.Context, *MsgLockTokens) (*MsgLockTokensResponse, error)
	// BeginUnlockingAll begin unlocking all tokens
	BeginUnlockingAll(context.Context, *MsgBeginUnlockingAll) (*MsgBeginUnlockingAllResponse, error)
	// MsgBeginUnlocking begins unlocking tokens by lock ID
	BeginUnlocking(context.Context, *MsgBeginUnlocking) (*MsgBeginUnlockingResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) LockTokens(ctx context.Context, req *MsgLockTokens) (*MsgLockTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockTokens not implemented")
}
func (*UnimplementedMsgServer) BeginUnlockingAll(ctx context.Context, req *MsgBeginUnlockingAll) (*MsgBeginUnlockingAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginUnlockingAll not implemented")
}
func (*UnimplementedMsgServer) BeginUnlocking(ctx context.Context, req *MsgBeginUnlocking) (*MsgBeginUnlockingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginUnlocking not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_LockTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLockTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LockTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.bonding.v1beta1.Msg/LockTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LockTokens(ctx, req.(*MsgLockTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BeginUnlockingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBeginUnlockingAll)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BeginUnlockingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.bonding.v1beta1.Msg/BeginUnlockingAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BeginUnlockingAll(ctx, req.(*MsgBeginUnlockingAll))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BeginUnlocking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBeginUnlocking)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BeginUnlocking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.bonding.v1beta1.Msg/BeginUnlocking",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BeginUnlocking(ctx, req.(*MsgBeginUnlocking))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.bonding.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LockTokens",
			Handler:    _Msg_LockTokens_Handler,
		},
		{
			MethodName: "BeginUnlockingAll",
			Handler:    _Msg_BeginUnlockingAll_Handler,
		},
		{
			MethodName: "BeginUnlocking",
			Handler:    _Msg_BeginUnlocking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/bonding/v1beta1/tx.proto",
}

func (m *MsgLockTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLockTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLockTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLockTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLockTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLockTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginUnlockingAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginUnlockingAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginUnlockingAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginUnlockingAllResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginUnlockingAllResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginUnlockingAllResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unlocks) > 0 {
		for iNdEx := len(m.Unlocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unlocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginUnlocking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginUnlocking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginUnlocking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBeginUnlockingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBeginUnlockingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBeginUnlockingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgLockTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovTx(uint64(l))
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgLockTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTx(uint64(m.ID))
	}
	return n
}

func (m *MsgBeginUnlockingAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBeginUnlockingAllResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unlocks) > 0 {
		for _, e := range m.Unlocks {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBeginUnlocking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovTx(uint64(m.ID))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBeginUnlockingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgLockTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLockTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLockTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLockTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLockTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLockTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginUnlockingAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginUnlockingAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginUnlockingAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginUnlockingAllResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginUnlockingAllResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginUnlockingAllResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unlocks = append(m.Unlocks, &PeriodLock{})
			if err := m.Unlocks[len(m.Unlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginUnlocking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginUnlocking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginUnlocking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBeginUnlockingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBeginUnlockingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBeginUnlockingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
